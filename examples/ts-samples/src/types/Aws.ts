// this file is generated
import {PcoreValue, Value} from 'lyra-workflow';

export class Acm_certificate implements PcoreValue {
  readonly acm_certificate_id: string|null;
  readonly arn: string|null;
  readonly certificate_body: string|null;
  readonly certificate_chain: string|null;
  readonly domain_name: string|null;
  readonly domain_validation_options: Anon0[]|null;
  readonly private_key: string|null;
  readonly subject_alternative_names: string[]|null;
  readonly tags: {[s: string]: string}|null;
  readonly validation_emails: string[]|null;
  readonly validation_method: string|null;

  constructor({
    acm_certificate_id = null,
    arn = null,
    certificate_body = null,
    certificate_chain = null,
    domain_name = null,
    domain_validation_options = null,
    private_key = null,
    subject_alternative_names = null,
    tags = null,
    validation_emails = null,
    validation_method = null
  }: {
    acm_certificate_id?: string|null,
    arn?: string|null,
    certificate_body?: string|null,
    certificate_chain?: string|null,
    domain_name?: string|null,
    domain_validation_options?: Anon0[]|null,
    private_key?: string|null,
    subject_alternative_names?: string[]|null,
    tags?: {[s: string]: string}|null,
    validation_emails?: string[]|null,
    validation_method?: string|null
  }) {
    this.acm_certificate_id = acm_certificate_id;
    this.arn = arn;
    this.certificate_body = certificate_body;
    this.certificate_chain = certificate_chain;
    this.domain_name = domain_name;
    this.domain_validation_options = domain_validation_options;
    this.private_key = private_key;
    this.subject_alternative_names = subject_alternative_names;
    this.tags = tags;
    this.validation_emails = validation_emails;
    this.validation_method = validation_method;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.acm_certificate_id !== null) {
      ih['acm_certificate_id'] = this.acm_certificate_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.certificate_body !== null) {
      ih['certificate_body'] = this.certificate_body;
    }
    if (this.certificate_chain !== null) {
      ih['certificate_chain'] = this.certificate_chain;
    }
    if (this.domain_name !== null) {
      ih['domain_name'] = this.domain_name;
    }
    if (this.domain_validation_options !== null) {
      ih['domain_validation_options'] = this.domain_validation_options;
    }
    if (this.private_key !== null) {
      ih['private_key'] = this.private_key;
    }
    if (this.subject_alternative_names !== null) {
      ih['subject_alternative_names'] = this.subject_alternative_names;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.validation_emails !== null) {
      ih['validation_emails'] = this.validation_emails;
    }
    if (this.validation_method !== null) {
      ih['validation_method'] = this.validation_method;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Acm_certificate';
  }
}

export class Acm_certificate_validation implements PcoreValue {
  readonly certificate_arn: string;
  readonly acm_certificate_validation_id: string|null;
  readonly validation_record_fqdns: string[]|null;

  constructor({
    certificate_arn,
    acm_certificate_validation_id = null,
    validation_record_fqdns = null
  }: {
    certificate_arn: string,
    acm_certificate_validation_id?: string|null,
    validation_record_fqdns?: string[]|null
  }) {
    this.certificate_arn = certificate_arn;
    this.acm_certificate_validation_id = acm_certificate_validation_id;
    this.validation_record_fqdns = validation_record_fqdns;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['certificate_arn'] = this.certificate_arn;
    if (this.acm_certificate_validation_id !== null) {
      ih['acm_certificate_validation_id'] = this.acm_certificate_validation_id;
    }
    if (this.validation_record_fqdns !== null) {
      ih['validation_record_fqdns'] = this.validation_record_fqdns;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Acm_certificate_validation';
  }
}

export class Acmpca_certificate_authority implements PcoreValue {
  readonly acmpca_certificate_authority_id: string|null;
  readonly arn: string|null;
  readonly certificate: string|null;
  readonly certificate_authority_configuration: Anon2|null;
  readonly certificate_chain: string|null;
  readonly certificate_signing_request: string|null;
  readonly enabled: boolean;
  readonly not_after: string|null;
  readonly not_before: string|null;
  readonly revocation_configuration: Anon4|null;
  readonly serial: string|null;
  readonly status: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly type: string;

  constructor({
    acmpca_certificate_authority_id = null,
    arn = null,
    certificate = null,
    certificate_authority_configuration = null,
    certificate_chain = null,
    certificate_signing_request = null,
    enabled = true,
    not_after = null,
    not_before = null,
    revocation_configuration = null,
    serial = null,
    status = null,
    tags = null,
    type = 'SUBORDINATE'
  }: {
    acmpca_certificate_authority_id?: string|null,
    arn?: string|null,
    certificate?: string|null,
    certificate_authority_configuration?: Anon2|null,
    certificate_chain?: string|null,
    certificate_signing_request?: string|null,
    enabled?: boolean,
    not_after?: string|null,
    not_before?: string|null,
    revocation_configuration?: Anon4|null,
    serial?: string|null,
    status?: string|null,
    tags?: {[s: string]: string}|null,
    type?: string
  }) {
    this.acmpca_certificate_authority_id = acmpca_certificate_authority_id;
    this.arn = arn;
    this.certificate = certificate;
    this.certificate_authority_configuration = certificate_authority_configuration;
    this.certificate_chain = certificate_chain;
    this.certificate_signing_request = certificate_signing_request;
    this.enabled = enabled;
    this.not_after = not_after;
    this.not_before = not_before;
    this.revocation_configuration = revocation_configuration;
    this.serial = serial;
    this.status = status;
    this.tags = tags;
    this.type = type;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.acmpca_certificate_authority_id !== null) {
      ih['acmpca_certificate_authority_id'] = this.acmpca_certificate_authority_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.certificate !== null) {
      ih['certificate'] = this.certificate;
    }
    if (this.certificate_authority_configuration !== null) {
      ih['certificate_authority_configuration'] = this.certificate_authority_configuration;
    }
    if (this.certificate_chain !== null) {
      ih['certificate_chain'] = this.certificate_chain;
    }
    if (this.certificate_signing_request !== null) {
      ih['certificate_signing_request'] = this.certificate_signing_request;
    }
    if (this.enabled !== true) {
      ih['enabled'] = this.enabled;
    }
    if (this.not_after !== null) {
      ih['not_after'] = this.not_after;
    }
    if (this.not_before !== null) {
      ih['not_before'] = this.not_before;
    }
    if (this.revocation_configuration !== null) {
      ih['revocation_configuration'] = this.revocation_configuration;
    }
    if (this.serial !== null) {
      ih['serial'] = this.serial;
    }
    if (this.status !== null) {
      ih['status'] = this.status;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.type !== 'SUBORDINATE') {
      ih['type'] = this.type;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Acmpca_certificate_authority';
  }
}

export class Alb implements PcoreValue {
  readonly alb_id: string|null;
  readonly access_logs: Anon5|null;
  readonly arn: string|null;
  readonly arn_suffix: string|null;
  readonly dns_name: string|null;
  readonly enable_cross_zone_load_balancing: boolean;
  readonly enable_deletion_protection: boolean;
  readonly enable_http2: boolean;
  readonly idle_timeout: number;
  readonly internal: boolean|null;
  readonly ip_address_type: string|null;
  readonly load_balancer_type: string;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly security_groups: string[]|null;
  readonly subnet_mapping: Anon6[]|null;
  readonly subnets: string[]|null;
  readonly tags: {[s: string]: string}|null;
  readonly vpc_id: string|null;
  readonly zone_id: string|null;

  constructor({
    alb_id = null,
    access_logs = null,
    arn = null,
    arn_suffix = null,
    dns_name = null,
    enable_cross_zone_load_balancing = false,
    enable_deletion_protection = false,
    enable_http2 = true,
    idle_timeout = 60,
    internal = null,
    ip_address_type = null,
    load_balancer_type = 'application',
    name = null,
    name_prefix = null,
    security_groups = null,
    subnet_mapping = null,
    subnets = null,
    tags = null,
    vpc_id = null,
    zone_id = null
  }: {
    alb_id?: string|null,
    access_logs?: Anon5|null,
    arn?: string|null,
    arn_suffix?: string|null,
    dns_name?: string|null,
    enable_cross_zone_load_balancing?: boolean,
    enable_deletion_protection?: boolean,
    enable_http2?: boolean,
    idle_timeout?: number,
    internal?: boolean|null,
    ip_address_type?: string|null,
    load_balancer_type?: string,
    name?: string|null,
    name_prefix?: string|null,
    security_groups?: string[]|null,
    subnet_mapping?: Anon6[]|null,
    subnets?: string[]|null,
    tags?: {[s: string]: string}|null,
    vpc_id?: string|null,
    zone_id?: string|null
  }) {
    this.alb_id = alb_id;
    this.access_logs = access_logs;
    this.arn = arn;
    this.arn_suffix = arn_suffix;
    this.dns_name = dns_name;
    this.enable_cross_zone_load_balancing = enable_cross_zone_load_balancing;
    this.enable_deletion_protection = enable_deletion_protection;
    this.enable_http2 = enable_http2;
    this.idle_timeout = idle_timeout;
    this.internal = internal;
    this.ip_address_type = ip_address_type;
    this.load_balancer_type = load_balancer_type;
    this.name = name;
    this.name_prefix = name_prefix;
    this.security_groups = security_groups;
    this.subnet_mapping = subnet_mapping;
    this.subnets = subnets;
    this.tags = tags;
    this.vpc_id = vpc_id;
    this.zone_id = zone_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.alb_id !== null) {
      ih['alb_id'] = this.alb_id;
    }
    if (this.access_logs !== null) {
      ih['access_logs'] = this.access_logs;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.arn_suffix !== null) {
      ih['arn_suffix'] = this.arn_suffix;
    }
    if (this.dns_name !== null) {
      ih['dns_name'] = this.dns_name;
    }
    if (this.enable_cross_zone_load_balancing !== false) {
      ih['enable_cross_zone_load_balancing'] = this.enable_cross_zone_load_balancing;
    }
    if (this.enable_deletion_protection !== false) {
      ih['enable_deletion_protection'] = this.enable_deletion_protection;
    }
    if (this.enable_http2 !== true) {
      ih['enable_http2'] = this.enable_http2;
    }
    if (this.idle_timeout !== 60) {
      ih['idle_timeout'] = this.idle_timeout;
    }
    if (this.internal !== null) {
      ih['internal'] = this.internal;
    }
    if (this.ip_address_type !== null) {
      ih['ip_address_type'] = this.ip_address_type;
    }
    if (this.load_balancer_type !== 'application') {
      ih['load_balancer_type'] = this.load_balancer_type;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.security_groups !== null) {
      ih['security_groups'] = this.security_groups;
    }
    if (this.subnet_mapping !== null) {
      ih['subnet_mapping'] = this.subnet_mapping;
    }
    if (this.subnets !== null) {
      ih['subnets'] = this.subnets;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpc_id !== null) {
      ih['vpc_id'] = this.vpc_id;
    }
    if (this.zone_id !== null) {
      ih['zone_id'] = this.zone_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Alb';
  }
}

export class Alb_listener implements PcoreValue {
  readonly default_action: Anon11[];
  readonly load_balancer_arn: string;
  readonly port: number;
  readonly alb_listener_id: string|null;
  readonly arn: string|null;
  readonly certificate_arn: string|null;
  readonly protocol: string;
  readonly ssl_policy: string|null;

  constructor({
    default_action,
    load_balancer_arn,
    port,
    alb_listener_id = null,
    arn = null,
    certificate_arn = null,
    protocol = 'HTTP',
    ssl_policy = null
  }: {
    default_action: Anon11[],
    load_balancer_arn: string,
    port: number,
    alb_listener_id?: string|null,
    arn?: string|null,
    certificate_arn?: string|null,
    protocol?: string,
    ssl_policy?: string|null
  }) {
    this.default_action = default_action;
    this.load_balancer_arn = load_balancer_arn;
    this.port = port;
    this.alb_listener_id = alb_listener_id;
    this.arn = arn;
    this.certificate_arn = certificate_arn;
    this.protocol = protocol;
    this.ssl_policy = ssl_policy;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['default_action'] = this.default_action;
    ih['load_balancer_arn'] = this.load_balancer_arn;
    ih['port'] = this.port;
    if (this.alb_listener_id !== null) {
      ih['alb_listener_id'] = this.alb_listener_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.certificate_arn !== null) {
      ih['certificate_arn'] = this.certificate_arn;
    }
    if (this.protocol !== 'HTTP') {
      ih['protocol'] = this.protocol;
    }
    if (this.ssl_policy !== null) {
      ih['ssl_policy'] = this.ssl_policy;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Alb_listener';
  }
}

export class Alb_listener_certificate implements PcoreValue {
  readonly certificate_arn: string;
  readonly listener_arn: string;
  readonly alb_listener_certificate_id: string|null;

  constructor({
    certificate_arn,
    listener_arn,
    alb_listener_certificate_id = null
  }: {
    certificate_arn: string,
    listener_arn: string,
    alb_listener_certificate_id?: string|null
  }) {
    this.certificate_arn = certificate_arn;
    this.listener_arn = listener_arn;
    this.alb_listener_certificate_id = alb_listener_certificate_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['certificate_arn'] = this.certificate_arn;
    ih['listener_arn'] = this.listener_arn;
    if (this.alb_listener_certificate_id !== null) {
      ih['alb_listener_certificate_id'] = this.alb_listener_certificate_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Alb_listener_certificate';
  }
}

export class Alb_listener_rule implements PcoreValue {
  readonly action: Anon11[];
  readonly condition: Anon12[];
  readonly listener_arn: string;
  readonly alb_listener_rule_id: string|null;
  readonly arn: string|null;
  readonly priority: number|null;

  constructor({
    action,
    condition,
    listener_arn,
    alb_listener_rule_id = null,
    arn = null,
    priority = null
  }: {
    action: Anon11[],
    condition: Anon12[],
    listener_arn: string,
    alb_listener_rule_id?: string|null,
    arn?: string|null,
    priority?: number|null
  }) {
    this.action = action;
    this.condition = condition;
    this.listener_arn = listener_arn;
    this.alb_listener_rule_id = alb_listener_rule_id;
    this.arn = arn;
    this.priority = priority;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['action'] = this.action;
    ih['condition'] = this.condition;
    ih['listener_arn'] = this.listener_arn;
    if (this.alb_listener_rule_id !== null) {
      ih['alb_listener_rule_id'] = this.alb_listener_rule_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.priority !== null) {
      ih['priority'] = this.priority;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Alb_listener_rule';
  }
}

export class Alb_target_group implements PcoreValue {
  readonly alb_target_group_id: string|null;
  readonly arn: string|null;
  readonly arn_suffix: string|null;
  readonly deregistration_delay: number;
  readonly health_check: Anon13|null;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly port: number|null;
  readonly protocol: string|null;
  readonly proxy_protocol_v2: boolean;
  readonly slow_start: number;
  readonly stickiness: Anon14|null;
  readonly tags: {[s: string]: string}|null;
  readonly target_type: string;
  readonly vpc_id: string|null;

  constructor({
    alb_target_group_id = null,
    arn = null,
    arn_suffix = null,
    deregistration_delay = 300,
    health_check = null,
    name = null,
    name_prefix = null,
    port = null,
    protocol = null,
    proxy_protocol_v2 = false,
    slow_start = 0,
    stickiness = null,
    tags = null,
    target_type = 'instance',
    vpc_id = null
  }: {
    alb_target_group_id?: string|null,
    arn?: string|null,
    arn_suffix?: string|null,
    deregistration_delay?: number,
    health_check?: Anon13|null,
    name?: string|null,
    name_prefix?: string|null,
    port?: number|null,
    protocol?: string|null,
    proxy_protocol_v2?: boolean,
    slow_start?: number,
    stickiness?: Anon14|null,
    tags?: {[s: string]: string}|null,
    target_type?: string,
    vpc_id?: string|null
  }) {
    this.alb_target_group_id = alb_target_group_id;
    this.arn = arn;
    this.arn_suffix = arn_suffix;
    this.deregistration_delay = deregistration_delay;
    this.health_check = health_check;
    this.name = name;
    this.name_prefix = name_prefix;
    this.port = port;
    this.protocol = protocol;
    this.proxy_protocol_v2 = proxy_protocol_v2;
    this.slow_start = slow_start;
    this.stickiness = stickiness;
    this.tags = tags;
    this.target_type = target_type;
    this.vpc_id = vpc_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.alb_target_group_id !== null) {
      ih['alb_target_group_id'] = this.alb_target_group_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.arn_suffix !== null) {
      ih['arn_suffix'] = this.arn_suffix;
    }
    if (this.deregistration_delay !== 300) {
      ih['deregistration_delay'] = this.deregistration_delay;
    }
    if (this.health_check !== null) {
      ih['health_check'] = this.health_check;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.port !== null) {
      ih['port'] = this.port;
    }
    if (this.protocol !== null) {
      ih['protocol'] = this.protocol;
    }
    if (this.proxy_protocol_v2 !== false) {
      ih['proxy_protocol_v2'] = this.proxy_protocol_v2;
    }
    if (this.slow_start !== 0) {
      ih['slow_start'] = this.slow_start;
    }
    if (this.stickiness !== null) {
      ih['stickiness'] = this.stickiness;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.target_type !== 'instance') {
      ih['target_type'] = this.target_type;
    }
    if (this.vpc_id !== null) {
      ih['vpc_id'] = this.vpc_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Alb_target_group';
  }
}

export class Alb_target_group_attachment implements PcoreValue {
  readonly target_group_arn: string;
  readonly target_id: string;
  readonly alb_target_group_attachment_id: string|null;
  readonly availability_zone: string|null;
  readonly port: number|null;

  constructor({
    target_group_arn,
    target_id,
    alb_target_group_attachment_id = null,
    availability_zone = null,
    port = null
  }: {
    target_group_arn: string,
    target_id: string,
    alb_target_group_attachment_id?: string|null,
    availability_zone?: string|null,
    port?: number|null
  }) {
    this.target_group_arn = target_group_arn;
    this.target_id = target_id;
    this.alb_target_group_attachment_id = alb_target_group_attachment_id;
    this.availability_zone = availability_zone;
    this.port = port;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['target_group_arn'] = this.target_group_arn;
    ih['target_id'] = this.target_id;
    if (this.alb_target_group_attachment_id !== null) {
      ih['alb_target_group_attachment_id'] = this.alb_target_group_attachment_id;
    }
    if (this.availability_zone !== null) {
      ih['availability_zone'] = this.availability_zone;
    }
    if (this.port !== null) {
      ih['port'] = this.port;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Alb_target_group_attachment';
  }
}

export class Ami implements PcoreValue {
  readonly name: string;
  readonly ami_id: string|null;
  readonly architecture: string;
  readonly description: string|null;
  readonly ebs_block_device: Anon15[]|null;
  readonly ena_support: boolean|null;
  readonly ephemeral_block_device: Anon16[]|null;
  readonly image_location: string|null;
  readonly kernel_id: string|null;
  readonly manage_ebs_snapshots: boolean|null;
  readonly ramdisk_id: string|null;
  readonly root_device_name: string|null;
  readonly root_snapshot_id: string|null;
  readonly sriov_net_support: string;
  readonly tags: {[s: string]: string}|null;
  readonly virtualization_type: string;

  constructor({
    name,
    ami_id = null,
    architecture = 'x86_64',
    description = null,
    ebs_block_device = null,
    ena_support = null,
    ephemeral_block_device = null,
    image_location = null,
    kernel_id = null,
    manage_ebs_snapshots = null,
    ramdisk_id = null,
    root_device_name = null,
    root_snapshot_id = null,
    sriov_net_support = 'simple',
    tags = null,
    virtualization_type = 'paravirtual'
  }: {
    name: string,
    ami_id?: string|null,
    architecture?: string,
    description?: string|null,
    ebs_block_device?: Anon15[]|null,
    ena_support?: boolean|null,
    ephemeral_block_device?: Anon16[]|null,
    image_location?: string|null,
    kernel_id?: string|null,
    manage_ebs_snapshots?: boolean|null,
    ramdisk_id?: string|null,
    root_device_name?: string|null,
    root_snapshot_id?: string|null,
    sriov_net_support?: string,
    tags?: {[s: string]: string}|null,
    virtualization_type?: string
  }) {
    this.name = name;
    this.ami_id = ami_id;
    this.architecture = architecture;
    this.description = description;
    this.ebs_block_device = ebs_block_device;
    this.ena_support = ena_support;
    this.ephemeral_block_device = ephemeral_block_device;
    this.image_location = image_location;
    this.kernel_id = kernel_id;
    this.manage_ebs_snapshots = manage_ebs_snapshots;
    this.ramdisk_id = ramdisk_id;
    this.root_device_name = root_device_name;
    this.root_snapshot_id = root_snapshot_id;
    this.sriov_net_support = sriov_net_support;
    this.tags = tags;
    this.virtualization_type = virtualization_type;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.ami_id !== null) {
      ih['ami_id'] = this.ami_id;
    }
    if (this.architecture !== 'x86_64') {
      ih['architecture'] = this.architecture;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.ebs_block_device !== null) {
      ih['ebs_block_device'] = this.ebs_block_device;
    }
    if (this.ena_support !== null) {
      ih['ena_support'] = this.ena_support;
    }
    if (this.ephemeral_block_device !== null) {
      ih['ephemeral_block_device'] = this.ephemeral_block_device;
    }
    if (this.image_location !== null) {
      ih['image_location'] = this.image_location;
    }
    if (this.kernel_id !== null) {
      ih['kernel_id'] = this.kernel_id;
    }
    if (this.manage_ebs_snapshots !== null) {
      ih['manage_ebs_snapshots'] = this.manage_ebs_snapshots;
    }
    if (this.ramdisk_id !== null) {
      ih['ramdisk_id'] = this.ramdisk_id;
    }
    if (this.root_device_name !== null) {
      ih['root_device_name'] = this.root_device_name;
    }
    if (this.root_snapshot_id !== null) {
      ih['root_snapshot_id'] = this.root_snapshot_id;
    }
    if (this.sriov_net_support !== 'simple') {
      ih['sriov_net_support'] = this.sriov_net_support;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.virtualization_type !== 'paravirtual') {
      ih['virtualization_type'] = this.virtualization_type;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ami';
  }
}

export class Ami_copy implements PcoreValue {
  readonly name: string;
  readonly source_ami_id: string;
  readonly source_ami_region: string;
  readonly ami_copy_id: string|null;
  readonly architecture: string|null;
  readonly description: string|null;
  readonly ebs_block_device: Anon17[]|null;
  readonly ena_support: boolean|null;
  readonly encrypted: boolean;
  readonly ephemeral_block_device: Anon18[]|null;
  readonly image_location: string|null;
  readonly kernel_id: string|null;
  readonly kms_key_id: string|null;
  readonly manage_ebs_snapshots: boolean|null;
  readonly ramdisk_id: string|null;
  readonly root_device_name: string|null;
  readonly root_snapshot_id: string|null;
  readonly sriov_net_support: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly virtualization_type: string|null;

  constructor({
    name,
    source_ami_id,
    source_ami_region,
    ami_copy_id = null,
    architecture = null,
    description = null,
    ebs_block_device = null,
    ena_support = null,
    encrypted = false,
    ephemeral_block_device = null,
    image_location = null,
    kernel_id = null,
    kms_key_id = null,
    manage_ebs_snapshots = null,
    ramdisk_id = null,
    root_device_name = null,
    root_snapshot_id = null,
    sriov_net_support = null,
    tags = null,
    virtualization_type = null
  }: {
    name: string,
    source_ami_id: string,
    source_ami_region: string,
    ami_copy_id?: string|null,
    architecture?: string|null,
    description?: string|null,
    ebs_block_device?: Anon17[]|null,
    ena_support?: boolean|null,
    encrypted?: boolean,
    ephemeral_block_device?: Anon18[]|null,
    image_location?: string|null,
    kernel_id?: string|null,
    kms_key_id?: string|null,
    manage_ebs_snapshots?: boolean|null,
    ramdisk_id?: string|null,
    root_device_name?: string|null,
    root_snapshot_id?: string|null,
    sriov_net_support?: string|null,
    tags?: {[s: string]: string}|null,
    virtualization_type?: string|null
  }) {
    this.name = name;
    this.source_ami_id = source_ami_id;
    this.source_ami_region = source_ami_region;
    this.ami_copy_id = ami_copy_id;
    this.architecture = architecture;
    this.description = description;
    this.ebs_block_device = ebs_block_device;
    this.ena_support = ena_support;
    this.encrypted = encrypted;
    this.ephemeral_block_device = ephemeral_block_device;
    this.image_location = image_location;
    this.kernel_id = kernel_id;
    this.kms_key_id = kms_key_id;
    this.manage_ebs_snapshots = manage_ebs_snapshots;
    this.ramdisk_id = ramdisk_id;
    this.root_device_name = root_device_name;
    this.root_snapshot_id = root_snapshot_id;
    this.sriov_net_support = sriov_net_support;
    this.tags = tags;
    this.virtualization_type = virtualization_type;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['source_ami_id'] = this.source_ami_id;
    ih['source_ami_region'] = this.source_ami_region;
    if (this.ami_copy_id !== null) {
      ih['ami_copy_id'] = this.ami_copy_id;
    }
    if (this.architecture !== null) {
      ih['architecture'] = this.architecture;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.ebs_block_device !== null) {
      ih['ebs_block_device'] = this.ebs_block_device;
    }
    if (this.ena_support !== null) {
      ih['ena_support'] = this.ena_support;
    }
    if (this.encrypted !== false) {
      ih['encrypted'] = this.encrypted;
    }
    if (this.ephemeral_block_device !== null) {
      ih['ephemeral_block_device'] = this.ephemeral_block_device;
    }
    if (this.image_location !== null) {
      ih['image_location'] = this.image_location;
    }
    if (this.kernel_id !== null) {
      ih['kernel_id'] = this.kernel_id;
    }
    if (this.kms_key_id !== null) {
      ih['kms_key_id'] = this.kms_key_id;
    }
    if (this.manage_ebs_snapshots !== null) {
      ih['manage_ebs_snapshots'] = this.manage_ebs_snapshots;
    }
    if (this.ramdisk_id !== null) {
      ih['ramdisk_id'] = this.ramdisk_id;
    }
    if (this.root_device_name !== null) {
      ih['root_device_name'] = this.root_device_name;
    }
    if (this.root_snapshot_id !== null) {
      ih['root_snapshot_id'] = this.root_snapshot_id;
    }
    if (this.sriov_net_support !== null) {
      ih['sriov_net_support'] = this.sriov_net_support;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.virtualization_type !== null) {
      ih['virtualization_type'] = this.virtualization_type;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ami_copy';
  }
}

export class Ami_from_instance implements PcoreValue {
  readonly name: string;
  readonly source_instance_id: string;
  readonly ami_from_instance_id: string|null;
  readonly architecture: string|null;
  readonly description: string|null;
  readonly ebs_block_device: Anon17[]|null;
  readonly ena_support: boolean|null;
  readonly ephemeral_block_device: Anon18[]|null;
  readonly image_location: string|null;
  readonly kernel_id: string|null;
  readonly manage_ebs_snapshots: boolean|null;
  readonly ramdisk_id: string|null;
  readonly root_device_name: string|null;
  readonly root_snapshot_id: string|null;
  readonly snapshot_without_reboot: boolean|null;
  readonly sriov_net_support: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly virtualization_type: string|null;

  constructor({
    name,
    source_instance_id,
    ami_from_instance_id = null,
    architecture = null,
    description = null,
    ebs_block_device = null,
    ena_support = null,
    ephemeral_block_device = null,
    image_location = null,
    kernel_id = null,
    manage_ebs_snapshots = null,
    ramdisk_id = null,
    root_device_name = null,
    root_snapshot_id = null,
    snapshot_without_reboot = null,
    sriov_net_support = null,
    tags = null,
    virtualization_type = null
  }: {
    name: string,
    source_instance_id: string,
    ami_from_instance_id?: string|null,
    architecture?: string|null,
    description?: string|null,
    ebs_block_device?: Anon17[]|null,
    ena_support?: boolean|null,
    ephemeral_block_device?: Anon18[]|null,
    image_location?: string|null,
    kernel_id?: string|null,
    manage_ebs_snapshots?: boolean|null,
    ramdisk_id?: string|null,
    root_device_name?: string|null,
    root_snapshot_id?: string|null,
    snapshot_without_reboot?: boolean|null,
    sriov_net_support?: string|null,
    tags?: {[s: string]: string}|null,
    virtualization_type?: string|null
  }) {
    this.name = name;
    this.source_instance_id = source_instance_id;
    this.ami_from_instance_id = ami_from_instance_id;
    this.architecture = architecture;
    this.description = description;
    this.ebs_block_device = ebs_block_device;
    this.ena_support = ena_support;
    this.ephemeral_block_device = ephemeral_block_device;
    this.image_location = image_location;
    this.kernel_id = kernel_id;
    this.manage_ebs_snapshots = manage_ebs_snapshots;
    this.ramdisk_id = ramdisk_id;
    this.root_device_name = root_device_name;
    this.root_snapshot_id = root_snapshot_id;
    this.snapshot_without_reboot = snapshot_without_reboot;
    this.sriov_net_support = sriov_net_support;
    this.tags = tags;
    this.virtualization_type = virtualization_type;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['source_instance_id'] = this.source_instance_id;
    if (this.ami_from_instance_id !== null) {
      ih['ami_from_instance_id'] = this.ami_from_instance_id;
    }
    if (this.architecture !== null) {
      ih['architecture'] = this.architecture;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.ebs_block_device !== null) {
      ih['ebs_block_device'] = this.ebs_block_device;
    }
    if (this.ena_support !== null) {
      ih['ena_support'] = this.ena_support;
    }
    if (this.ephemeral_block_device !== null) {
      ih['ephemeral_block_device'] = this.ephemeral_block_device;
    }
    if (this.image_location !== null) {
      ih['image_location'] = this.image_location;
    }
    if (this.kernel_id !== null) {
      ih['kernel_id'] = this.kernel_id;
    }
    if (this.manage_ebs_snapshots !== null) {
      ih['manage_ebs_snapshots'] = this.manage_ebs_snapshots;
    }
    if (this.ramdisk_id !== null) {
      ih['ramdisk_id'] = this.ramdisk_id;
    }
    if (this.root_device_name !== null) {
      ih['root_device_name'] = this.root_device_name;
    }
    if (this.root_snapshot_id !== null) {
      ih['root_snapshot_id'] = this.root_snapshot_id;
    }
    if (this.snapshot_without_reboot !== null) {
      ih['snapshot_without_reboot'] = this.snapshot_without_reboot;
    }
    if (this.sriov_net_support !== null) {
      ih['sriov_net_support'] = this.sriov_net_support;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.virtualization_type !== null) {
      ih['virtualization_type'] = this.virtualization_type;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ami_from_instance';
  }
}

export class Ami_launch_permission implements PcoreValue {
  readonly account_id: string;
  readonly image_id: string;
  readonly ami_launch_permission_id: string|null;

  constructor({
    account_id,
    image_id,
    ami_launch_permission_id = null
  }: {
    account_id: string,
    image_id: string,
    ami_launch_permission_id?: string|null
  }) {
    this.account_id = account_id;
    this.image_id = image_id;
    this.ami_launch_permission_id = ami_launch_permission_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['account_id'] = this.account_id;
    ih['image_id'] = this.image_id;
    if (this.ami_launch_permission_id !== null) {
      ih['ami_launch_permission_id'] = this.ami_launch_permission_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ami_launch_permission';
  }
}

export class Api_gateway_account implements PcoreValue {
  readonly api_gateway_account_id: string|null;
  readonly cloudwatch_role_arn: string|null;
  readonly throttle_settings: Anon19|null;

  constructor({
    api_gateway_account_id = null,
    cloudwatch_role_arn = null,
    throttle_settings = null
  }: {
    api_gateway_account_id?: string|null,
    cloudwatch_role_arn?: string|null,
    throttle_settings?: Anon19|null
  }) {
    this.api_gateway_account_id = api_gateway_account_id;
    this.cloudwatch_role_arn = cloudwatch_role_arn;
    this.throttle_settings = throttle_settings;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.api_gateway_account_id !== null) {
      ih['api_gateway_account_id'] = this.api_gateway_account_id;
    }
    if (this.cloudwatch_role_arn !== null) {
      ih['cloudwatch_role_arn'] = this.cloudwatch_role_arn;
    }
    if (this.throttle_settings !== null) {
      ih['throttle_settings'] = this.throttle_settings;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Api_gateway_account';
  }
}

export class Api_gateway_api_key implements PcoreValue {
  readonly name: string;
  readonly api_gateway_api_key_id: string|null;
  readonly created_date: string|null;
  readonly description: string;
  readonly enabled: boolean;
  readonly last_updated_date: string|null;
  readonly value: string|null;

  constructor({
    name,
    api_gateway_api_key_id = null,
    created_date = null,
    description = 'Managed by Terraform',
    enabled = true,
    last_updated_date = null,
    value = null
  }: {
    name: string,
    api_gateway_api_key_id?: string|null,
    created_date?: string|null,
    description?: string,
    enabled?: boolean,
    last_updated_date?: string|null,
    value?: string|null
  }) {
    this.name = name;
    this.api_gateway_api_key_id = api_gateway_api_key_id;
    this.created_date = created_date;
    this.description = description;
    this.enabled = enabled;
    this.last_updated_date = last_updated_date;
    this.value = value;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.api_gateway_api_key_id !== null) {
      ih['api_gateway_api_key_id'] = this.api_gateway_api_key_id;
    }
    if (this.created_date !== null) {
      ih['created_date'] = this.created_date;
    }
    if (this.description !== 'Managed by Terraform') {
      ih['description'] = this.description;
    }
    if (this.enabled !== true) {
      ih['enabled'] = this.enabled;
    }
    if (this.last_updated_date !== null) {
      ih['last_updated_date'] = this.last_updated_date;
    }
    if (this.value !== null) {
      ih['value'] = this.value;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Api_gateway_api_key';
  }
}

export class Api_gateway_authorizer implements PcoreValue {
  readonly name: string;
  readonly rest_api_id: string;
  readonly api_gateway_authorizer_id: string|null;
  readonly authorizer_credentials: string|null;
  readonly authorizer_result_ttl_in_seconds: number|null;
  readonly authorizer_uri: string|null;
  readonly identity_source: string;
  readonly identity_validation_expression: string|null;
  readonly provider_arns: string[]|null;
  readonly type: string;

  constructor({
    name,
    rest_api_id,
    api_gateway_authorizer_id = null,
    authorizer_credentials = null,
    authorizer_result_ttl_in_seconds = null,
    authorizer_uri = null,
    identity_source = 'method.request.header.Authorization',
    identity_validation_expression = null,
    provider_arns = null,
    type = 'TOKEN'
  }: {
    name: string,
    rest_api_id: string,
    api_gateway_authorizer_id?: string|null,
    authorizer_credentials?: string|null,
    authorizer_result_ttl_in_seconds?: number|null,
    authorizer_uri?: string|null,
    identity_source?: string,
    identity_validation_expression?: string|null,
    provider_arns?: string[]|null,
    type?: string
  }) {
    this.name = name;
    this.rest_api_id = rest_api_id;
    this.api_gateway_authorizer_id = api_gateway_authorizer_id;
    this.authorizer_credentials = authorizer_credentials;
    this.authorizer_result_ttl_in_seconds = authorizer_result_ttl_in_seconds;
    this.authorizer_uri = authorizer_uri;
    this.identity_source = identity_source;
    this.identity_validation_expression = identity_validation_expression;
    this.provider_arns = provider_arns;
    this.type = type;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['rest_api_id'] = this.rest_api_id;
    if (this.api_gateway_authorizer_id !== null) {
      ih['api_gateway_authorizer_id'] = this.api_gateway_authorizer_id;
    }
    if (this.authorizer_credentials !== null) {
      ih['authorizer_credentials'] = this.authorizer_credentials;
    }
    if (this.authorizer_result_ttl_in_seconds !== null) {
      ih['authorizer_result_ttl_in_seconds'] = this.authorizer_result_ttl_in_seconds;
    }
    if (this.authorizer_uri !== null) {
      ih['authorizer_uri'] = this.authorizer_uri;
    }
    if (this.identity_source !== 'method.request.header.Authorization') {
      ih['identity_source'] = this.identity_source;
    }
    if (this.identity_validation_expression !== null) {
      ih['identity_validation_expression'] = this.identity_validation_expression;
    }
    if (this.provider_arns !== null) {
      ih['provider_arns'] = this.provider_arns;
    }
    if (this.type !== 'TOKEN') {
      ih['type'] = this.type;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Api_gateway_authorizer';
  }
}

export class Api_gateway_base_path_mapping implements PcoreValue {
  readonly api_id: string;
  readonly domain_name: string;
  readonly api_gateway_base_path_mapping_id: string|null;
  readonly base_path: string|null;
  readonly stage_name: string|null;

  constructor({
    api_id,
    domain_name,
    api_gateway_base_path_mapping_id = null,
    base_path = null,
    stage_name = null
  }: {
    api_id: string,
    domain_name: string,
    api_gateway_base_path_mapping_id?: string|null,
    base_path?: string|null,
    stage_name?: string|null
  }) {
    this.api_id = api_id;
    this.domain_name = domain_name;
    this.api_gateway_base_path_mapping_id = api_gateway_base_path_mapping_id;
    this.base_path = base_path;
    this.stage_name = stage_name;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['api_id'] = this.api_id;
    ih['domain_name'] = this.domain_name;
    if (this.api_gateway_base_path_mapping_id !== null) {
      ih['api_gateway_base_path_mapping_id'] = this.api_gateway_base_path_mapping_id;
    }
    if (this.base_path !== null) {
      ih['base_path'] = this.base_path;
    }
    if (this.stage_name !== null) {
      ih['stage_name'] = this.stage_name;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Api_gateway_base_path_mapping';
  }
}

export class Api_gateway_client_certificate implements PcoreValue {
  readonly api_gateway_client_certificate_id: string|null;
  readonly created_date: string|null;
  readonly description: string|null;
  readonly expiration_date: string|null;
  readonly pem_encoded_certificate: string|null;

  constructor({
    api_gateway_client_certificate_id = null,
    created_date = null,
    description = null,
    expiration_date = null,
    pem_encoded_certificate = null
  }: {
    api_gateway_client_certificate_id?: string|null,
    created_date?: string|null,
    description?: string|null,
    expiration_date?: string|null,
    pem_encoded_certificate?: string|null
  }) {
    this.api_gateway_client_certificate_id = api_gateway_client_certificate_id;
    this.created_date = created_date;
    this.description = description;
    this.expiration_date = expiration_date;
    this.pem_encoded_certificate = pem_encoded_certificate;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.api_gateway_client_certificate_id !== null) {
      ih['api_gateway_client_certificate_id'] = this.api_gateway_client_certificate_id;
    }
    if (this.created_date !== null) {
      ih['created_date'] = this.created_date;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.expiration_date !== null) {
      ih['expiration_date'] = this.expiration_date;
    }
    if (this.pem_encoded_certificate !== null) {
      ih['pem_encoded_certificate'] = this.pem_encoded_certificate;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Api_gateway_client_certificate';
  }
}

export class Api_gateway_deployment implements PcoreValue {
  readonly rest_api_id: string;
  readonly stage_name: string;
  readonly api_gateway_deployment_id: string|null;
  readonly created_date: string|null;
  readonly description: string|null;
  readonly execution_arn: string|null;
  readonly invoke_url: string|null;
  readonly stage_description: string|null;
  readonly variables: {[s: string]: string}|null;

  constructor({
    rest_api_id,
    stage_name,
    api_gateway_deployment_id = null,
    created_date = null,
    description = null,
    execution_arn = null,
    invoke_url = null,
    stage_description = null,
    variables = null
  }: {
    rest_api_id: string,
    stage_name: string,
    api_gateway_deployment_id?: string|null,
    created_date?: string|null,
    description?: string|null,
    execution_arn?: string|null,
    invoke_url?: string|null,
    stage_description?: string|null,
    variables?: {[s: string]: string}|null
  }) {
    this.rest_api_id = rest_api_id;
    this.stage_name = stage_name;
    this.api_gateway_deployment_id = api_gateway_deployment_id;
    this.created_date = created_date;
    this.description = description;
    this.execution_arn = execution_arn;
    this.invoke_url = invoke_url;
    this.stage_description = stage_description;
    this.variables = variables;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['rest_api_id'] = this.rest_api_id;
    ih['stage_name'] = this.stage_name;
    if (this.api_gateway_deployment_id !== null) {
      ih['api_gateway_deployment_id'] = this.api_gateway_deployment_id;
    }
    if (this.created_date !== null) {
      ih['created_date'] = this.created_date;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.execution_arn !== null) {
      ih['execution_arn'] = this.execution_arn;
    }
    if (this.invoke_url !== null) {
      ih['invoke_url'] = this.invoke_url;
    }
    if (this.stage_description !== null) {
      ih['stage_description'] = this.stage_description;
    }
    if (this.variables !== null) {
      ih['variables'] = this.variables;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Api_gateway_deployment';
  }
}

export class Api_gateway_documentation_part implements PcoreValue {
  readonly properties: string;
  readonly rest_api_id: string;
  readonly api_gateway_documentation_part_id: string|null;
  readonly location: Anon20|null;

  constructor({
    properties,
    rest_api_id,
    api_gateway_documentation_part_id = null,
    location = null
  }: {
    properties: string,
    rest_api_id: string,
    api_gateway_documentation_part_id?: string|null,
    location?: Anon20|null
  }) {
    this.properties = properties;
    this.rest_api_id = rest_api_id;
    this.api_gateway_documentation_part_id = api_gateway_documentation_part_id;
    this.location = location;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['properties'] = this.properties;
    ih['rest_api_id'] = this.rest_api_id;
    if (this.api_gateway_documentation_part_id !== null) {
      ih['api_gateway_documentation_part_id'] = this.api_gateway_documentation_part_id;
    }
    if (this.location !== null) {
      ih['location'] = this.location;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Api_gateway_documentation_part';
  }
}

export class Api_gateway_documentation_version implements PcoreValue {
  readonly rest_api_id: string;
  readonly version: string;
  readonly api_gateway_documentation_version_id: string|null;
  readonly description: string|null;

  constructor({
    rest_api_id,
    version,
    api_gateway_documentation_version_id = null,
    description = null
  }: {
    rest_api_id: string,
    version: string,
    api_gateway_documentation_version_id?: string|null,
    description?: string|null
  }) {
    this.rest_api_id = rest_api_id;
    this.version = version;
    this.api_gateway_documentation_version_id = api_gateway_documentation_version_id;
    this.description = description;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['rest_api_id'] = this.rest_api_id;
    ih['version'] = this.version;
    if (this.api_gateway_documentation_version_id !== null) {
      ih['api_gateway_documentation_version_id'] = this.api_gateway_documentation_version_id;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Api_gateway_documentation_version';
  }
}

export class Api_gateway_domain_name implements PcoreValue {
  readonly domain_name: string;
  readonly api_gateway_domain_name_id: string|null;
  readonly certificate_arn: string|null;
  readonly certificate_body: string|null;
  readonly certificate_chain: string|null;
  readonly certificate_name: string|null;
  readonly certificate_private_key: string|null;
  readonly certificate_upload_date: string|null;
  readonly cloudfront_domain_name: string|null;
  readonly cloudfront_zone_id: string|null;
  readonly endpoint_configuration: Anon21|null;
  readonly regional_certificate_arn: string|null;
  readonly regional_certificate_name: string|null;
  readonly regional_domain_name: string|null;
  readonly regional_zone_id: string|null;

  constructor({
    domain_name,
    api_gateway_domain_name_id = null,
    certificate_arn = null,
    certificate_body = null,
    certificate_chain = null,
    certificate_name = null,
    certificate_private_key = null,
    certificate_upload_date = null,
    cloudfront_domain_name = null,
    cloudfront_zone_id = null,
    endpoint_configuration = null,
    regional_certificate_arn = null,
    regional_certificate_name = null,
    regional_domain_name = null,
    regional_zone_id = null
  }: {
    domain_name: string,
    api_gateway_domain_name_id?: string|null,
    certificate_arn?: string|null,
    certificate_body?: string|null,
    certificate_chain?: string|null,
    certificate_name?: string|null,
    certificate_private_key?: string|null,
    certificate_upload_date?: string|null,
    cloudfront_domain_name?: string|null,
    cloudfront_zone_id?: string|null,
    endpoint_configuration?: Anon21|null,
    regional_certificate_arn?: string|null,
    regional_certificate_name?: string|null,
    regional_domain_name?: string|null,
    regional_zone_id?: string|null
  }) {
    this.domain_name = domain_name;
    this.api_gateway_domain_name_id = api_gateway_domain_name_id;
    this.certificate_arn = certificate_arn;
    this.certificate_body = certificate_body;
    this.certificate_chain = certificate_chain;
    this.certificate_name = certificate_name;
    this.certificate_private_key = certificate_private_key;
    this.certificate_upload_date = certificate_upload_date;
    this.cloudfront_domain_name = cloudfront_domain_name;
    this.cloudfront_zone_id = cloudfront_zone_id;
    this.endpoint_configuration = endpoint_configuration;
    this.regional_certificate_arn = regional_certificate_arn;
    this.regional_certificate_name = regional_certificate_name;
    this.regional_domain_name = regional_domain_name;
    this.regional_zone_id = regional_zone_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['domain_name'] = this.domain_name;
    if (this.api_gateway_domain_name_id !== null) {
      ih['api_gateway_domain_name_id'] = this.api_gateway_domain_name_id;
    }
    if (this.certificate_arn !== null) {
      ih['certificate_arn'] = this.certificate_arn;
    }
    if (this.certificate_body !== null) {
      ih['certificate_body'] = this.certificate_body;
    }
    if (this.certificate_chain !== null) {
      ih['certificate_chain'] = this.certificate_chain;
    }
    if (this.certificate_name !== null) {
      ih['certificate_name'] = this.certificate_name;
    }
    if (this.certificate_private_key !== null) {
      ih['certificate_private_key'] = this.certificate_private_key;
    }
    if (this.certificate_upload_date !== null) {
      ih['certificate_upload_date'] = this.certificate_upload_date;
    }
    if (this.cloudfront_domain_name !== null) {
      ih['cloudfront_domain_name'] = this.cloudfront_domain_name;
    }
    if (this.cloudfront_zone_id !== null) {
      ih['cloudfront_zone_id'] = this.cloudfront_zone_id;
    }
    if (this.endpoint_configuration !== null) {
      ih['endpoint_configuration'] = this.endpoint_configuration;
    }
    if (this.regional_certificate_arn !== null) {
      ih['regional_certificate_arn'] = this.regional_certificate_arn;
    }
    if (this.regional_certificate_name !== null) {
      ih['regional_certificate_name'] = this.regional_certificate_name;
    }
    if (this.regional_domain_name !== null) {
      ih['regional_domain_name'] = this.regional_domain_name;
    }
    if (this.regional_zone_id !== null) {
      ih['regional_zone_id'] = this.regional_zone_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Api_gateway_domain_name';
  }
}

export class Api_gateway_gateway_response implements PcoreValue {
  readonly response_type: string;
  readonly rest_api_id: string;
  readonly api_gateway_gateway_response_id: string|null;
  readonly response_parameters: {[s: string]: string}|null;
  readonly response_templates: {[s: string]: string}|null;
  readonly status_code: string|null;

  constructor({
    response_type,
    rest_api_id,
    api_gateway_gateway_response_id = null,
    response_parameters = null,
    response_templates = null,
    status_code = null
  }: {
    response_type: string,
    rest_api_id: string,
    api_gateway_gateway_response_id?: string|null,
    response_parameters?: {[s: string]: string}|null,
    response_templates?: {[s: string]: string}|null,
    status_code?: string|null
  }) {
    this.response_type = response_type;
    this.rest_api_id = rest_api_id;
    this.api_gateway_gateway_response_id = api_gateway_gateway_response_id;
    this.response_parameters = response_parameters;
    this.response_templates = response_templates;
    this.status_code = status_code;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['response_type'] = this.response_type;
    ih['rest_api_id'] = this.rest_api_id;
    if (this.api_gateway_gateway_response_id !== null) {
      ih['api_gateway_gateway_response_id'] = this.api_gateway_gateway_response_id;
    }
    if (this.response_parameters !== null) {
      ih['response_parameters'] = this.response_parameters;
    }
    if (this.response_templates !== null) {
      ih['response_templates'] = this.response_templates;
    }
    if (this.status_code !== null) {
      ih['status_code'] = this.status_code;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Api_gateway_gateway_response';
  }
}

export class Api_gateway_integration implements PcoreValue {
  readonly http_method: string;
  readonly resource_id: string;
  readonly rest_api_id: string;
  readonly type: string;
  readonly api_gateway_integration_id: string|null;
  readonly cache_key_parameters: string[]|null;
  readonly cache_namespace: string|null;
  readonly connection_id: string|null;
  readonly connection_type: string;
  readonly content_handling: string|null;
  readonly credentials: string|null;
  readonly integration_http_method: string|null;
  readonly passthrough_behavior: string|null;
  readonly request_parameters: {[s: string]: string}|null;
  readonly request_templates: {[s: string]: string}|null;
  readonly timeout_milliseconds: number;
  readonly uri: string|null;

  constructor({
    http_method,
    resource_id,
    rest_api_id,
    type,
    api_gateway_integration_id = null,
    cache_key_parameters = null,
    cache_namespace = null,
    connection_id = null,
    connection_type = 'INTERNET',
    content_handling = null,
    credentials = null,
    integration_http_method = null,
    passthrough_behavior = null,
    request_parameters = null,
    request_templates = null,
    timeout_milliseconds = 29000,
    uri = null
  }: {
    http_method: string,
    resource_id: string,
    rest_api_id: string,
    type: string,
    api_gateway_integration_id?: string|null,
    cache_key_parameters?: string[]|null,
    cache_namespace?: string|null,
    connection_id?: string|null,
    connection_type?: string,
    content_handling?: string|null,
    credentials?: string|null,
    integration_http_method?: string|null,
    passthrough_behavior?: string|null,
    request_parameters?: {[s: string]: string}|null,
    request_templates?: {[s: string]: string}|null,
    timeout_milliseconds?: number,
    uri?: string|null
  }) {
    this.http_method = http_method;
    this.resource_id = resource_id;
    this.rest_api_id = rest_api_id;
    this.type = type;
    this.api_gateway_integration_id = api_gateway_integration_id;
    this.cache_key_parameters = cache_key_parameters;
    this.cache_namespace = cache_namespace;
    this.connection_id = connection_id;
    this.connection_type = connection_type;
    this.content_handling = content_handling;
    this.credentials = credentials;
    this.integration_http_method = integration_http_method;
    this.passthrough_behavior = passthrough_behavior;
    this.request_parameters = request_parameters;
    this.request_templates = request_templates;
    this.timeout_milliseconds = timeout_milliseconds;
    this.uri = uri;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['http_method'] = this.http_method;
    ih['resource_id'] = this.resource_id;
    ih['rest_api_id'] = this.rest_api_id;
    ih['type'] = this.type;
    if (this.api_gateway_integration_id !== null) {
      ih['api_gateway_integration_id'] = this.api_gateway_integration_id;
    }
    if (this.cache_key_parameters !== null) {
      ih['cache_key_parameters'] = this.cache_key_parameters;
    }
    if (this.cache_namespace !== null) {
      ih['cache_namespace'] = this.cache_namespace;
    }
    if (this.connection_id !== null) {
      ih['connection_id'] = this.connection_id;
    }
    if (this.connection_type !== 'INTERNET') {
      ih['connection_type'] = this.connection_type;
    }
    if (this.content_handling !== null) {
      ih['content_handling'] = this.content_handling;
    }
    if (this.credentials !== null) {
      ih['credentials'] = this.credentials;
    }
    if (this.integration_http_method !== null) {
      ih['integration_http_method'] = this.integration_http_method;
    }
    if (this.passthrough_behavior !== null) {
      ih['passthrough_behavior'] = this.passthrough_behavior;
    }
    if (this.request_parameters !== null) {
      ih['request_parameters'] = this.request_parameters;
    }
    if (this.request_templates !== null) {
      ih['request_templates'] = this.request_templates;
    }
    if (this.timeout_milliseconds !== 29000) {
      ih['timeout_milliseconds'] = this.timeout_milliseconds;
    }
    if (this.uri !== null) {
      ih['uri'] = this.uri;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Api_gateway_integration';
  }
}

export class Api_gateway_integration_response implements PcoreValue {
  readonly http_method: string;
  readonly resource_id: string;
  readonly rest_api_id: string;
  readonly status_code: string;
  readonly api_gateway_integration_response_id: string|null;
  readonly content_handling: string|null;
  readonly response_parameters: {[s: string]: string}|null;
  readonly response_templates: {[s: string]: string}|null;
  readonly selection_pattern: string|null;

  constructor({
    http_method,
    resource_id,
    rest_api_id,
    status_code,
    api_gateway_integration_response_id = null,
    content_handling = null,
    response_parameters = null,
    response_templates = null,
    selection_pattern = null
  }: {
    http_method: string,
    resource_id: string,
    rest_api_id: string,
    status_code: string,
    api_gateway_integration_response_id?: string|null,
    content_handling?: string|null,
    response_parameters?: {[s: string]: string}|null,
    response_templates?: {[s: string]: string}|null,
    selection_pattern?: string|null
  }) {
    this.http_method = http_method;
    this.resource_id = resource_id;
    this.rest_api_id = rest_api_id;
    this.status_code = status_code;
    this.api_gateway_integration_response_id = api_gateway_integration_response_id;
    this.content_handling = content_handling;
    this.response_parameters = response_parameters;
    this.response_templates = response_templates;
    this.selection_pattern = selection_pattern;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['http_method'] = this.http_method;
    ih['resource_id'] = this.resource_id;
    ih['rest_api_id'] = this.rest_api_id;
    ih['status_code'] = this.status_code;
    if (this.api_gateway_integration_response_id !== null) {
      ih['api_gateway_integration_response_id'] = this.api_gateway_integration_response_id;
    }
    if (this.content_handling !== null) {
      ih['content_handling'] = this.content_handling;
    }
    if (this.response_parameters !== null) {
      ih['response_parameters'] = this.response_parameters;
    }
    if (this.response_templates !== null) {
      ih['response_templates'] = this.response_templates;
    }
    if (this.selection_pattern !== null) {
      ih['selection_pattern'] = this.selection_pattern;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Api_gateway_integration_response';
  }
}

export class Api_gateway_method implements PcoreValue {
  readonly authorization: string;
  readonly http_method: string;
  readonly resource_id: string;
  readonly rest_api_id: string;
  readonly api_gateway_method_id: string|null;
  readonly api_key_required: boolean;
  readonly authorization_scopes: string[]|null;
  readonly authorizer_id: string|null;
  readonly request_models: {[s: string]: string}|null;
  readonly request_parameters: {[s: string]: boolean}|null;
  readonly request_validator_id: string|null;

  constructor({
    authorization,
    http_method,
    resource_id,
    rest_api_id,
    api_gateway_method_id = null,
    api_key_required = false,
    authorization_scopes = null,
    authorizer_id = null,
    request_models = null,
    request_parameters = null,
    request_validator_id = null
  }: {
    authorization: string,
    http_method: string,
    resource_id: string,
    rest_api_id: string,
    api_gateway_method_id?: string|null,
    api_key_required?: boolean,
    authorization_scopes?: string[]|null,
    authorizer_id?: string|null,
    request_models?: {[s: string]: string}|null,
    request_parameters?: {[s: string]: boolean}|null,
    request_validator_id?: string|null
  }) {
    this.authorization = authorization;
    this.http_method = http_method;
    this.resource_id = resource_id;
    this.rest_api_id = rest_api_id;
    this.api_gateway_method_id = api_gateway_method_id;
    this.api_key_required = api_key_required;
    this.authorization_scopes = authorization_scopes;
    this.authorizer_id = authorizer_id;
    this.request_models = request_models;
    this.request_parameters = request_parameters;
    this.request_validator_id = request_validator_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['authorization'] = this.authorization;
    ih['http_method'] = this.http_method;
    ih['resource_id'] = this.resource_id;
    ih['rest_api_id'] = this.rest_api_id;
    if (this.api_gateway_method_id !== null) {
      ih['api_gateway_method_id'] = this.api_gateway_method_id;
    }
    if (this.api_key_required !== false) {
      ih['api_key_required'] = this.api_key_required;
    }
    if (this.authorization_scopes !== null) {
      ih['authorization_scopes'] = this.authorization_scopes;
    }
    if (this.authorizer_id !== null) {
      ih['authorizer_id'] = this.authorizer_id;
    }
    if (this.request_models !== null) {
      ih['request_models'] = this.request_models;
    }
    if (this.request_parameters !== null) {
      ih['request_parameters'] = this.request_parameters;
    }
    if (this.request_validator_id !== null) {
      ih['request_validator_id'] = this.request_validator_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Api_gateway_method';
  }
}

export class Api_gateway_method_response implements PcoreValue {
  readonly http_method: string;
  readonly resource_id: string;
  readonly rest_api_id: string;
  readonly status_code: string;
  readonly api_gateway_method_response_id: string|null;
  readonly response_models: {[s: string]: string}|null;
  readonly response_parameters: {[s: string]: boolean}|null;

  constructor({
    http_method,
    resource_id,
    rest_api_id,
    status_code,
    api_gateway_method_response_id = null,
    response_models = null,
    response_parameters = null
  }: {
    http_method: string,
    resource_id: string,
    rest_api_id: string,
    status_code: string,
    api_gateway_method_response_id?: string|null,
    response_models?: {[s: string]: string}|null,
    response_parameters?: {[s: string]: boolean}|null
  }) {
    this.http_method = http_method;
    this.resource_id = resource_id;
    this.rest_api_id = rest_api_id;
    this.status_code = status_code;
    this.api_gateway_method_response_id = api_gateway_method_response_id;
    this.response_models = response_models;
    this.response_parameters = response_parameters;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['http_method'] = this.http_method;
    ih['resource_id'] = this.resource_id;
    ih['rest_api_id'] = this.rest_api_id;
    ih['status_code'] = this.status_code;
    if (this.api_gateway_method_response_id !== null) {
      ih['api_gateway_method_response_id'] = this.api_gateway_method_response_id;
    }
    if (this.response_models !== null) {
      ih['response_models'] = this.response_models;
    }
    if (this.response_parameters !== null) {
      ih['response_parameters'] = this.response_parameters;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Api_gateway_method_response';
  }
}

export class Api_gateway_method_settings implements PcoreValue {
  readonly method_path: string;
  readonly rest_api_id: string;
  readonly stage_name: string;
  readonly api_gateway_method_settings_id: string|null;
  readonly settings: Anon22|null;

  constructor({
    method_path,
    rest_api_id,
    stage_name,
    api_gateway_method_settings_id = null,
    settings = null
  }: {
    method_path: string,
    rest_api_id: string,
    stage_name: string,
    api_gateway_method_settings_id?: string|null,
    settings?: Anon22|null
  }) {
    this.method_path = method_path;
    this.rest_api_id = rest_api_id;
    this.stage_name = stage_name;
    this.api_gateway_method_settings_id = api_gateway_method_settings_id;
    this.settings = settings;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['method_path'] = this.method_path;
    ih['rest_api_id'] = this.rest_api_id;
    ih['stage_name'] = this.stage_name;
    if (this.api_gateway_method_settings_id !== null) {
      ih['api_gateway_method_settings_id'] = this.api_gateway_method_settings_id;
    }
    if (this.settings !== null) {
      ih['settings'] = this.settings;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Api_gateway_method_settings';
  }
}

export class Api_gateway_model implements PcoreValue {
  readonly content_type: string;
  readonly name: string;
  readonly rest_api_id: string;
  readonly api_gateway_model_id: string|null;
  readonly description: string|null;
  readonly schema: string|null;

  constructor({
    content_type,
    name,
    rest_api_id,
    api_gateway_model_id = null,
    description = null,
    schema = null
  }: {
    content_type: string,
    name: string,
    rest_api_id: string,
    api_gateway_model_id?: string|null,
    description?: string|null,
    schema?: string|null
  }) {
    this.content_type = content_type;
    this.name = name;
    this.rest_api_id = rest_api_id;
    this.api_gateway_model_id = api_gateway_model_id;
    this.description = description;
    this.schema = schema;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['content_type'] = this.content_type;
    ih['name'] = this.name;
    ih['rest_api_id'] = this.rest_api_id;
    if (this.api_gateway_model_id !== null) {
      ih['api_gateway_model_id'] = this.api_gateway_model_id;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.schema !== null) {
      ih['schema'] = this.schema;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Api_gateway_model';
  }
}

export class Api_gateway_request_validator implements PcoreValue {
  readonly name: string;
  readonly rest_api_id: string;
  readonly api_gateway_request_validator_id: string|null;
  readonly validate_request_body: boolean;
  readonly validate_request_parameters: boolean;

  constructor({
    name,
    rest_api_id,
    api_gateway_request_validator_id = null,
    validate_request_body = false,
    validate_request_parameters = false
  }: {
    name: string,
    rest_api_id: string,
    api_gateway_request_validator_id?: string|null,
    validate_request_body?: boolean,
    validate_request_parameters?: boolean
  }) {
    this.name = name;
    this.rest_api_id = rest_api_id;
    this.api_gateway_request_validator_id = api_gateway_request_validator_id;
    this.validate_request_body = validate_request_body;
    this.validate_request_parameters = validate_request_parameters;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['rest_api_id'] = this.rest_api_id;
    if (this.api_gateway_request_validator_id !== null) {
      ih['api_gateway_request_validator_id'] = this.api_gateway_request_validator_id;
    }
    if (this.validate_request_body !== false) {
      ih['validate_request_body'] = this.validate_request_body;
    }
    if (this.validate_request_parameters !== false) {
      ih['validate_request_parameters'] = this.validate_request_parameters;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Api_gateway_request_validator';
  }
}

export class Api_gateway_resource implements PcoreValue {
  readonly parent_id: string;
  readonly path_part: string;
  readonly rest_api_id: string;
  readonly api_gateway_resource_id: string|null;
  readonly path: string|null;

  constructor({
    parent_id,
    path_part,
    rest_api_id,
    api_gateway_resource_id = null,
    path = null
  }: {
    parent_id: string,
    path_part: string,
    rest_api_id: string,
    api_gateway_resource_id?: string|null,
    path?: string|null
  }) {
    this.parent_id = parent_id;
    this.path_part = path_part;
    this.rest_api_id = rest_api_id;
    this.api_gateway_resource_id = api_gateway_resource_id;
    this.path = path;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['parent_id'] = this.parent_id;
    ih['path_part'] = this.path_part;
    ih['rest_api_id'] = this.rest_api_id;
    if (this.api_gateway_resource_id !== null) {
      ih['api_gateway_resource_id'] = this.api_gateway_resource_id;
    }
    if (this.path !== null) {
      ih['path'] = this.path;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Api_gateway_resource';
  }
}

export class Api_gateway_rest_api implements PcoreValue {
  readonly name: string;
  readonly api_gateway_rest_api_id: string|null;
  readonly api_key_source: string;
  readonly binary_media_types: string[]|null;
  readonly body: string|null;
  readonly created_date: string|null;
  readonly description: string|null;
  readonly endpoint_configuration: Anon21|null;
  readonly execution_arn: string|null;
  readonly minimum_compression_size: number;
  readonly policy: string|null;
  readonly root_resource_id: string|null;

  constructor({
    name,
    api_gateway_rest_api_id = null,
    api_key_source = 'HEADER',
    binary_media_types = null,
    body = null,
    created_date = null,
    description = null,
    endpoint_configuration = null,
    execution_arn = null,
    minimum_compression_size = -1,
    policy = null,
    root_resource_id = null
  }: {
    name: string,
    api_gateway_rest_api_id?: string|null,
    api_key_source?: string,
    binary_media_types?: string[]|null,
    body?: string|null,
    created_date?: string|null,
    description?: string|null,
    endpoint_configuration?: Anon21|null,
    execution_arn?: string|null,
    minimum_compression_size?: number,
    policy?: string|null,
    root_resource_id?: string|null
  }) {
    this.name = name;
    this.api_gateway_rest_api_id = api_gateway_rest_api_id;
    this.api_key_source = api_key_source;
    this.binary_media_types = binary_media_types;
    this.body = body;
    this.created_date = created_date;
    this.description = description;
    this.endpoint_configuration = endpoint_configuration;
    this.execution_arn = execution_arn;
    this.minimum_compression_size = minimum_compression_size;
    this.policy = policy;
    this.root_resource_id = root_resource_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.api_gateway_rest_api_id !== null) {
      ih['api_gateway_rest_api_id'] = this.api_gateway_rest_api_id;
    }
    if (this.api_key_source !== 'HEADER') {
      ih['api_key_source'] = this.api_key_source;
    }
    if (this.binary_media_types !== null) {
      ih['binary_media_types'] = this.binary_media_types;
    }
    if (this.body !== null) {
      ih['body'] = this.body;
    }
    if (this.created_date !== null) {
      ih['created_date'] = this.created_date;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.endpoint_configuration !== null) {
      ih['endpoint_configuration'] = this.endpoint_configuration;
    }
    if (this.execution_arn !== null) {
      ih['execution_arn'] = this.execution_arn;
    }
    if (this.minimum_compression_size !== -1) {
      ih['minimum_compression_size'] = this.minimum_compression_size;
    }
    if (this.policy !== null) {
      ih['policy'] = this.policy;
    }
    if (this.root_resource_id !== null) {
      ih['root_resource_id'] = this.root_resource_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Api_gateway_rest_api';
  }
}

export class Api_gateway_stage implements PcoreValue {
  readonly deployment_id: string;
  readonly rest_api_id: string;
  readonly stage_name: string;
  readonly api_gateway_stage_id: string|null;
  readonly access_log_settings: Anon23|null;
  readonly cache_cluster_enabled: boolean|null;
  readonly cache_cluster_size: string|null;
  readonly client_certificate_id: string|null;
  readonly description: string|null;
  readonly documentation_version: string|null;
  readonly execution_arn: string|null;
  readonly invoke_url: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly variables: {[s: string]: string}|null;
  readonly xray_tracing_enabled: boolean|null;

  constructor({
    deployment_id,
    rest_api_id,
    stage_name,
    api_gateway_stage_id = null,
    access_log_settings = null,
    cache_cluster_enabled = null,
    cache_cluster_size = null,
    client_certificate_id = null,
    description = null,
    documentation_version = null,
    execution_arn = null,
    invoke_url = null,
    tags = null,
    variables = null,
    xray_tracing_enabled = null
  }: {
    deployment_id: string,
    rest_api_id: string,
    stage_name: string,
    api_gateway_stage_id?: string|null,
    access_log_settings?: Anon23|null,
    cache_cluster_enabled?: boolean|null,
    cache_cluster_size?: string|null,
    client_certificate_id?: string|null,
    description?: string|null,
    documentation_version?: string|null,
    execution_arn?: string|null,
    invoke_url?: string|null,
    tags?: {[s: string]: string}|null,
    variables?: {[s: string]: string}|null,
    xray_tracing_enabled?: boolean|null
  }) {
    this.deployment_id = deployment_id;
    this.rest_api_id = rest_api_id;
    this.stage_name = stage_name;
    this.api_gateway_stage_id = api_gateway_stage_id;
    this.access_log_settings = access_log_settings;
    this.cache_cluster_enabled = cache_cluster_enabled;
    this.cache_cluster_size = cache_cluster_size;
    this.client_certificate_id = client_certificate_id;
    this.description = description;
    this.documentation_version = documentation_version;
    this.execution_arn = execution_arn;
    this.invoke_url = invoke_url;
    this.tags = tags;
    this.variables = variables;
    this.xray_tracing_enabled = xray_tracing_enabled;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['deployment_id'] = this.deployment_id;
    ih['rest_api_id'] = this.rest_api_id;
    ih['stage_name'] = this.stage_name;
    if (this.api_gateway_stage_id !== null) {
      ih['api_gateway_stage_id'] = this.api_gateway_stage_id;
    }
    if (this.access_log_settings !== null) {
      ih['access_log_settings'] = this.access_log_settings;
    }
    if (this.cache_cluster_enabled !== null) {
      ih['cache_cluster_enabled'] = this.cache_cluster_enabled;
    }
    if (this.cache_cluster_size !== null) {
      ih['cache_cluster_size'] = this.cache_cluster_size;
    }
    if (this.client_certificate_id !== null) {
      ih['client_certificate_id'] = this.client_certificate_id;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.documentation_version !== null) {
      ih['documentation_version'] = this.documentation_version;
    }
    if (this.execution_arn !== null) {
      ih['execution_arn'] = this.execution_arn;
    }
    if (this.invoke_url !== null) {
      ih['invoke_url'] = this.invoke_url;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.variables !== null) {
      ih['variables'] = this.variables;
    }
    if (this.xray_tracing_enabled !== null) {
      ih['xray_tracing_enabled'] = this.xray_tracing_enabled;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Api_gateway_stage';
  }
}

export class Api_gateway_usage_plan implements PcoreValue {
  readonly name: string;
  readonly api_gateway_usage_plan_id: string|null;
  readonly api_stages: Anon24[]|null;
  readonly description: string|null;
  readonly product_code: string|null;
  readonly quota_settings: Anon25|null;
  readonly throttle_settings: Anon26|null;

  constructor({
    name,
    api_gateway_usage_plan_id = null,
    api_stages = null,
    description = null,
    product_code = null,
    quota_settings = null,
    throttle_settings = null
  }: {
    name: string,
    api_gateway_usage_plan_id?: string|null,
    api_stages?: Anon24[]|null,
    description?: string|null,
    product_code?: string|null,
    quota_settings?: Anon25|null,
    throttle_settings?: Anon26|null
  }) {
    this.name = name;
    this.api_gateway_usage_plan_id = api_gateway_usage_plan_id;
    this.api_stages = api_stages;
    this.description = description;
    this.product_code = product_code;
    this.quota_settings = quota_settings;
    this.throttle_settings = throttle_settings;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.api_gateway_usage_plan_id !== null) {
      ih['api_gateway_usage_plan_id'] = this.api_gateway_usage_plan_id;
    }
    if (this.api_stages !== null) {
      ih['api_stages'] = this.api_stages;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.product_code !== null) {
      ih['product_code'] = this.product_code;
    }
    if (this.quota_settings !== null) {
      ih['quota_settings'] = this.quota_settings;
    }
    if (this.throttle_settings !== null) {
      ih['throttle_settings'] = this.throttle_settings;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Api_gateway_usage_plan';
  }
}

export class Api_gateway_usage_plan_key implements PcoreValue {
  readonly key_id: string;
  readonly key_type: string;
  readonly usage_plan_id: string;
  readonly api_gateway_usage_plan_key_id: string|null;
  readonly name: string|null;
  readonly value: string|null;

  constructor({
    key_id,
    key_type,
    usage_plan_id,
    api_gateway_usage_plan_key_id = null,
    name = null,
    value = null
  }: {
    key_id: string,
    key_type: string,
    usage_plan_id: string,
    api_gateway_usage_plan_key_id?: string|null,
    name?: string|null,
    value?: string|null
  }) {
    this.key_id = key_id;
    this.key_type = key_type;
    this.usage_plan_id = usage_plan_id;
    this.api_gateway_usage_plan_key_id = api_gateway_usage_plan_key_id;
    this.name = name;
    this.value = value;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['key_id'] = this.key_id;
    ih['key_type'] = this.key_type;
    ih['usage_plan_id'] = this.usage_plan_id;
    if (this.api_gateway_usage_plan_key_id !== null) {
      ih['api_gateway_usage_plan_key_id'] = this.api_gateway_usage_plan_key_id;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.value !== null) {
      ih['value'] = this.value;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Api_gateway_usage_plan_key';
  }
}

export class Api_gateway_vpc_link implements PcoreValue {
  readonly name: string;
  readonly target_arns: string[];
  readonly api_gateway_vpc_link_id: string|null;
  readonly description: string|null;

  constructor({
    name,
    target_arns,
    api_gateway_vpc_link_id = null,
    description = null
  }: {
    name: string,
    target_arns: string[],
    api_gateway_vpc_link_id?: string|null,
    description?: string|null
  }) {
    this.name = name;
    this.target_arns = target_arns;
    this.api_gateway_vpc_link_id = api_gateway_vpc_link_id;
    this.description = description;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['target_arns'] = this.target_arns;
    if (this.api_gateway_vpc_link_id !== null) {
      ih['api_gateway_vpc_link_id'] = this.api_gateway_vpc_link_id;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Api_gateway_vpc_link';
  }
}

export class App_cookie_stickiness_policy implements PcoreValue {
  readonly cookie_name: string;
  readonly lb_port: number;
  readonly load_balancer: string;
  readonly name: string;
  readonly app_cookie_stickiness_policy_id: string|null;

  constructor({
    cookie_name,
    lb_port,
    load_balancer,
    name,
    app_cookie_stickiness_policy_id = null
  }: {
    cookie_name: string,
    lb_port: number,
    load_balancer: string,
    name: string,
    app_cookie_stickiness_policy_id?: string|null
  }) {
    this.cookie_name = cookie_name;
    this.lb_port = lb_port;
    this.load_balancer = load_balancer;
    this.name = name;
    this.app_cookie_stickiness_policy_id = app_cookie_stickiness_policy_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['cookie_name'] = this.cookie_name;
    ih['lb_port'] = this.lb_port;
    ih['load_balancer'] = this.load_balancer;
    ih['name'] = this.name;
    if (this.app_cookie_stickiness_policy_id !== null) {
      ih['app_cookie_stickiness_policy_id'] = this.app_cookie_stickiness_policy_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::App_cookie_stickiness_policy';
  }
}

export class Appautoscaling_policy implements PcoreValue {
  readonly name: string;
  readonly resource_id: string;
  readonly scalable_dimension: string;
  readonly service_namespace: string;
  readonly appautoscaling_policy_id: string|null;
  readonly alarms: string[]|null;
  readonly arn: string|null;
  readonly policy_type: string;
  readonly step_scaling_policy_configuration: Anon28[]|null;
  readonly target_tracking_scaling_policy_configuration: Anon32|null;

  constructor({
    name,
    resource_id,
    scalable_dimension,
    service_namespace,
    appautoscaling_policy_id = null,
    alarms = null,
    arn = null,
    policy_type = 'StepScaling',
    step_scaling_policy_configuration = null,
    target_tracking_scaling_policy_configuration = null
  }: {
    name: string,
    resource_id: string,
    scalable_dimension: string,
    service_namespace: string,
    appautoscaling_policy_id?: string|null,
    alarms?: string[]|null,
    arn?: string|null,
    policy_type?: string,
    step_scaling_policy_configuration?: Anon28[]|null,
    target_tracking_scaling_policy_configuration?: Anon32|null
  }) {
    this.name = name;
    this.resource_id = resource_id;
    this.scalable_dimension = scalable_dimension;
    this.service_namespace = service_namespace;
    this.appautoscaling_policy_id = appautoscaling_policy_id;
    this.alarms = alarms;
    this.arn = arn;
    this.policy_type = policy_type;
    this.step_scaling_policy_configuration = step_scaling_policy_configuration;
    this.target_tracking_scaling_policy_configuration = target_tracking_scaling_policy_configuration;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['resource_id'] = this.resource_id;
    ih['scalable_dimension'] = this.scalable_dimension;
    ih['service_namespace'] = this.service_namespace;
    if (this.appautoscaling_policy_id !== null) {
      ih['appautoscaling_policy_id'] = this.appautoscaling_policy_id;
    }
    if (this.alarms !== null) {
      ih['alarms'] = this.alarms;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.policy_type !== 'StepScaling') {
      ih['policy_type'] = this.policy_type;
    }
    if (this.step_scaling_policy_configuration !== null) {
      ih['step_scaling_policy_configuration'] = this.step_scaling_policy_configuration;
    }
    if (this.target_tracking_scaling_policy_configuration !== null) {
      ih['target_tracking_scaling_policy_configuration'] = this.target_tracking_scaling_policy_configuration;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Appautoscaling_policy';
  }
}

export class Appautoscaling_scheduled_action implements PcoreValue {
  readonly name: string;
  readonly resource_id: string;
  readonly service_namespace: string;
  readonly appautoscaling_scheduled_action_id: string|null;
  readonly arn: string|null;
  readonly end_time: string|null;
  readonly scalable_dimension: string|null;
  readonly scalable_target_action: Anon33|null;
  readonly schedule: string|null;
  readonly start_time: string|null;

  constructor({
    name,
    resource_id,
    service_namespace,
    appautoscaling_scheduled_action_id = null,
    arn = null,
    end_time = null,
    scalable_dimension = null,
    scalable_target_action = null,
    schedule = null,
    start_time = null
  }: {
    name: string,
    resource_id: string,
    service_namespace: string,
    appautoscaling_scheduled_action_id?: string|null,
    arn?: string|null,
    end_time?: string|null,
    scalable_dimension?: string|null,
    scalable_target_action?: Anon33|null,
    schedule?: string|null,
    start_time?: string|null
  }) {
    this.name = name;
    this.resource_id = resource_id;
    this.service_namespace = service_namespace;
    this.appautoscaling_scheduled_action_id = appautoscaling_scheduled_action_id;
    this.arn = arn;
    this.end_time = end_time;
    this.scalable_dimension = scalable_dimension;
    this.scalable_target_action = scalable_target_action;
    this.schedule = schedule;
    this.start_time = start_time;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['resource_id'] = this.resource_id;
    ih['service_namespace'] = this.service_namespace;
    if (this.appautoscaling_scheduled_action_id !== null) {
      ih['appautoscaling_scheduled_action_id'] = this.appautoscaling_scheduled_action_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.end_time !== null) {
      ih['end_time'] = this.end_time;
    }
    if (this.scalable_dimension !== null) {
      ih['scalable_dimension'] = this.scalable_dimension;
    }
    if (this.scalable_target_action !== null) {
      ih['scalable_target_action'] = this.scalable_target_action;
    }
    if (this.schedule !== null) {
      ih['schedule'] = this.schedule;
    }
    if (this.start_time !== null) {
      ih['start_time'] = this.start_time;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Appautoscaling_scheduled_action';
  }
}

export class Appautoscaling_target implements PcoreValue {
  readonly max_capacity: number;
  readonly min_capacity: number;
  readonly resource_id: string;
  readonly scalable_dimension: string;
  readonly service_namespace: string;
  readonly appautoscaling_target_id: string|null;
  readonly role_arn: string|null;

  constructor({
    max_capacity,
    min_capacity,
    resource_id,
    scalable_dimension,
    service_namespace,
    appautoscaling_target_id = null,
    role_arn = null
  }: {
    max_capacity: number,
    min_capacity: number,
    resource_id: string,
    scalable_dimension: string,
    service_namespace: string,
    appautoscaling_target_id?: string|null,
    role_arn?: string|null
  }) {
    this.max_capacity = max_capacity;
    this.min_capacity = min_capacity;
    this.resource_id = resource_id;
    this.scalable_dimension = scalable_dimension;
    this.service_namespace = service_namespace;
    this.appautoscaling_target_id = appautoscaling_target_id;
    this.role_arn = role_arn;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['max_capacity'] = this.max_capacity;
    ih['min_capacity'] = this.min_capacity;
    ih['resource_id'] = this.resource_id;
    ih['scalable_dimension'] = this.scalable_dimension;
    ih['service_namespace'] = this.service_namespace;
    if (this.appautoscaling_target_id !== null) {
      ih['appautoscaling_target_id'] = this.appautoscaling_target_id;
    }
    if (this.role_arn !== null) {
      ih['role_arn'] = this.role_arn;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Appautoscaling_target';
  }
}

export class Appmesh_mesh implements PcoreValue {
  readonly name: string;
  readonly appmesh_mesh_id: string|null;
  readonly arn: string|null;
  readonly created_date: string|null;
  readonly last_updated_date: string|null;

  constructor({
    name,
    appmesh_mesh_id = null,
    arn = null,
    created_date = null,
    last_updated_date = null
  }: {
    name: string,
    appmesh_mesh_id?: string|null,
    arn?: string|null,
    created_date?: string|null,
    last_updated_date?: string|null
  }) {
    this.name = name;
    this.appmesh_mesh_id = appmesh_mesh_id;
    this.arn = arn;
    this.created_date = created_date;
    this.last_updated_date = last_updated_date;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.appmesh_mesh_id !== null) {
      ih['appmesh_mesh_id'] = this.appmesh_mesh_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.created_date !== null) {
      ih['created_date'] = this.created_date;
    }
    if (this.last_updated_date !== null) {
      ih['last_updated_date'] = this.last_updated_date;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Appmesh_mesh';
  }
}

export class Appmesh_route implements PcoreValue {
  readonly mesh_name: string;
  readonly name: string;
  readonly spec: Anon38;
  readonly virtual_router_name: string;
  readonly appmesh_route_id: string|null;
  readonly arn: string|null;
  readonly created_date: string|null;
  readonly last_updated_date: string|null;

  constructor({
    mesh_name,
    name,
    spec,
    virtual_router_name,
    appmesh_route_id = null,
    arn = null,
    created_date = null,
    last_updated_date = null
  }: {
    mesh_name: string,
    name: string,
    spec: Anon38,
    virtual_router_name: string,
    appmesh_route_id?: string|null,
    arn?: string|null,
    created_date?: string|null,
    last_updated_date?: string|null
  }) {
    this.mesh_name = mesh_name;
    this.name = name;
    this.spec = spec;
    this.virtual_router_name = virtual_router_name;
    this.appmesh_route_id = appmesh_route_id;
    this.arn = arn;
    this.created_date = created_date;
    this.last_updated_date = last_updated_date;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['mesh_name'] = this.mesh_name;
    ih['name'] = this.name;
    ih['spec'] = this.spec;
    ih['virtual_router_name'] = this.virtual_router_name;
    if (this.appmesh_route_id !== null) {
      ih['appmesh_route_id'] = this.appmesh_route_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.created_date !== null) {
      ih['created_date'] = this.created_date;
    }
    if (this.last_updated_date !== null) {
      ih['last_updated_date'] = this.last_updated_date;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Appmesh_route';
  }
}

export class Appmesh_virtual_node implements PcoreValue {
  readonly mesh_name: string;
  readonly name: string;
  readonly spec: Anon43;
  readonly appmesh_virtual_node_id: string|null;
  readonly arn: string|null;
  readonly created_date: string|null;
  readonly last_updated_date: string|null;

  constructor({
    mesh_name,
    name,
    spec,
    appmesh_virtual_node_id = null,
    arn = null,
    created_date = null,
    last_updated_date = null
  }: {
    mesh_name: string,
    name: string,
    spec: Anon43,
    appmesh_virtual_node_id?: string|null,
    arn?: string|null,
    created_date?: string|null,
    last_updated_date?: string|null
  }) {
    this.mesh_name = mesh_name;
    this.name = name;
    this.spec = spec;
    this.appmesh_virtual_node_id = appmesh_virtual_node_id;
    this.arn = arn;
    this.created_date = created_date;
    this.last_updated_date = last_updated_date;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['mesh_name'] = this.mesh_name;
    ih['name'] = this.name;
    ih['spec'] = this.spec;
    if (this.appmesh_virtual_node_id !== null) {
      ih['appmesh_virtual_node_id'] = this.appmesh_virtual_node_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.created_date !== null) {
      ih['created_date'] = this.created_date;
    }
    if (this.last_updated_date !== null) {
      ih['last_updated_date'] = this.last_updated_date;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Appmesh_virtual_node';
  }
}

export class Appmesh_virtual_router implements PcoreValue {
  readonly mesh_name: string;
  readonly name: string;
  readonly spec: Anon44;
  readonly appmesh_virtual_router_id: string|null;
  readonly arn: string|null;
  readonly created_date: string|null;
  readonly last_updated_date: string|null;

  constructor({
    mesh_name,
    name,
    spec,
    appmesh_virtual_router_id = null,
    arn = null,
    created_date = null,
    last_updated_date = null
  }: {
    mesh_name: string,
    name: string,
    spec: Anon44,
    appmesh_virtual_router_id?: string|null,
    arn?: string|null,
    created_date?: string|null,
    last_updated_date?: string|null
  }) {
    this.mesh_name = mesh_name;
    this.name = name;
    this.spec = spec;
    this.appmesh_virtual_router_id = appmesh_virtual_router_id;
    this.arn = arn;
    this.created_date = created_date;
    this.last_updated_date = last_updated_date;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['mesh_name'] = this.mesh_name;
    ih['name'] = this.name;
    ih['spec'] = this.spec;
    if (this.appmesh_virtual_router_id !== null) {
      ih['appmesh_virtual_router_id'] = this.appmesh_virtual_router_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.created_date !== null) {
      ih['created_date'] = this.created_date;
    }
    if (this.last_updated_date !== null) {
      ih['last_updated_date'] = this.last_updated_date;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Appmesh_virtual_router';
  }
}

export class Appsync_api_key implements PcoreValue {
  readonly api_id: string;
  readonly appsync_api_key_id: string|null;
  readonly description: string;
  readonly expires: |null;
  readonly key: string|null;

  constructor({
    api_id,
    appsync_api_key_id = null,
    description = 'Managed by Terraform',
    expires = null,
    key = null
  }: {
    api_id: string,
    appsync_api_key_id?: string|null,
    description?: string,
    expires?: |null,
    key?: string|null
  }) {
    this.api_id = api_id;
    this.appsync_api_key_id = appsync_api_key_id;
    this.description = description;
    this.expires = expires;
    this.key = key;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['api_id'] = this.api_id;
    if (this.appsync_api_key_id !== null) {
      ih['appsync_api_key_id'] = this.appsync_api_key_id;
    }
    if (this.description !== 'Managed by Terraform') {
      ih['description'] = this.description;
    }
    if (this.expires !== null) {
      ih['expires'] = this.expires;
    }
    if (this.key !== null) {
      ih['key'] = this.key;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Appsync_api_key';
  }
}

export class Appsync_datasource implements PcoreValue {
  readonly api_id: string;
  readonly name: string;
  readonly type: string;
  readonly appsync_datasource_id: string|null;
  readonly arn: string|null;
  readonly description: string|null;
  readonly dynamodb_config: Anon45|null;
  readonly elasticsearch_config: Anon46|null;
  readonly http_config: Anon47|null;
  readonly lambda_config: Anon48|null;
  readonly service_role_arn: string|null;

  constructor({
    api_id,
    name,
    type,
    appsync_datasource_id = null,
    arn = null,
    description = null,
    dynamodb_config = null,
    elasticsearch_config = null,
    http_config = null,
    lambda_config = null,
    service_role_arn = null
  }: {
    api_id: string,
    name: string,
    type: string,
    appsync_datasource_id?: string|null,
    arn?: string|null,
    description?: string|null,
    dynamodb_config?: Anon45|null,
    elasticsearch_config?: Anon46|null,
    http_config?: Anon47|null,
    lambda_config?: Anon48|null,
    service_role_arn?: string|null
  }) {
    this.api_id = api_id;
    this.name = name;
    this.type = type;
    this.appsync_datasource_id = appsync_datasource_id;
    this.arn = arn;
    this.description = description;
    this.dynamodb_config = dynamodb_config;
    this.elasticsearch_config = elasticsearch_config;
    this.http_config = http_config;
    this.lambda_config = lambda_config;
    this.service_role_arn = service_role_arn;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['api_id'] = this.api_id;
    ih['name'] = this.name;
    ih['type'] = this.type;
    if (this.appsync_datasource_id !== null) {
      ih['appsync_datasource_id'] = this.appsync_datasource_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.dynamodb_config !== null) {
      ih['dynamodb_config'] = this.dynamodb_config;
    }
    if (this.elasticsearch_config !== null) {
      ih['elasticsearch_config'] = this.elasticsearch_config;
    }
    if (this.http_config !== null) {
      ih['http_config'] = this.http_config;
    }
    if (this.lambda_config !== null) {
      ih['lambda_config'] = this.lambda_config;
    }
    if (this.service_role_arn !== null) {
      ih['service_role_arn'] = this.service_role_arn;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Appsync_datasource';
  }
}

export class Appsync_graphql_api implements PcoreValue {
  readonly authentication_type: string;
  readonly name: string;
  readonly appsync_graphql_api_id: string|null;
  readonly arn: string|null;
  readonly log_config: Anon49|null;
  readonly openid_connect_config: Anon50|null;
  readonly uris: {[s: string]: string}|null;
  readonly user_pool_config: Anon51|null;

  constructor({
    authentication_type,
    name,
    appsync_graphql_api_id = null,
    arn = null,
    log_config = null,
    openid_connect_config = null,
    uris = null,
    user_pool_config = null
  }: {
    authentication_type: string,
    name: string,
    appsync_graphql_api_id?: string|null,
    arn?: string|null,
    log_config?: Anon49|null,
    openid_connect_config?: Anon50|null,
    uris?: {[s: string]: string}|null,
    user_pool_config?: Anon51|null
  }) {
    this.authentication_type = authentication_type;
    this.name = name;
    this.appsync_graphql_api_id = appsync_graphql_api_id;
    this.arn = arn;
    this.log_config = log_config;
    this.openid_connect_config = openid_connect_config;
    this.uris = uris;
    this.user_pool_config = user_pool_config;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['authentication_type'] = this.authentication_type;
    ih['name'] = this.name;
    if (this.appsync_graphql_api_id !== null) {
      ih['appsync_graphql_api_id'] = this.appsync_graphql_api_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.log_config !== null) {
      ih['log_config'] = this.log_config;
    }
    if (this.openid_connect_config !== null) {
      ih['openid_connect_config'] = this.openid_connect_config;
    }
    if (this.uris !== null) {
      ih['uris'] = this.uris;
    }
    if (this.user_pool_config !== null) {
      ih['user_pool_config'] = this.user_pool_config;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Appsync_graphql_api';
  }
}

export class Athena_database implements PcoreValue {
  readonly bucket: string;
  readonly name: string;
  readonly athena_database_id: string|null;
  readonly encryption_configuration: Anon52|null;
  readonly force_destroy: boolean;

  constructor({
    bucket,
    name,
    athena_database_id = null,
    encryption_configuration = null,
    force_destroy = false
  }: {
    bucket: string,
    name: string,
    athena_database_id?: string|null,
    encryption_configuration?: Anon52|null,
    force_destroy?: boolean
  }) {
    this.bucket = bucket;
    this.name = name;
    this.athena_database_id = athena_database_id;
    this.encryption_configuration = encryption_configuration;
    this.force_destroy = force_destroy;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['bucket'] = this.bucket;
    ih['name'] = this.name;
    if (this.athena_database_id !== null) {
      ih['athena_database_id'] = this.athena_database_id;
    }
    if (this.encryption_configuration !== null) {
      ih['encryption_configuration'] = this.encryption_configuration;
    }
    if (this.force_destroy !== false) {
      ih['force_destroy'] = this.force_destroy;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Athena_database';
  }
}

export class Athena_named_query implements PcoreValue {
  readonly database: string;
  readonly name: string;
  readonly query: string;
  readonly athena_named_query_id: string|null;
  readonly description: string|null;

  constructor({
    database,
    name,
    query,
    athena_named_query_id = null,
    description = null
  }: {
    database: string,
    name: string,
    query: string,
    athena_named_query_id?: string|null,
    description?: string|null
  }) {
    this.database = database;
    this.name = name;
    this.query = query;
    this.athena_named_query_id = athena_named_query_id;
    this.description = description;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['database'] = this.database;
    ih['name'] = this.name;
    ih['query'] = this.query;
    if (this.athena_named_query_id !== null) {
      ih['athena_named_query_id'] = this.athena_named_query_id;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Athena_named_query';
  }
}

export class Autoscaling_attachment implements PcoreValue {
  readonly autoscaling_group_name: string;
  readonly autoscaling_attachment_id: string|null;
  readonly alb_target_group_arn: string|null;
  readonly elb: string|null;

  constructor({
    autoscaling_group_name,
    autoscaling_attachment_id = null,
    alb_target_group_arn = null,
    elb = null
  }: {
    autoscaling_group_name: string,
    autoscaling_attachment_id?: string|null,
    alb_target_group_arn?: string|null,
    elb?: string|null
  }) {
    this.autoscaling_group_name = autoscaling_group_name;
    this.autoscaling_attachment_id = autoscaling_attachment_id;
    this.alb_target_group_arn = alb_target_group_arn;
    this.elb = elb;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['autoscaling_group_name'] = this.autoscaling_group_name;
    if (this.autoscaling_attachment_id !== null) {
      ih['autoscaling_attachment_id'] = this.autoscaling_attachment_id;
    }
    if (this.alb_target_group_arn !== null) {
      ih['alb_target_group_arn'] = this.alb_target_group_arn;
    }
    if (this.elb !== null) {
      ih['elb'] = this.elb;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Autoscaling_attachment';
  }
}

export class Autoscaling_group implements PcoreValue {
  readonly max_size: number;
  readonly min_size: number;
  readonly autoscaling_group_id: string|null;
  readonly arn: string|null;
  readonly availability_zones: string[]|null;
  readonly default_cooldown: number|null;
  readonly desired_capacity: number|null;
  readonly enabled_metrics: string[]|null;
  readonly force_delete: boolean;
  readonly health_check_grace_period: number;
  readonly health_check_type: string|null;
  readonly initial_lifecycle_hook: Anon53[]|null;
  readonly launch_configuration: string|null;
  readonly launch_template: Anon54|null;
  readonly load_balancers: string[]|null;
  readonly metrics_granularity: string;
  readonly min_elb_capacity: number|null;
  readonly mixed_instances_policy: Anon59|null;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly placement_group: string|null;
  readonly protect_from_scale_in: boolean;
  readonly service_linked_role_arn: string|null;
  readonly suspended_processes: string[]|null;
  readonly tag: Anon60[]|null;
  readonly tags: Array<{[s: string]: string}>|null;
  readonly target_group_arns: string[]|null;
  readonly termination_policies: string[]|null;
  readonly vpc_zone_identifier: string[]|null;
  readonly wait_for_capacity_timeout: string;
  readonly wait_for_elb_capacity: number|null;

  constructor({
    max_size,
    min_size,
    autoscaling_group_id = null,
    arn = null,
    availability_zones = null,
    default_cooldown = null,
    desired_capacity = null,
    enabled_metrics = null,
    force_delete = false,
    health_check_grace_period = 300,
    health_check_type = null,
    initial_lifecycle_hook = null,
    launch_configuration = null,
    launch_template = null,
    load_balancers = null,
    metrics_granularity = '1Minute',
    min_elb_capacity = null,
    mixed_instances_policy = null,
    name = null,
    name_prefix = null,
    placement_group = null,
    protect_from_scale_in = false,
    service_linked_role_arn = null,
    suspended_processes = null,
    tag = null,
    tags = null,
    target_group_arns = null,
    termination_policies = null,
    vpc_zone_identifier = null,
    wait_for_capacity_timeout = '10m',
    wait_for_elb_capacity = null
  }: {
    max_size: number,
    min_size: number,
    autoscaling_group_id?: string|null,
    arn?: string|null,
    availability_zones?: string[]|null,
    default_cooldown?: number|null,
    desired_capacity?: number|null,
    enabled_metrics?: string[]|null,
    force_delete?: boolean,
    health_check_grace_period?: number,
    health_check_type?: string|null,
    initial_lifecycle_hook?: Anon53[]|null,
    launch_configuration?: string|null,
    launch_template?: Anon54|null,
    load_balancers?: string[]|null,
    metrics_granularity?: string,
    min_elb_capacity?: number|null,
    mixed_instances_policy?: Anon59|null,
    name?: string|null,
    name_prefix?: string|null,
    placement_group?: string|null,
    protect_from_scale_in?: boolean,
    service_linked_role_arn?: string|null,
    suspended_processes?: string[]|null,
    tag?: Anon60[]|null,
    tags?: Array<{[s: string]: string}>|null,
    target_group_arns?: string[]|null,
    termination_policies?: string[]|null,
    vpc_zone_identifier?: string[]|null,
    wait_for_capacity_timeout?: string,
    wait_for_elb_capacity?: number|null
  }) {
    this.max_size = max_size;
    this.min_size = min_size;
    this.autoscaling_group_id = autoscaling_group_id;
    this.arn = arn;
    this.availability_zones = availability_zones;
    this.default_cooldown = default_cooldown;
    this.desired_capacity = desired_capacity;
    this.enabled_metrics = enabled_metrics;
    this.force_delete = force_delete;
    this.health_check_grace_period = health_check_grace_period;
    this.health_check_type = health_check_type;
    this.initial_lifecycle_hook = initial_lifecycle_hook;
    this.launch_configuration = launch_configuration;
    this.launch_template = launch_template;
    this.load_balancers = load_balancers;
    this.metrics_granularity = metrics_granularity;
    this.min_elb_capacity = min_elb_capacity;
    this.mixed_instances_policy = mixed_instances_policy;
    this.name = name;
    this.name_prefix = name_prefix;
    this.placement_group = placement_group;
    this.protect_from_scale_in = protect_from_scale_in;
    this.service_linked_role_arn = service_linked_role_arn;
    this.suspended_processes = suspended_processes;
    this.tag = tag;
    this.tags = tags;
    this.target_group_arns = target_group_arns;
    this.termination_policies = termination_policies;
    this.vpc_zone_identifier = vpc_zone_identifier;
    this.wait_for_capacity_timeout = wait_for_capacity_timeout;
    this.wait_for_elb_capacity = wait_for_elb_capacity;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['max_size'] = this.max_size;
    ih['min_size'] = this.min_size;
    if (this.autoscaling_group_id !== null) {
      ih['autoscaling_group_id'] = this.autoscaling_group_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.availability_zones !== null) {
      ih['availability_zones'] = this.availability_zones;
    }
    if (this.default_cooldown !== null) {
      ih['default_cooldown'] = this.default_cooldown;
    }
    if (this.desired_capacity !== null) {
      ih['desired_capacity'] = this.desired_capacity;
    }
    if (this.enabled_metrics !== null) {
      ih['enabled_metrics'] = this.enabled_metrics;
    }
    if (this.force_delete !== false) {
      ih['force_delete'] = this.force_delete;
    }
    if (this.health_check_grace_period !== 300) {
      ih['health_check_grace_period'] = this.health_check_grace_period;
    }
    if (this.health_check_type !== null) {
      ih['health_check_type'] = this.health_check_type;
    }
    if (this.initial_lifecycle_hook !== null) {
      ih['initial_lifecycle_hook'] = this.initial_lifecycle_hook;
    }
    if (this.launch_configuration !== null) {
      ih['launch_configuration'] = this.launch_configuration;
    }
    if (this.launch_template !== null) {
      ih['launch_template'] = this.launch_template;
    }
    if (this.load_balancers !== null) {
      ih['load_balancers'] = this.load_balancers;
    }
    if (this.metrics_granularity !== '1Minute') {
      ih['metrics_granularity'] = this.metrics_granularity;
    }
    if (this.min_elb_capacity !== null) {
      ih['min_elb_capacity'] = this.min_elb_capacity;
    }
    if (this.mixed_instances_policy !== null) {
      ih['mixed_instances_policy'] = this.mixed_instances_policy;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.placement_group !== null) {
      ih['placement_group'] = this.placement_group;
    }
    if (this.protect_from_scale_in !== false) {
      ih['protect_from_scale_in'] = this.protect_from_scale_in;
    }
    if (this.service_linked_role_arn !== null) {
      ih['service_linked_role_arn'] = this.service_linked_role_arn;
    }
    if (this.suspended_processes !== null) {
      ih['suspended_processes'] = this.suspended_processes;
    }
    if (this.tag !== null) {
      ih['tag'] = this.tag;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.target_group_arns !== null) {
      ih['target_group_arns'] = this.target_group_arns;
    }
    if (this.termination_policies !== null) {
      ih['termination_policies'] = this.termination_policies;
    }
    if (this.vpc_zone_identifier !== null) {
      ih['vpc_zone_identifier'] = this.vpc_zone_identifier;
    }
    if (this.wait_for_capacity_timeout !== '10m') {
      ih['wait_for_capacity_timeout'] = this.wait_for_capacity_timeout;
    }
    if (this.wait_for_elb_capacity !== null) {
      ih['wait_for_elb_capacity'] = this.wait_for_elb_capacity;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Autoscaling_group';
  }
}

export class Autoscaling_lifecycle_hook implements PcoreValue {
  readonly autoscaling_group_name: string;
  readonly lifecycle_transition: string;
  readonly name: string;
  readonly autoscaling_lifecycle_hook_id: string|null;
  readonly default_result: string|null;
  readonly heartbeat_timeout: number|null;
  readonly notification_metadata: string|null;
  readonly notification_target_arn: string|null;
  readonly role_arn: string|null;

  constructor({
    autoscaling_group_name,
    lifecycle_transition,
    name,
    autoscaling_lifecycle_hook_id = null,
    default_result = null,
    heartbeat_timeout = null,
    notification_metadata = null,
    notification_target_arn = null,
    role_arn = null
  }: {
    autoscaling_group_name: string,
    lifecycle_transition: string,
    name: string,
    autoscaling_lifecycle_hook_id?: string|null,
    default_result?: string|null,
    heartbeat_timeout?: number|null,
    notification_metadata?: string|null,
    notification_target_arn?: string|null,
    role_arn?: string|null
  }) {
    this.autoscaling_group_name = autoscaling_group_name;
    this.lifecycle_transition = lifecycle_transition;
    this.name = name;
    this.autoscaling_lifecycle_hook_id = autoscaling_lifecycle_hook_id;
    this.default_result = default_result;
    this.heartbeat_timeout = heartbeat_timeout;
    this.notification_metadata = notification_metadata;
    this.notification_target_arn = notification_target_arn;
    this.role_arn = role_arn;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['autoscaling_group_name'] = this.autoscaling_group_name;
    ih['lifecycle_transition'] = this.lifecycle_transition;
    ih['name'] = this.name;
    if (this.autoscaling_lifecycle_hook_id !== null) {
      ih['autoscaling_lifecycle_hook_id'] = this.autoscaling_lifecycle_hook_id;
    }
    if (this.default_result !== null) {
      ih['default_result'] = this.default_result;
    }
    if (this.heartbeat_timeout !== null) {
      ih['heartbeat_timeout'] = this.heartbeat_timeout;
    }
    if (this.notification_metadata !== null) {
      ih['notification_metadata'] = this.notification_metadata;
    }
    if (this.notification_target_arn !== null) {
      ih['notification_target_arn'] = this.notification_target_arn;
    }
    if (this.role_arn !== null) {
      ih['role_arn'] = this.role_arn;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Autoscaling_lifecycle_hook';
  }
}

export class Autoscaling_notification implements PcoreValue {
  readonly group_names: string[];
  readonly notifications: string[];
  readonly topic_arn: string;
  readonly autoscaling_notification_id: string|null;

  constructor({
    group_names,
    notifications,
    topic_arn,
    autoscaling_notification_id = null
  }: {
    group_names: string[],
    notifications: string[],
    topic_arn: string,
    autoscaling_notification_id?: string|null
  }) {
    this.group_names = group_names;
    this.notifications = notifications;
    this.topic_arn = topic_arn;
    this.autoscaling_notification_id = autoscaling_notification_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['group_names'] = this.group_names;
    ih['notifications'] = this.notifications;
    ih['topic_arn'] = this.topic_arn;
    if (this.autoscaling_notification_id !== null) {
      ih['autoscaling_notification_id'] = this.autoscaling_notification_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Autoscaling_notification';
  }
}

export class Autoscaling_policy implements PcoreValue {
  readonly autoscaling_group_name: string;
  readonly name: string;
  readonly autoscaling_policy_id: string|null;
  readonly adjustment_type: string|null;
  readonly arn: string|null;
  readonly cooldown: number|null;
  readonly estimated_instance_warmup: number|null;
  readonly metric_aggregation_type: string|null;
  readonly min_adjustment_magnitude: number|null;
  readonly policy_type: string;
  readonly scaling_adjustment: number|null;
  readonly step_adjustment: Anon27[]|null;
  readonly target_tracking_configuration: Anon62|null;

  constructor({
    autoscaling_group_name,
    name,
    autoscaling_policy_id = null,
    adjustment_type = null,
    arn = null,
    cooldown = null,
    estimated_instance_warmup = null,
    metric_aggregation_type = null,
    min_adjustment_magnitude = null,
    policy_type = 'SimpleScaling',
    scaling_adjustment = null,
    step_adjustment = null,
    target_tracking_configuration = null
  }: {
    autoscaling_group_name: string,
    name: string,
    autoscaling_policy_id?: string|null,
    adjustment_type?: string|null,
    arn?: string|null,
    cooldown?: number|null,
    estimated_instance_warmup?: number|null,
    metric_aggregation_type?: string|null,
    min_adjustment_magnitude?: number|null,
    policy_type?: string,
    scaling_adjustment?: number|null,
    step_adjustment?: Anon27[]|null,
    target_tracking_configuration?: Anon62|null
  }) {
    this.autoscaling_group_name = autoscaling_group_name;
    this.name = name;
    this.autoscaling_policy_id = autoscaling_policy_id;
    this.adjustment_type = adjustment_type;
    this.arn = arn;
    this.cooldown = cooldown;
    this.estimated_instance_warmup = estimated_instance_warmup;
    this.metric_aggregation_type = metric_aggregation_type;
    this.min_adjustment_magnitude = min_adjustment_magnitude;
    this.policy_type = policy_type;
    this.scaling_adjustment = scaling_adjustment;
    this.step_adjustment = step_adjustment;
    this.target_tracking_configuration = target_tracking_configuration;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['autoscaling_group_name'] = this.autoscaling_group_name;
    ih['name'] = this.name;
    if (this.autoscaling_policy_id !== null) {
      ih['autoscaling_policy_id'] = this.autoscaling_policy_id;
    }
    if (this.adjustment_type !== null) {
      ih['adjustment_type'] = this.adjustment_type;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.cooldown !== null) {
      ih['cooldown'] = this.cooldown;
    }
    if (this.estimated_instance_warmup !== null) {
      ih['estimated_instance_warmup'] = this.estimated_instance_warmup;
    }
    if (this.metric_aggregation_type !== null) {
      ih['metric_aggregation_type'] = this.metric_aggregation_type;
    }
    if (this.min_adjustment_magnitude !== null) {
      ih['min_adjustment_magnitude'] = this.min_adjustment_magnitude;
    }
    if (this.policy_type !== 'SimpleScaling') {
      ih['policy_type'] = this.policy_type;
    }
    if (this.scaling_adjustment !== null) {
      ih['scaling_adjustment'] = this.scaling_adjustment;
    }
    if (this.step_adjustment !== null) {
      ih['step_adjustment'] = this.step_adjustment;
    }
    if (this.target_tracking_configuration !== null) {
      ih['target_tracking_configuration'] = this.target_tracking_configuration;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Autoscaling_policy';
  }
}

export class Autoscaling_schedule implements PcoreValue {
  readonly autoscaling_group_name: string;
  readonly scheduled_action_name: string;
  readonly autoscaling_schedule_id: string|null;
  readonly arn: string|null;
  readonly desired_capacity: number|null;
  readonly end_time: string|null;
  readonly max_size: number|null;
  readonly min_size: number|null;
  readonly recurrence: string|null;
  readonly start_time: string|null;

  constructor({
    autoscaling_group_name,
    scheduled_action_name,
    autoscaling_schedule_id = null,
    arn = null,
    desired_capacity = null,
    end_time = null,
    max_size = null,
    min_size = null,
    recurrence = null,
    start_time = null
  }: {
    autoscaling_group_name: string,
    scheduled_action_name: string,
    autoscaling_schedule_id?: string|null,
    arn?: string|null,
    desired_capacity?: number|null,
    end_time?: string|null,
    max_size?: number|null,
    min_size?: number|null,
    recurrence?: string|null,
    start_time?: string|null
  }) {
    this.autoscaling_group_name = autoscaling_group_name;
    this.scheduled_action_name = scheduled_action_name;
    this.autoscaling_schedule_id = autoscaling_schedule_id;
    this.arn = arn;
    this.desired_capacity = desired_capacity;
    this.end_time = end_time;
    this.max_size = max_size;
    this.min_size = min_size;
    this.recurrence = recurrence;
    this.start_time = start_time;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['autoscaling_group_name'] = this.autoscaling_group_name;
    ih['scheduled_action_name'] = this.scheduled_action_name;
    if (this.autoscaling_schedule_id !== null) {
      ih['autoscaling_schedule_id'] = this.autoscaling_schedule_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.desired_capacity !== null) {
      ih['desired_capacity'] = this.desired_capacity;
    }
    if (this.end_time !== null) {
      ih['end_time'] = this.end_time;
    }
    if (this.max_size !== null) {
      ih['max_size'] = this.max_size;
    }
    if (this.min_size !== null) {
      ih['min_size'] = this.min_size;
    }
    if (this.recurrence !== null) {
      ih['recurrence'] = this.recurrence;
    }
    if (this.start_time !== null) {
      ih['start_time'] = this.start_time;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Autoscaling_schedule';
  }
}

export class Batch_compute_environment implements PcoreValue {
  readonly compute_environment_name: string;
  readonly service_role: string;
  readonly type: string;
  readonly batch_compute_environment_id: string|null;
  readonly arn: string|null;
  readonly compute_resources: Anon63|null;
  readonly ecs_cluster_arn: string|null;
  readonly state: string;
  readonly status: string|null;
  readonly status_reason: string|null;

  constructor({
    compute_environment_name,
    service_role,
    type,
    batch_compute_environment_id = null,
    arn = null,
    compute_resources = null,
    ecs_cluster_arn = null,
    state = 'ENABLED',
    status = null,
    status_reason = null
  }: {
    compute_environment_name: string,
    service_role: string,
    type: string,
    batch_compute_environment_id?: string|null,
    arn?: string|null,
    compute_resources?: Anon63|null,
    ecs_cluster_arn?: string|null,
    state?: string,
    status?: string|null,
    status_reason?: string|null
  }) {
    this.compute_environment_name = compute_environment_name;
    this.service_role = service_role;
    this.type = type;
    this.batch_compute_environment_id = batch_compute_environment_id;
    this.arn = arn;
    this.compute_resources = compute_resources;
    this.ecs_cluster_arn = ecs_cluster_arn;
    this.state = state;
    this.status = status;
    this.status_reason = status_reason;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['compute_environment_name'] = this.compute_environment_name;
    ih['service_role'] = this.service_role;
    ih['type'] = this.type;
    if (this.batch_compute_environment_id !== null) {
      ih['batch_compute_environment_id'] = this.batch_compute_environment_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.compute_resources !== null) {
      ih['compute_resources'] = this.compute_resources;
    }
    if (this.ecs_cluster_arn !== null) {
      ih['ecs_cluster_arn'] = this.ecs_cluster_arn;
    }
    if (this.state !== 'ENABLED') {
      ih['state'] = this.state;
    }
    if (this.status !== null) {
      ih['status'] = this.status;
    }
    if (this.status_reason !== null) {
      ih['status_reason'] = this.status_reason;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Batch_compute_environment';
  }
}

export class Batch_job_definition implements PcoreValue {
  readonly name: string;
  readonly type: string;
  readonly batch_job_definition_id: string|null;
  readonly arn: string|null;
  readonly container_properties: string|null;
  readonly parameters: {[s: string]: string}|null;
  readonly retry_strategy: Anon64|null;
  readonly revision: number|null;
  readonly timeout: Anon65|null;

  constructor({
    name,
    type,
    batch_job_definition_id = null,
    arn = null,
    container_properties = null,
    parameters = null,
    retry_strategy = null,
    revision = null,
    timeout = null
  }: {
    name: string,
    type: string,
    batch_job_definition_id?: string|null,
    arn?: string|null,
    container_properties?: string|null,
    parameters?: {[s: string]: string}|null,
    retry_strategy?: Anon64|null,
    revision?: number|null,
    timeout?: Anon65|null
  }) {
    this.name = name;
    this.type = type;
    this.batch_job_definition_id = batch_job_definition_id;
    this.arn = arn;
    this.container_properties = container_properties;
    this.parameters = parameters;
    this.retry_strategy = retry_strategy;
    this.revision = revision;
    this.timeout = timeout;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['type'] = this.type;
    if (this.batch_job_definition_id !== null) {
      ih['batch_job_definition_id'] = this.batch_job_definition_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.container_properties !== null) {
      ih['container_properties'] = this.container_properties;
    }
    if (this.parameters !== null) {
      ih['parameters'] = this.parameters;
    }
    if (this.retry_strategy !== null) {
      ih['retry_strategy'] = this.retry_strategy;
    }
    if (this.revision !== null) {
      ih['revision'] = this.revision;
    }
    if (this.timeout !== null) {
      ih['timeout'] = this.timeout;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Batch_job_definition';
  }
}

export class Batch_job_queue implements PcoreValue {
  readonly compute_environments: string[];
  readonly name: string;
  readonly priority: number;
  readonly state: string;
  readonly batch_job_queue_id: string|null;
  readonly arn: string|null;

  constructor({
    compute_environments,
    name,
    priority,
    state,
    batch_job_queue_id = null,
    arn = null
  }: {
    compute_environments: string[],
    name: string,
    priority: number,
    state: string,
    batch_job_queue_id?: string|null,
    arn?: string|null
  }) {
    this.compute_environments = compute_environments;
    this.name = name;
    this.priority = priority;
    this.state = state;
    this.batch_job_queue_id = batch_job_queue_id;
    this.arn = arn;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['compute_environments'] = this.compute_environments;
    ih['name'] = this.name;
    ih['priority'] = this.priority;
    ih['state'] = this.state;
    if (this.batch_job_queue_id !== null) {
      ih['batch_job_queue_id'] = this.batch_job_queue_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Batch_job_queue';
  }
}

export class Budgets_budget implements PcoreValue {
  readonly budget_type: string;
  readonly limit_amount: string;
  readonly limit_unit: string;
  readonly time_period_start: string;
  readonly time_unit: string;
  readonly budgets_budget_id: string|null;
  readonly account_id: string|null;
  readonly cost_filters: {[s: string]: string}|null;
  readonly cost_types: Anon66|null;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly time_period_end: string;

  constructor({
    budget_type,
    limit_amount,
    limit_unit,
    time_period_start,
    time_unit,
    budgets_budget_id = null,
    account_id = null,
    cost_filters = null,
    cost_types = null,
    name = null,
    name_prefix = null,
    time_period_end = '2087-06-15_00:00'
  }: {
    budget_type: string,
    limit_amount: string,
    limit_unit: string,
    time_period_start: string,
    time_unit: string,
    budgets_budget_id?: string|null,
    account_id?: string|null,
    cost_filters?: {[s: string]: string}|null,
    cost_types?: Anon66|null,
    name?: string|null,
    name_prefix?: string|null,
    time_period_end?: string
  }) {
    this.budget_type = budget_type;
    this.limit_amount = limit_amount;
    this.limit_unit = limit_unit;
    this.time_period_start = time_period_start;
    this.time_unit = time_unit;
    this.budgets_budget_id = budgets_budget_id;
    this.account_id = account_id;
    this.cost_filters = cost_filters;
    this.cost_types = cost_types;
    this.name = name;
    this.name_prefix = name_prefix;
    this.time_period_end = time_period_end;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['budget_type'] = this.budget_type;
    ih['limit_amount'] = this.limit_amount;
    ih['limit_unit'] = this.limit_unit;
    ih['time_period_start'] = this.time_period_start;
    ih['time_unit'] = this.time_unit;
    if (this.budgets_budget_id !== null) {
      ih['budgets_budget_id'] = this.budgets_budget_id;
    }
    if (this.account_id !== null) {
      ih['account_id'] = this.account_id;
    }
    if (this.cost_filters !== null) {
      ih['cost_filters'] = this.cost_filters;
    }
    if (this.cost_types !== null) {
      ih['cost_types'] = this.cost_types;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.time_period_end !== '2087-06-15_00:00') {
      ih['time_period_end'] = this.time_period_end;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Budgets_budget';
  }
}

export class Cloud9_environment_ec2 implements PcoreValue {
  readonly instance_type: string;
  readonly name: string;
  readonly cloud9_environment_ec2_id: string|null;
  readonly arn: string|null;
  readonly automatic_stop_time_minutes: number|null;
  readonly description: string|null;
  readonly owner_arn: string|null;
  readonly subnet_id: string|null;
  readonly type: string|null;

  constructor({
    instance_type,
    name,
    cloud9_environment_ec2_id = null,
    arn = null,
    automatic_stop_time_minutes = null,
    description = null,
    owner_arn = null,
    subnet_id = null,
    type = null
  }: {
    instance_type: string,
    name: string,
    cloud9_environment_ec2_id?: string|null,
    arn?: string|null,
    automatic_stop_time_minutes?: number|null,
    description?: string|null,
    owner_arn?: string|null,
    subnet_id?: string|null,
    type?: string|null
  }) {
    this.instance_type = instance_type;
    this.name = name;
    this.cloud9_environment_ec2_id = cloud9_environment_ec2_id;
    this.arn = arn;
    this.automatic_stop_time_minutes = automatic_stop_time_minutes;
    this.description = description;
    this.owner_arn = owner_arn;
    this.subnet_id = subnet_id;
    this.type = type;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['instance_type'] = this.instance_type;
    ih['name'] = this.name;
    if (this.cloud9_environment_ec2_id !== null) {
      ih['cloud9_environment_ec2_id'] = this.cloud9_environment_ec2_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.automatic_stop_time_minutes !== null) {
      ih['automatic_stop_time_minutes'] = this.automatic_stop_time_minutes;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.owner_arn !== null) {
      ih['owner_arn'] = this.owner_arn;
    }
    if (this.subnet_id !== null) {
      ih['subnet_id'] = this.subnet_id;
    }
    if (this.type !== null) {
      ih['type'] = this.type;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cloud9_environment_ec2';
  }
}

export class Cloudformation_stack implements PcoreValue {
  readonly name: string;
  readonly cloudformation_stack_id: string|null;
  readonly capabilities: string[]|null;
  readonly disable_rollback: boolean|null;
  readonly iam_role_arn: string|null;
  readonly notification_arns: string[]|null;
  readonly on_failure: string|null;
  readonly outputs: {[s: string]: string}|null;
  readonly parameters: {[s: string]: string}|null;
  readonly policy_body: string|null;
  readonly policy_url: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly template_body: string|null;
  readonly template_url: string|null;
  readonly timeout_in_minutes: number|null;

  constructor({
    name,
    cloudformation_stack_id = null,
    capabilities = null,
    disable_rollback = null,
    iam_role_arn = null,
    notification_arns = null,
    on_failure = null,
    outputs = null,
    parameters = null,
    policy_body = null,
    policy_url = null,
    tags = null,
    template_body = null,
    template_url = null,
    timeout_in_minutes = null
  }: {
    name: string,
    cloudformation_stack_id?: string|null,
    capabilities?: string[]|null,
    disable_rollback?: boolean|null,
    iam_role_arn?: string|null,
    notification_arns?: string[]|null,
    on_failure?: string|null,
    outputs?: {[s: string]: string}|null,
    parameters?: {[s: string]: string}|null,
    policy_body?: string|null,
    policy_url?: string|null,
    tags?: {[s: string]: string}|null,
    template_body?: string|null,
    template_url?: string|null,
    timeout_in_minutes?: number|null
  }) {
    this.name = name;
    this.cloudformation_stack_id = cloudformation_stack_id;
    this.capabilities = capabilities;
    this.disable_rollback = disable_rollback;
    this.iam_role_arn = iam_role_arn;
    this.notification_arns = notification_arns;
    this.on_failure = on_failure;
    this.outputs = outputs;
    this.parameters = parameters;
    this.policy_body = policy_body;
    this.policy_url = policy_url;
    this.tags = tags;
    this.template_body = template_body;
    this.template_url = template_url;
    this.timeout_in_minutes = timeout_in_minutes;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.cloudformation_stack_id !== null) {
      ih['cloudformation_stack_id'] = this.cloudformation_stack_id;
    }
    if (this.capabilities !== null) {
      ih['capabilities'] = this.capabilities;
    }
    if (this.disable_rollback !== null) {
      ih['disable_rollback'] = this.disable_rollback;
    }
    if (this.iam_role_arn !== null) {
      ih['iam_role_arn'] = this.iam_role_arn;
    }
    if (this.notification_arns !== null) {
      ih['notification_arns'] = this.notification_arns;
    }
    if (this.on_failure !== null) {
      ih['on_failure'] = this.on_failure;
    }
    if (this.outputs !== null) {
      ih['outputs'] = this.outputs;
    }
    if (this.parameters !== null) {
      ih['parameters'] = this.parameters;
    }
    if (this.policy_body !== null) {
      ih['policy_body'] = this.policy_body;
    }
    if (this.policy_url !== null) {
      ih['policy_url'] = this.policy_url;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.template_body !== null) {
      ih['template_body'] = this.template_body;
    }
    if (this.template_url !== null) {
      ih['template_url'] = this.template_url;
    }
    if (this.timeout_in_minutes !== null) {
      ih['timeout_in_minutes'] = this.timeout_in_minutes;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cloudformation_stack';
  }
}

export class Cloudfront_distribution implements PcoreValue {
  readonly enabled: boolean;
  readonly origin: Anon69[];
  readonly cloudfront_distribution_id: string|null;
  readonly active_trusted_signers: {[s: string]: string}|null;
  readonly aliases: string[]|null;
  readonly arn: string|null;
  readonly caller_reference: string|null;
  readonly comment: string|null;
  readonly custom_error_response: Anon70[]|null;
  readonly default_cache_behavior: Anon74|null;
  readonly default_root_object: string|null;
  readonly domain_name: string|null;
  readonly etag: string|null;
  readonly hosted_zone_id: string|null;
  readonly http_version: string;
  readonly in_progress_validation_batches: number|null;
  readonly is_ipv6_enabled: boolean;
  readonly last_modified_time: string|null;
  readonly logging_config: Anon75|null;
  readonly ordered_cache_behavior: Anon76[]|null;
  readonly price_class: string;
  readonly restrictions: Anon78|null;
  readonly retain_on_delete: boolean;
  readonly status: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly viewer_certificate: Anon79|null;
  readonly web_acl_id: string|null;

  constructor({
    enabled,
    origin,
    cloudfront_distribution_id = null,
    active_trusted_signers = null,
    aliases = null,
    arn = null,
    caller_reference = null,
    comment = null,
    custom_error_response = null,
    default_cache_behavior = null,
    default_root_object = null,
    domain_name = null,
    etag = null,
    hosted_zone_id = null,
    http_version = 'http2',
    in_progress_validation_batches = null,
    is_ipv6_enabled = false,
    last_modified_time = null,
    logging_config = null,
    ordered_cache_behavior = null,
    price_class = 'PriceClass_All',
    restrictions = null,
    retain_on_delete = false,
    status = null,
    tags = null,
    viewer_certificate = null,
    web_acl_id = null
  }: {
    enabled: boolean,
    origin: Anon69[],
    cloudfront_distribution_id?: string|null,
    active_trusted_signers?: {[s: string]: string}|null,
    aliases?: string[]|null,
    arn?: string|null,
    caller_reference?: string|null,
    comment?: string|null,
    custom_error_response?: Anon70[]|null,
    default_cache_behavior?: Anon74|null,
    default_root_object?: string|null,
    domain_name?: string|null,
    etag?: string|null,
    hosted_zone_id?: string|null,
    http_version?: string,
    in_progress_validation_batches?: number|null,
    is_ipv6_enabled?: boolean,
    last_modified_time?: string|null,
    logging_config?: Anon75|null,
    ordered_cache_behavior?: Anon76[]|null,
    price_class?: string,
    restrictions?: Anon78|null,
    retain_on_delete?: boolean,
    status?: string|null,
    tags?: {[s: string]: string}|null,
    viewer_certificate?: Anon79|null,
    web_acl_id?: string|null
  }) {
    this.enabled = enabled;
    this.origin = origin;
    this.cloudfront_distribution_id = cloudfront_distribution_id;
    this.active_trusted_signers = active_trusted_signers;
    this.aliases = aliases;
    this.arn = arn;
    this.caller_reference = caller_reference;
    this.comment = comment;
    this.custom_error_response = custom_error_response;
    this.default_cache_behavior = default_cache_behavior;
    this.default_root_object = default_root_object;
    this.domain_name = domain_name;
    this.etag = etag;
    this.hosted_zone_id = hosted_zone_id;
    this.http_version = http_version;
    this.in_progress_validation_batches = in_progress_validation_batches;
    this.is_ipv6_enabled = is_ipv6_enabled;
    this.last_modified_time = last_modified_time;
    this.logging_config = logging_config;
    this.ordered_cache_behavior = ordered_cache_behavior;
    this.price_class = price_class;
    this.restrictions = restrictions;
    this.retain_on_delete = retain_on_delete;
    this.status = status;
    this.tags = tags;
    this.viewer_certificate = viewer_certificate;
    this.web_acl_id = web_acl_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['enabled'] = this.enabled;
    ih['origin'] = this.origin;
    if (this.cloudfront_distribution_id !== null) {
      ih['cloudfront_distribution_id'] = this.cloudfront_distribution_id;
    }
    if (this.active_trusted_signers !== null) {
      ih['active_trusted_signers'] = this.active_trusted_signers;
    }
    if (this.aliases !== null) {
      ih['aliases'] = this.aliases;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.caller_reference !== null) {
      ih['caller_reference'] = this.caller_reference;
    }
    if (this.comment !== null) {
      ih['comment'] = this.comment;
    }
    if (this.custom_error_response !== null) {
      ih['custom_error_response'] = this.custom_error_response;
    }
    if (this.default_cache_behavior !== null) {
      ih['default_cache_behavior'] = this.default_cache_behavior;
    }
    if (this.default_root_object !== null) {
      ih['default_root_object'] = this.default_root_object;
    }
    if (this.domain_name !== null) {
      ih['domain_name'] = this.domain_name;
    }
    if (this.etag !== null) {
      ih['etag'] = this.etag;
    }
    if (this.hosted_zone_id !== null) {
      ih['hosted_zone_id'] = this.hosted_zone_id;
    }
    if (this.http_version !== 'http2') {
      ih['http_version'] = this.http_version;
    }
    if (this.in_progress_validation_batches !== null) {
      ih['in_progress_validation_batches'] = this.in_progress_validation_batches;
    }
    if (this.is_ipv6_enabled !== false) {
      ih['is_ipv6_enabled'] = this.is_ipv6_enabled;
    }
    if (this.last_modified_time !== null) {
      ih['last_modified_time'] = this.last_modified_time;
    }
    if (this.logging_config !== null) {
      ih['logging_config'] = this.logging_config;
    }
    if (this.ordered_cache_behavior !== null) {
      ih['ordered_cache_behavior'] = this.ordered_cache_behavior;
    }
    if (this.price_class !== 'PriceClass_All') {
      ih['price_class'] = this.price_class;
    }
    if (this.restrictions !== null) {
      ih['restrictions'] = this.restrictions;
    }
    if (this.retain_on_delete !== false) {
      ih['retain_on_delete'] = this.retain_on_delete;
    }
    if (this.status !== null) {
      ih['status'] = this.status;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.viewer_certificate !== null) {
      ih['viewer_certificate'] = this.viewer_certificate;
    }
    if (this.web_acl_id !== null) {
      ih['web_acl_id'] = this.web_acl_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cloudfront_distribution';
  }
}

export class Cloudfront_origin_access_identity implements PcoreValue {
  readonly cloudfront_origin_access_identity_id: string|null;
  readonly caller_reference: string|null;
  readonly cloudfront_access_identity_path: string|null;
  readonly comment: string;
  readonly etag: string|null;
  readonly iam_arn: string|null;
  readonly s3_canonical_user_id: string|null;

  constructor({
    cloudfront_origin_access_identity_id = null,
    caller_reference = null,
    cloudfront_access_identity_path = null,
    comment = '',
    etag = null,
    iam_arn = null,
    s3_canonical_user_id = null
  }: {
    cloudfront_origin_access_identity_id?: string|null,
    caller_reference?: string|null,
    cloudfront_access_identity_path?: string|null,
    comment?: string,
    etag?: string|null,
    iam_arn?: string|null,
    s3_canonical_user_id?: string|null
  }) {
    this.cloudfront_origin_access_identity_id = cloudfront_origin_access_identity_id;
    this.caller_reference = caller_reference;
    this.cloudfront_access_identity_path = cloudfront_access_identity_path;
    this.comment = comment;
    this.etag = etag;
    this.iam_arn = iam_arn;
    this.s3_canonical_user_id = s3_canonical_user_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.cloudfront_origin_access_identity_id !== null) {
      ih['cloudfront_origin_access_identity_id'] = this.cloudfront_origin_access_identity_id;
    }
    if (this.caller_reference !== null) {
      ih['caller_reference'] = this.caller_reference;
    }
    if (this.cloudfront_access_identity_path !== null) {
      ih['cloudfront_access_identity_path'] = this.cloudfront_access_identity_path;
    }
    if (this.comment !== '') {
      ih['comment'] = this.comment;
    }
    if (this.etag !== null) {
      ih['etag'] = this.etag;
    }
    if (this.iam_arn !== null) {
      ih['iam_arn'] = this.iam_arn;
    }
    if (this.s3_canonical_user_id !== null) {
      ih['s3_canonical_user_id'] = this.s3_canonical_user_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cloudfront_origin_access_identity';
  }
}

export class Cloudfront_public_key implements PcoreValue {
  readonly encoded_key: string;
  readonly cloudfront_public_key_id: string|null;
  readonly caller_reference: string|null;
  readonly comment: string|null;
  readonly etag: string|null;
  readonly name: string|null;
  readonly name_prefix: string|null;

  constructor({
    encoded_key,
    cloudfront_public_key_id = null,
    caller_reference = null,
    comment = null,
    etag = null,
    name = null,
    name_prefix = null
  }: {
    encoded_key: string,
    cloudfront_public_key_id?: string|null,
    caller_reference?: string|null,
    comment?: string|null,
    etag?: string|null,
    name?: string|null,
    name_prefix?: string|null
  }) {
    this.encoded_key = encoded_key;
    this.cloudfront_public_key_id = cloudfront_public_key_id;
    this.caller_reference = caller_reference;
    this.comment = comment;
    this.etag = etag;
    this.name = name;
    this.name_prefix = name_prefix;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['encoded_key'] = this.encoded_key;
    if (this.cloudfront_public_key_id !== null) {
      ih['cloudfront_public_key_id'] = this.cloudfront_public_key_id;
    }
    if (this.caller_reference !== null) {
      ih['caller_reference'] = this.caller_reference;
    }
    if (this.comment !== null) {
      ih['comment'] = this.comment;
    }
    if (this.etag !== null) {
      ih['etag'] = this.etag;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cloudfront_public_key';
  }
}

export class Cloudhsm_v2_cluster implements PcoreValue {
  readonly hsm_type: string;
  readonly subnet_ids: string[];
  readonly cloudhsm_v2_cluster_id: string|null;
  readonly cluster_certificates: Anon80|null;
  readonly cluster_id: string|null;
  readonly cluster_state: string|null;
  readonly security_group_id: string|null;
  readonly source_backup_identifier: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly vpc_id: string|null;

  constructor({
    hsm_type,
    subnet_ids,
    cloudhsm_v2_cluster_id = null,
    cluster_certificates = null,
    cluster_id = null,
    cluster_state = null,
    security_group_id = null,
    source_backup_identifier = null,
    tags = null,
    vpc_id = null
  }: {
    hsm_type: string,
    subnet_ids: string[],
    cloudhsm_v2_cluster_id?: string|null,
    cluster_certificates?: Anon80|null,
    cluster_id?: string|null,
    cluster_state?: string|null,
    security_group_id?: string|null,
    source_backup_identifier?: string|null,
    tags?: {[s: string]: string}|null,
    vpc_id?: string|null
  }) {
    this.hsm_type = hsm_type;
    this.subnet_ids = subnet_ids;
    this.cloudhsm_v2_cluster_id = cloudhsm_v2_cluster_id;
    this.cluster_certificates = cluster_certificates;
    this.cluster_id = cluster_id;
    this.cluster_state = cluster_state;
    this.security_group_id = security_group_id;
    this.source_backup_identifier = source_backup_identifier;
    this.tags = tags;
    this.vpc_id = vpc_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['hsm_type'] = this.hsm_type;
    ih['subnet_ids'] = this.subnet_ids;
    if (this.cloudhsm_v2_cluster_id !== null) {
      ih['cloudhsm_v2_cluster_id'] = this.cloudhsm_v2_cluster_id;
    }
    if (this.cluster_certificates !== null) {
      ih['cluster_certificates'] = this.cluster_certificates;
    }
    if (this.cluster_id !== null) {
      ih['cluster_id'] = this.cluster_id;
    }
    if (this.cluster_state !== null) {
      ih['cluster_state'] = this.cluster_state;
    }
    if (this.security_group_id !== null) {
      ih['security_group_id'] = this.security_group_id;
    }
    if (this.source_backup_identifier !== null) {
      ih['source_backup_identifier'] = this.source_backup_identifier;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpc_id !== null) {
      ih['vpc_id'] = this.vpc_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cloudhsm_v2_cluster';
  }
}

export class Cloudhsm_v2_hsm implements PcoreValue {
  readonly cluster_id: string;
  readonly cloudhsm_v2_hsm_id: string|null;
  readonly availability_zone: string|null;
  readonly hsm_eni_id: string|null;
  readonly hsm_id: string|null;
  readonly hsm_state: string|null;
  readonly ip_address: string|null;
  readonly subnet_id: string|null;

  constructor({
    cluster_id,
    cloudhsm_v2_hsm_id = null,
    availability_zone = null,
    hsm_eni_id = null,
    hsm_id = null,
    hsm_state = null,
    ip_address = null,
    subnet_id = null
  }: {
    cluster_id: string,
    cloudhsm_v2_hsm_id?: string|null,
    availability_zone?: string|null,
    hsm_eni_id?: string|null,
    hsm_id?: string|null,
    hsm_state?: string|null,
    ip_address?: string|null,
    subnet_id?: string|null
  }) {
    this.cluster_id = cluster_id;
    this.cloudhsm_v2_hsm_id = cloudhsm_v2_hsm_id;
    this.availability_zone = availability_zone;
    this.hsm_eni_id = hsm_eni_id;
    this.hsm_id = hsm_id;
    this.hsm_state = hsm_state;
    this.ip_address = ip_address;
    this.subnet_id = subnet_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['cluster_id'] = this.cluster_id;
    if (this.cloudhsm_v2_hsm_id !== null) {
      ih['cloudhsm_v2_hsm_id'] = this.cloudhsm_v2_hsm_id;
    }
    if (this.availability_zone !== null) {
      ih['availability_zone'] = this.availability_zone;
    }
    if (this.hsm_eni_id !== null) {
      ih['hsm_eni_id'] = this.hsm_eni_id;
    }
    if (this.hsm_id !== null) {
      ih['hsm_id'] = this.hsm_id;
    }
    if (this.hsm_state !== null) {
      ih['hsm_state'] = this.hsm_state;
    }
    if (this.ip_address !== null) {
      ih['ip_address'] = this.ip_address;
    }
    if (this.subnet_id !== null) {
      ih['subnet_id'] = this.subnet_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cloudhsm_v2_hsm';
  }
}

export class Cloudtrail implements PcoreValue {
  readonly name: string;
  readonly s3_bucket_name: string;
  readonly cloudtrail_id: string|null;
  readonly arn: string|null;
  readonly cloud_watch_logs_group_arn: string|null;
  readonly cloud_watch_logs_role_arn: string|null;
  readonly enable_log_file_validation: boolean;
  readonly enable_logging: boolean;
  readonly event_selector: Anon82[]|null;
  readonly home_region: string|null;
  readonly include_global_service_events: boolean;
  readonly is_multi_region_trail: boolean;
  readonly is_organization_trail: boolean;
  readonly kms_key_id: string|null;
  readonly s3_key_prefix: string|null;
  readonly sns_topic_name: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    name,
    s3_bucket_name,
    cloudtrail_id = null,
    arn = null,
    cloud_watch_logs_group_arn = null,
    cloud_watch_logs_role_arn = null,
    enable_log_file_validation = false,
    enable_logging = true,
    event_selector = null,
    home_region = null,
    include_global_service_events = true,
    is_multi_region_trail = false,
    is_organization_trail = false,
    kms_key_id = null,
    s3_key_prefix = null,
    sns_topic_name = null,
    tags = null
  }: {
    name: string,
    s3_bucket_name: string,
    cloudtrail_id?: string|null,
    arn?: string|null,
    cloud_watch_logs_group_arn?: string|null,
    cloud_watch_logs_role_arn?: string|null,
    enable_log_file_validation?: boolean,
    enable_logging?: boolean,
    event_selector?: Anon82[]|null,
    home_region?: string|null,
    include_global_service_events?: boolean,
    is_multi_region_trail?: boolean,
    is_organization_trail?: boolean,
    kms_key_id?: string|null,
    s3_key_prefix?: string|null,
    sns_topic_name?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.name = name;
    this.s3_bucket_name = s3_bucket_name;
    this.cloudtrail_id = cloudtrail_id;
    this.arn = arn;
    this.cloud_watch_logs_group_arn = cloud_watch_logs_group_arn;
    this.cloud_watch_logs_role_arn = cloud_watch_logs_role_arn;
    this.enable_log_file_validation = enable_log_file_validation;
    this.enable_logging = enable_logging;
    this.event_selector = event_selector;
    this.home_region = home_region;
    this.include_global_service_events = include_global_service_events;
    this.is_multi_region_trail = is_multi_region_trail;
    this.is_organization_trail = is_organization_trail;
    this.kms_key_id = kms_key_id;
    this.s3_key_prefix = s3_key_prefix;
    this.sns_topic_name = sns_topic_name;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['s3_bucket_name'] = this.s3_bucket_name;
    if (this.cloudtrail_id !== null) {
      ih['cloudtrail_id'] = this.cloudtrail_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.cloud_watch_logs_group_arn !== null) {
      ih['cloud_watch_logs_group_arn'] = this.cloud_watch_logs_group_arn;
    }
    if (this.cloud_watch_logs_role_arn !== null) {
      ih['cloud_watch_logs_role_arn'] = this.cloud_watch_logs_role_arn;
    }
    if (this.enable_log_file_validation !== false) {
      ih['enable_log_file_validation'] = this.enable_log_file_validation;
    }
    if (this.enable_logging !== true) {
      ih['enable_logging'] = this.enable_logging;
    }
    if (this.event_selector !== null) {
      ih['event_selector'] = this.event_selector;
    }
    if (this.home_region !== null) {
      ih['home_region'] = this.home_region;
    }
    if (this.include_global_service_events !== true) {
      ih['include_global_service_events'] = this.include_global_service_events;
    }
    if (this.is_multi_region_trail !== false) {
      ih['is_multi_region_trail'] = this.is_multi_region_trail;
    }
    if (this.is_organization_trail !== false) {
      ih['is_organization_trail'] = this.is_organization_trail;
    }
    if (this.kms_key_id !== null) {
      ih['kms_key_id'] = this.kms_key_id;
    }
    if (this.s3_key_prefix !== null) {
      ih['s3_key_prefix'] = this.s3_key_prefix;
    }
    if (this.sns_topic_name !== null) {
      ih['sns_topic_name'] = this.sns_topic_name;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cloudtrail';
  }
}

export class Cloudwatch_dashboard implements PcoreValue {
  readonly dashboard_body: string;
  readonly dashboard_name: string;
  readonly cloudwatch_dashboard_id: string|null;
  readonly dashboard_arn: string|null;

  constructor({
    dashboard_body,
    dashboard_name,
    cloudwatch_dashboard_id = null,
    dashboard_arn = null
  }: {
    dashboard_body: string,
    dashboard_name: string,
    cloudwatch_dashboard_id?: string|null,
    dashboard_arn?: string|null
  }) {
    this.dashboard_body = dashboard_body;
    this.dashboard_name = dashboard_name;
    this.cloudwatch_dashboard_id = cloudwatch_dashboard_id;
    this.dashboard_arn = dashboard_arn;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['dashboard_body'] = this.dashboard_body;
    ih['dashboard_name'] = this.dashboard_name;
    if (this.cloudwatch_dashboard_id !== null) {
      ih['cloudwatch_dashboard_id'] = this.cloudwatch_dashboard_id;
    }
    if (this.dashboard_arn !== null) {
      ih['dashboard_arn'] = this.dashboard_arn;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cloudwatch_dashboard';
  }
}

export class Cloudwatch_event_permission implements PcoreValue {
  readonly principal: string;
  readonly statement_id: string;
  readonly cloudwatch_event_permission_id: string|null;
  readonly action: string;
  readonly condition: Anon83|null;

  constructor({
    principal,
    statement_id,
    cloudwatch_event_permission_id = null,
    action = 'events:PutEvents',
    condition = null
  }: {
    principal: string,
    statement_id: string,
    cloudwatch_event_permission_id?: string|null,
    action?: string,
    condition?: Anon83|null
  }) {
    this.principal = principal;
    this.statement_id = statement_id;
    this.cloudwatch_event_permission_id = cloudwatch_event_permission_id;
    this.action = action;
    this.condition = condition;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['principal'] = this.principal;
    ih['statement_id'] = this.statement_id;
    if (this.cloudwatch_event_permission_id !== null) {
      ih['cloudwatch_event_permission_id'] = this.cloudwatch_event_permission_id;
    }
    if (this.action !== 'events:PutEvents') {
      ih['action'] = this.action;
    }
    if (this.condition !== null) {
      ih['condition'] = this.condition;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cloudwatch_event_permission';
  }
}

export class Cloudwatch_event_rule implements PcoreValue {
  readonly cloudwatch_event_rule_id: string|null;
  readonly arn: string|null;
  readonly description: string|null;
  readonly event_pattern: string|null;
  readonly is_enabled: boolean;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly role_arn: string|null;
  readonly schedule_expression: string|null;

  constructor({
    cloudwatch_event_rule_id = null,
    arn = null,
    description = null,
    event_pattern = null,
    is_enabled = true,
    name = null,
    name_prefix = null,
    role_arn = null,
    schedule_expression = null
  }: {
    cloudwatch_event_rule_id?: string|null,
    arn?: string|null,
    description?: string|null,
    event_pattern?: string|null,
    is_enabled?: boolean,
    name?: string|null,
    name_prefix?: string|null,
    role_arn?: string|null,
    schedule_expression?: string|null
  }) {
    this.cloudwatch_event_rule_id = cloudwatch_event_rule_id;
    this.arn = arn;
    this.description = description;
    this.event_pattern = event_pattern;
    this.is_enabled = is_enabled;
    this.name = name;
    this.name_prefix = name_prefix;
    this.role_arn = role_arn;
    this.schedule_expression = schedule_expression;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.cloudwatch_event_rule_id !== null) {
      ih['cloudwatch_event_rule_id'] = this.cloudwatch_event_rule_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.event_pattern !== null) {
      ih['event_pattern'] = this.event_pattern;
    }
    if (this.is_enabled !== true) {
      ih['is_enabled'] = this.is_enabled;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.role_arn !== null) {
      ih['role_arn'] = this.role_arn;
    }
    if (this.schedule_expression !== null) {
      ih['schedule_expression'] = this.schedule_expression;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cloudwatch_event_rule';
  }
}

export class Cloudwatch_event_target implements PcoreValue {
  readonly arn: string;
  readonly rule: string;
  readonly cloudwatch_event_target_id: string|null;
  readonly batch_target: Anon84|null;
  readonly ecs_target: Anon86|null;
  readonly input: string|null;
  readonly input_path: string|null;
  readonly input_transformer: Anon87|null;
  readonly kinesis_target: Anon88|null;
  readonly role_arn: string|null;
  readonly run_command_targets: Anon89[]|null;
  readonly sqs_target: Anon90|null;
  readonly target_id: string|null;

  constructor({
    arn,
    rule,
    cloudwatch_event_target_id = null,
    batch_target = null,
    ecs_target = null,
    input = null,
    input_path = null,
    input_transformer = null,
    kinesis_target = null,
    role_arn = null,
    run_command_targets = null,
    sqs_target = null,
    target_id = null
  }: {
    arn: string,
    rule: string,
    cloudwatch_event_target_id?: string|null,
    batch_target?: Anon84|null,
    ecs_target?: Anon86|null,
    input?: string|null,
    input_path?: string|null,
    input_transformer?: Anon87|null,
    kinesis_target?: Anon88|null,
    role_arn?: string|null,
    run_command_targets?: Anon89[]|null,
    sqs_target?: Anon90|null,
    target_id?: string|null
  }) {
    this.arn = arn;
    this.rule = rule;
    this.cloudwatch_event_target_id = cloudwatch_event_target_id;
    this.batch_target = batch_target;
    this.ecs_target = ecs_target;
    this.input = input;
    this.input_path = input_path;
    this.input_transformer = input_transformer;
    this.kinesis_target = kinesis_target;
    this.role_arn = role_arn;
    this.run_command_targets = run_command_targets;
    this.sqs_target = sqs_target;
    this.target_id = target_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['arn'] = this.arn;
    ih['rule'] = this.rule;
    if (this.cloudwatch_event_target_id !== null) {
      ih['cloudwatch_event_target_id'] = this.cloudwatch_event_target_id;
    }
    if (this.batch_target !== null) {
      ih['batch_target'] = this.batch_target;
    }
    if (this.ecs_target !== null) {
      ih['ecs_target'] = this.ecs_target;
    }
    if (this.input !== null) {
      ih['input'] = this.input;
    }
    if (this.input_path !== null) {
      ih['input_path'] = this.input_path;
    }
    if (this.input_transformer !== null) {
      ih['input_transformer'] = this.input_transformer;
    }
    if (this.kinesis_target !== null) {
      ih['kinesis_target'] = this.kinesis_target;
    }
    if (this.role_arn !== null) {
      ih['role_arn'] = this.role_arn;
    }
    if (this.run_command_targets !== null) {
      ih['run_command_targets'] = this.run_command_targets;
    }
    if (this.sqs_target !== null) {
      ih['sqs_target'] = this.sqs_target;
    }
    if (this.target_id !== null) {
      ih['target_id'] = this.target_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cloudwatch_event_target';
  }
}

export class Cloudwatch_log_destination implements PcoreValue {
  readonly name: string;
  readonly role_arn: string;
  readonly target_arn: string;
  readonly cloudwatch_log_destination_id: string|null;
  readonly arn: string|null;

  constructor({
    name,
    role_arn,
    target_arn,
    cloudwatch_log_destination_id = null,
    arn = null
  }: {
    name: string,
    role_arn: string,
    target_arn: string,
    cloudwatch_log_destination_id?: string|null,
    arn?: string|null
  }) {
    this.name = name;
    this.role_arn = role_arn;
    this.target_arn = target_arn;
    this.cloudwatch_log_destination_id = cloudwatch_log_destination_id;
    this.arn = arn;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['role_arn'] = this.role_arn;
    ih['target_arn'] = this.target_arn;
    if (this.cloudwatch_log_destination_id !== null) {
      ih['cloudwatch_log_destination_id'] = this.cloudwatch_log_destination_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cloudwatch_log_destination';
  }
}

export class Cloudwatch_log_destination_policy implements PcoreValue {
  readonly access_policy: string;
  readonly destination_name: string;
  readonly cloudwatch_log_destination_policy_id: string|null;

  constructor({
    access_policy,
    destination_name,
    cloudwatch_log_destination_policy_id = null
  }: {
    access_policy: string,
    destination_name: string,
    cloudwatch_log_destination_policy_id?: string|null
  }) {
    this.access_policy = access_policy;
    this.destination_name = destination_name;
    this.cloudwatch_log_destination_policy_id = cloudwatch_log_destination_policy_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['access_policy'] = this.access_policy;
    ih['destination_name'] = this.destination_name;
    if (this.cloudwatch_log_destination_policy_id !== null) {
      ih['cloudwatch_log_destination_policy_id'] = this.cloudwatch_log_destination_policy_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cloudwatch_log_destination_policy';
  }
}

export class Cloudwatch_log_group implements PcoreValue {
  readonly cloudwatch_log_group_id: string|null;
  readonly arn: string|null;
  readonly kms_key_id: string|null;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly retention_in_days: number;
  readonly tags: {[s: string]: string}|null;

  constructor({
    cloudwatch_log_group_id = null,
    arn = null,
    kms_key_id = null,
    name = null,
    name_prefix = null,
    retention_in_days = 0,
    tags = null
  }: {
    cloudwatch_log_group_id?: string|null,
    arn?: string|null,
    kms_key_id?: string|null,
    name?: string|null,
    name_prefix?: string|null,
    retention_in_days?: number,
    tags?: {[s: string]: string}|null
  }) {
    this.cloudwatch_log_group_id = cloudwatch_log_group_id;
    this.arn = arn;
    this.kms_key_id = kms_key_id;
    this.name = name;
    this.name_prefix = name_prefix;
    this.retention_in_days = retention_in_days;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.cloudwatch_log_group_id !== null) {
      ih['cloudwatch_log_group_id'] = this.cloudwatch_log_group_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.kms_key_id !== null) {
      ih['kms_key_id'] = this.kms_key_id;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.retention_in_days !== 0) {
      ih['retention_in_days'] = this.retention_in_days;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cloudwatch_log_group';
  }
}

export class Cloudwatch_log_metric_filter implements PcoreValue {
  readonly log_group_name: string;
  readonly name: string;
  readonly pattern: string;
  readonly cloudwatch_log_metric_filter_id: string|null;
  readonly metric_transformation: Anon91|null;

  constructor({
    log_group_name,
    name,
    pattern,
    cloudwatch_log_metric_filter_id = null,
    metric_transformation = null
  }: {
    log_group_name: string,
    name: string,
    pattern: string,
    cloudwatch_log_metric_filter_id?: string|null,
    metric_transformation?: Anon91|null
  }) {
    this.log_group_name = log_group_name;
    this.name = name;
    this.pattern = pattern;
    this.cloudwatch_log_metric_filter_id = cloudwatch_log_metric_filter_id;
    this.metric_transformation = metric_transformation;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['log_group_name'] = this.log_group_name;
    ih['name'] = this.name;
    ih['pattern'] = this.pattern;
    if (this.cloudwatch_log_metric_filter_id !== null) {
      ih['cloudwatch_log_metric_filter_id'] = this.cloudwatch_log_metric_filter_id;
    }
    if (this.metric_transformation !== null) {
      ih['metric_transformation'] = this.metric_transformation;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cloudwatch_log_metric_filter';
  }
}

export class Cloudwatch_log_resource_policy implements PcoreValue {
  readonly policy_document: string;
  readonly policy_name: string;
  readonly cloudwatch_log_resource_policy_id: string|null;

  constructor({
    policy_document,
    policy_name,
    cloudwatch_log_resource_policy_id = null
  }: {
    policy_document: string,
    policy_name: string,
    cloudwatch_log_resource_policy_id?: string|null
  }) {
    this.policy_document = policy_document;
    this.policy_name = policy_name;
    this.cloudwatch_log_resource_policy_id = cloudwatch_log_resource_policy_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['policy_document'] = this.policy_document;
    ih['policy_name'] = this.policy_name;
    if (this.cloudwatch_log_resource_policy_id !== null) {
      ih['cloudwatch_log_resource_policy_id'] = this.cloudwatch_log_resource_policy_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cloudwatch_log_resource_policy';
  }
}

export class Cloudwatch_log_stream implements PcoreValue {
  readonly log_group_name: string;
  readonly name: string;
  readonly cloudwatch_log_stream_id: string|null;
  readonly arn: string|null;

  constructor({
    log_group_name,
    name,
    cloudwatch_log_stream_id = null,
    arn = null
  }: {
    log_group_name: string,
    name: string,
    cloudwatch_log_stream_id?: string|null,
    arn?: string|null
  }) {
    this.log_group_name = log_group_name;
    this.name = name;
    this.cloudwatch_log_stream_id = cloudwatch_log_stream_id;
    this.arn = arn;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['log_group_name'] = this.log_group_name;
    ih['name'] = this.name;
    if (this.cloudwatch_log_stream_id !== null) {
      ih['cloudwatch_log_stream_id'] = this.cloudwatch_log_stream_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cloudwatch_log_stream';
  }
}

export class Cloudwatch_log_subscription_filter implements PcoreValue {
  readonly destination_arn: string;
  readonly filter_pattern: string;
  readonly log_group_name: string;
  readonly name: string;
  readonly cloudwatch_log_subscription_filter_id: string|null;
  readonly distribution: string|null;
  readonly role_arn: string|null;

  constructor({
    destination_arn,
    filter_pattern,
    log_group_name,
    name,
    cloudwatch_log_subscription_filter_id = null,
    distribution = null,
    role_arn = null
  }: {
    destination_arn: string,
    filter_pattern: string,
    log_group_name: string,
    name: string,
    cloudwatch_log_subscription_filter_id?: string|null,
    distribution?: string|null,
    role_arn?: string|null
  }) {
    this.destination_arn = destination_arn;
    this.filter_pattern = filter_pattern;
    this.log_group_name = log_group_name;
    this.name = name;
    this.cloudwatch_log_subscription_filter_id = cloudwatch_log_subscription_filter_id;
    this.distribution = distribution;
    this.role_arn = role_arn;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['destination_arn'] = this.destination_arn;
    ih['filter_pattern'] = this.filter_pattern;
    ih['log_group_name'] = this.log_group_name;
    ih['name'] = this.name;
    if (this.cloudwatch_log_subscription_filter_id !== null) {
      ih['cloudwatch_log_subscription_filter_id'] = this.cloudwatch_log_subscription_filter_id;
    }
    if (this.distribution !== null) {
      ih['distribution'] = this.distribution;
    }
    if (this.role_arn !== null) {
      ih['role_arn'] = this.role_arn;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cloudwatch_log_subscription_filter';
  }
}

export class Cloudwatch_metric_alarm implements PcoreValue {
  readonly alarm_name: string;
  readonly comparison_operator: string;
  readonly evaluation_periods: number;
  readonly metric_name: string;
  readonly namespace: string;
  readonly period: number;
  readonly threshold: number;
  readonly cloudwatch_metric_alarm_id: string|null;
  readonly actions_enabled: boolean;
  readonly alarm_actions: string[]|null;
  readonly alarm_description: string|null;
  readonly arn: string|null;
  readonly datapoints_to_alarm: number|null;
  readonly dimensions: {[s: string]: string}|null;
  readonly evaluate_low_sample_count_percentiles: string|null;
  readonly extended_statistic: string|null;
  readonly insufficient_data_actions: string[]|null;
  readonly ok_actions: string[]|null;
  readonly statistic: string|null;
  readonly treat_missing_data: string;
  readonly unit: string|null;

  constructor({
    alarm_name,
    comparison_operator,
    evaluation_periods,
    metric_name,
    namespace,
    period,
    threshold,
    cloudwatch_metric_alarm_id = null,
    actions_enabled = true,
    alarm_actions = null,
    alarm_description = null,
    arn = null,
    datapoints_to_alarm = null,
    dimensions = null,
    evaluate_low_sample_count_percentiles = null,
    extended_statistic = null,
    insufficient_data_actions = null,
    ok_actions = null,
    statistic = null,
    treat_missing_data = 'missing',
    unit = null
  }: {
    alarm_name: string,
    comparison_operator: string,
    evaluation_periods: number,
    metric_name: string,
    namespace: string,
    period: number,
    threshold: number,
    cloudwatch_metric_alarm_id?: string|null,
    actions_enabled?: boolean,
    alarm_actions?: string[]|null,
    alarm_description?: string|null,
    arn?: string|null,
    datapoints_to_alarm?: number|null,
    dimensions?: {[s: string]: string}|null,
    evaluate_low_sample_count_percentiles?: string|null,
    extended_statistic?: string|null,
    insufficient_data_actions?: string[]|null,
    ok_actions?: string[]|null,
    statistic?: string|null,
    treat_missing_data?: string,
    unit?: string|null
  }) {
    this.alarm_name = alarm_name;
    this.comparison_operator = comparison_operator;
    this.evaluation_periods = evaluation_periods;
    this.metric_name = metric_name;
    this.namespace = namespace;
    this.period = period;
    this.threshold = threshold;
    this.cloudwatch_metric_alarm_id = cloudwatch_metric_alarm_id;
    this.actions_enabled = actions_enabled;
    this.alarm_actions = alarm_actions;
    this.alarm_description = alarm_description;
    this.arn = arn;
    this.datapoints_to_alarm = datapoints_to_alarm;
    this.dimensions = dimensions;
    this.evaluate_low_sample_count_percentiles = evaluate_low_sample_count_percentiles;
    this.extended_statistic = extended_statistic;
    this.insufficient_data_actions = insufficient_data_actions;
    this.ok_actions = ok_actions;
    this.statistic = statistic;
    this.treat_missing_data = treat_missing_data;
    this.unit = unit;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['alarm_name'] = this.alarm_name;
    ih['comparison_operator'] = this.comparison_operator;
    ih['evaluation_periods'] = this.evaluation_periods;
    ih['metric_name'] = this.metric_name;
    ih['namespace'] = this.namespace;
    ih['period'] = this.period;
    ih['threshold'] = this.threshold;
    if (this.cloudwatch_metric_alarm_id !== null) {
      ih['cloudwatch_metric_alarm_id'] = this.cloudwatch_metric_alarm_id;
    }
    if (this.actions_enabled !== true) {
      ih['actions_enabled'] = this.actions_enabled;
    }
    if (this.alarm_actions !== null) {
      ih['alarm_actions'] = this.alarm_actions;
    }
    if (this.alarm_description !== null) {
      ih['alarm_description'] = this.alarm_description;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.datapoints_to_alarm !== null) {
      ih['datapoints_to_alarm'] = this.datapoints_to_alarm;
    }
    if (this.dimensions !== null) {
      ih['dimensions'] = this.dimensions;
    }
    if (this.evaluate_low_sample_count_percentiles !== null) {
      ih['evaluate_low_sample_count_percentiles'] = this.evaluate_low_sample_count_percentiles;
    }
    if (this.extended_statistic !== null) {
      ih['extended_statistic'] = this.extended_statistic;
    }
    if (this.insufficient_data_actions !== null) {
      ih['insufficient_data_actions'] = this.insufficient_data_actions;
    }
    if (this.ok_actions !== null) {
      ih['ok_actions'] = this.ok_actions;
    }
    if (this.statistic !== null) {
      ih['statistic'] = this.statistic;
    }
    if (this.treat_missing_data !== 'missing') {
      ih['treat_missing_data'] = this.treat_missing_data;
    }
    if (this.unit !== null) {
      ih['unit'] = this.unit;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cloudwatch_metric_alarm';
  }
}

export class Codebuild_project implements PcoreValue {
  readonly name: string;
  readonly service_role: string;
  readonly codebuild_project_id: string|null;
  readonly arn: string|null;
  readonly artifacts: Anon92|null;
  readonly badge_enabled: boolean;
  readonly badge_url: string|null;
  readonly build_timeout: number;
  readonly cache: Anon93|null;
  readonly description: string|null;
  readonly encryption_key: string|null;
  readonly environment: Anon95|null;
  readonly secondary_artifacts: Anon96[]|null;
  readonly secondary_sources: Anon98[]|null;
  readonly source: Anon99|null;
  readonly tags: {[s: string]: string}|null;
  readonly vpc_config: Anon100|null;

  constructor({
    name,
    service_role,
    codebuild_project_id = null,
    arn = null,
    artifacts = null,
    badge_enabled = false,
    badge_url = null,
    build_timeout = 60,
    cache = null,
    description = null,
    encryption_key = null,
    environment = null,
    secondary_artifacts = null,
    secondary_sources = null,
    source = null,
    tags = null,
    vpc_config = null
  }: {
    name: string,
    service_role: string,
    codebuild_project_id?: string|null,
    arn?: string|null,
    artifacts?: Anon92|null,
    badge_enabled?: boolean,
    badge_url?: string|null,
    build_timeout?: number,
    cache?: Anon93|null,
    description?: string|null,
    encryption_key?: string|null,
    environment?: Anon95|null,
    secondary_artifacts?: Anon96[]|null,
    secondary_sources?: Anon98[]|null,
    source?: Anon99|null,
    tags?: {[s: string]: string}|null,
    vpc_config?: Anon100|null
  }) {
    this.name = name;
    this.service_role = service_role;
    this.codebuild_project_id = codebuild_project_id;
    this.arn = arn;
    this.artifacts = artifacts;
    this.badge_enabled = badge_enabled;
    this.badge_url = badge_url;
    this.build_timeout = build_timeout;
    this.cache = cache;
    this.description = description;
    this.encryption_key = encryption_key;
    this.environment = environment;
    this.secondary_artifacts = secondary_artifacts;
    this.secondary_sources = secondary_sources;
    this.source = source;
    this.tags = tags;
    this.vpc_config = vpc_config;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['service_role'] = this.service_role;
    if (this.codebuild_project_id !== null) {
      ih['codebuild_project_id'] = this.codebuild_project_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.artifacts !== null) {
      ih['artifacts'] = this.artifacts;
    }
    if (this.badge_enabled !== false) {
      ih['badge_enabled'] = this.badge_enabled;
    }
    if (this.badge_url !== null) {
      ih['badge_url'] = this.badge_url;
    }
    if (this.build_timeout !== 60) {
      ih['build_timeout'] = this.build_timeout;
    }
    if (this.cache !== null) {
      ih['cache'] = this.cache;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.encryption_key !== null) {
      ih['encryption_key'] = this.encryption_key;
    }
    if (this.environment !== null) {
      ih['environment'] = this.environment;
    }
    if (this.secondary_artifacts !== null) {
      ih['secondary_artifacts'] = this.secondary_artifacts;
    }
    if (this.secondary_sources !== null) {
      ih['secondary_sources'] = this.secondary_sources;
    }
    if (this.source !== null) {
      ih['source'] = this.source;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpc_config !== null) {
      ih['vpc_config'] = this.vpc_config;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Codebuild_project';
  }
}

export class Codebuild_webhook implements PcoreValue {
  readonly project_name: string;
  readonly codebuild_webhook_id: string|null;
  readonly branch_filter: string|null;
  readonly payload_url: string|null;
  readonly secret: string|null;
  readonly url: string|null;

  constructor({
    project_name,
    codebuild_webhook_id = null,
    branch_filter = null,
    payload_url = null,
    secret = null,
    url = null
  }: {
    project_name: string,
    codebuild_webhook_id?: string|null,
    branch_filter?: string|null,
    payload_url?: string|null,
    secret?: string|null,
    url?: string|null
  }) {
    this.project_name = project_name;
    this.codebuild_webhook_id = codebuild_webhook_id;
    this.branch_filter = branch_filter;
    this.payload_url = payload_url;
    this.secret = secret;
    this.url = url;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['project_name'] = this.project_name;
    if (this.codebuild_webhook_id !== null) {
      ih['codebuild_webhook_id'] = this.codebuild_webhook_id;
    }
    if (this.branch_filter !== null) {
      ih['branch_filter'] = this.branch_filter;
    }
    if (this.payload_url !== null) {
      ih['payload_url'] = this.payload_url;
    }
    if (this.secret !== null) {
      ih['secret'] = this.secret;
    }
    if (this.url !== null) {
      ih['url'] = this.url;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Codebuild_webhook';
  }
}

export class Codecommit_repository implements PcoreValue {
  readonly repository_name: string;
  readonly codecommit_repository_id: string|null;
  readonly arn: string|null;
  readonly clone_url_http: string|null;
  readonly clone_url_ssh: string|null;
  readonly default_branch: string|null;
  readonly description: string|null;
  readonly repository_id: string|null;

  constructor({
    repository_name,
    codecommit_repository_id = null,
    arn = null,
    clone_url_http = null,
    clone_url_ssh = null,
    default_branch = null,
    description = null,
    repository_id = null
  }: {
    repository_name: string,
    codecommit_repository_id?: string|null,
    arn?: string|null,
    clone_url_http?: string|null,
    clone_url_ssh?: string|null,
    default_branch?: string|null,
    description?: string|null,
    repository_id?: string|null
  }) {
    this.repository_name = repository_name;
    this.codecommit_repository_id = codecommit_repository_id;
    this.arn = arn;
    this.clone_url_http = clone_url_http;
    this.clone_url_ssh = clone_url_ssh;
    this.default_branch = default_branch;
    this.description = description;
    this.repository_id = repository_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['repository_name'] = this.repository_name;
    if (this.codecommit_repository_id !== null) {
      ih['codecommit_repository_id'] = this.codecommit_repository_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.clone_url_http !== null) {
      ih['clone_url_http'] = this.clone_url_http;
    }
    if (this.clone_url_ssh !== null) {
      ih['clone_url_ssh'] = this.clone_url_ssh;
    }
    if (this.default_branch !== null) {
      ih['default_branch'] = this.default_branch;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.repository_id !== null) {
      ih['repository_id'] = this.repository_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Codecommit_repository';
  }
}

export class Codecommit_trigger implements PcoreValue {
  readonly repository_name: string;
  readonly trigger: Anon101[];
  readonly codecommit_trigger_id: string|null;
  readonly configuration_id: string|null;

  constructor({
    repository_name,
    trigger,
    codecommit_trigger_id = null,
    configuration_id = null
  }: {
    repository_name: string,
    trigger: Anon101[],
    codecommit_trigger_id?: string|null,
    configuration_id?: string|null
  }) {
    this.repository_name = repository_name;
    this.trigger = trigger;
    this.codecommit_trigger_id = codecommit_trigger_id;
    this.configuration_id = configuration_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['repository_name'] = this.repository_name;
    ih['trigger'] = this.trigger;
    if (this.codecommit_trigger_id !== null) {
      ih['codecommit_trigger_id'] = this.codecommit_trigger_id;
    }
    if (this.configuration_id !== null) {
      ih['configuration_id'] = this.configuration_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Codecommit_trigger';
  }
}

export class Codedeploy_app implements PcoreValue {
  readonly name: string;
  readonly codedeploy_app_id: string|null;
  readonly compute_platform: string;
  readonly unique_id: string|null;

  constructor({
    name,
    codedeploy_app_id = null,
    compute_platform = 'Server',
    unique_id = null
  }: {
    name: string,
    codedeploy_app_id?: string|null,
    compute_platform?: string,
    unique_id?: string|null
  }) {
    this.name = name;
    this.codedeploy_app_id = codedeploy_app_id;
    this.compute_platform = compute_platform;
    this.unique_id = unique_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.codedeploy_app_id !== null) {
      ih['codedeploy_app_id'] = this.codedeploy_app_id;
    }
    if (this.compute_platform !== 'Server') {
      ih['compute_platform'] = this.compute_platform;
    }
    if (this.unique_id !== null) {
      ih['unique_id'] = this.unique_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Codedeploy_app';
  }
}

export class Codedeploy_deployment_config implements PcoreValue {
  readonly deployment_config_name: string;
  readonly codedeploy_deployment_config_id: string|null;
  readonly compute_platform: string;
  readonly deployment_config_id: string|null;
  readonly minimum_healthy_hosts: Anon102|null;
  readonly traffic_routing_config: Anon104|null;

  constructor({
    deployment_config_name,
    codedeploy_deployment_config_id = null,
    compute_platform = 'Server',
    deployment_config_id = null,
    minimum_healthy_hosts = null,
    traffic_routing_config = null
  }: {
    deployment_config_name: string,
    codedeploy_deployment_config_id?: string|null,
    compute_platform?: string,
    deployment_config_id?: string|null,
    minimum_healthy_hosts?: Anon102|null,
    traffic_routing_config?: Anon104|null
  }) {
    this.deployment_config_name = deployment_config_name;
    this.codedeploy_deployment_config_id = codedeploy_deployment_config_id;
    this.compute_platform = compute_platform;
    this.deployment_config_id = deployment_config_id;
    this.minimum_healthy_hosts = minimum_healthy_hosts;
    this.traffic_routing_config = traffic_routing_config;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['deployment_config_name'] = this.deployment_config_name;
    if (this.codedeploy_deployment_config_id !== null) {
      ih['codedeploy_deployment_config_id'] = this.codedeploy_deployment_config_id;
    }
    if (this.compute_platform !== 'Server') {
      ih['compute_platform'] = this.compute_platform;
    }
    if (this.deployment_config_id !== null) {
      ih['deployment_config_id'] = this.deployment_config_id;
    }
    if (this.minimum_healthy_hosts !== null) {
      ih['minimum_healthy_hosts'] = this.minimum_healthy_hosts;
    }
    if (this.traffic_routing_config !== null) {
      ih['traffic_routing_config'] = this.traffic_routing_config;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Codedeploy_deployment_config';
  }
}

export class Codedeploy_deployment_group implements PcoreValue {
  readonly app_name: string;
  readonly deployment_group_name: string;
  readonly service_role_arn: string;
  readonly codedeploy_deployment_group_id: string|null;
  readonly alarm_configuration: Anon105|null;
  readonly auto_rollback_configuration: Anon106|null;
  readonly autoscaling_groups: string[]|null;
  readonly blue_green_deployment_config: Anon110|null;
  readonly deployment_config_name: string;
  readonly deployment_style: Anon111|null;
  readonly ec2_tag_filter: Anon112[]|null;
  readonly ec2_tag_set: Anon113[]|null;
  readonly ecs_service: Anon114|null;
  readonly load_balancer_info: Anon119|null;
  readonly on_premises_instance_tag_filter: Anon112[]|null;
  readonly trigger_configuration: Anon120[]|null;

  constructor({
    app_name,
    deployment_group_name,
    service_role_arn,
    codedeploy_deployment_group_id = null,
    alarm_configuration = null,
    auto_rollback_configuration = null,
    autoscaling_groups = null,
    blue_green_deployment_config = null,
    deployment_config_name = 'CodeDeployDefault.OneAtATime',
    deployment_style = null,
    ec2_tag_filter = null,
    ec2_tag_set = null,
    ecs_service = null,
    load_balancer_info = null,
    on_premises_instance_tag_filter = null,
    trigger_configuration = null
  }: {
    app_name: string,
    deployment_group_name: string,
    service_role_arn: string,
    codedeploy_deployment_group_id?: string|null,
    alarm_configuration?: Anon105|null,
    auto_rollback_configuration?: Anon106|null,
    autoscaling_groups?: string[]|null,
    blue_green_deployment_config?: Anon110|null,
    deployment_config_name?: string,
    deployment_style?: Anon111|null,
    ec2_tag_filter?: Anon112[]|null,
    ec2_tag_set?: Anon113[]|null,
    ecs_service?: Anon114|null,
    load_balancer_info?: Anon119|null,
    on_premises_instance_tag_filter?: Anon112[]|null,
    trigger_configuration?: Anon120[]|null
  }) {
    this.app_name = app_name;
    this.deployment_group_name = deployment_group_name;
    this.service_role_arn = service_role_arn;
    this.codedeploy_deployment_group_id = codedeploy_deployment_group_id;
    this.alarm_configuration = alarm_configuration;
    this.auto_rollback_configuration = auto_rollback_configuration;
    this.autoscaling_groups = autoscaling_groups;
    this.blue_green_deployment_config = blue_green_deployment_config;
    this.deployment_config_name = deployment_config_name;
    this.deployment_style = deployment_style;
    this.ec2_tag_filter = ec2_tag_filter;
    this.ec2_tag_set = ec2_tag_set;
    this.ecs_service = ecs_service;
    this.load_balancer_info = load_balancer_info;
    this.on_premises_instance_tag_filter = on_premises_instance_tag_filter;
    this.trigger_configuration = trigger_configuration;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['app_name'] = this.app_name;
    ih['deployment_group_name'] = this.deployment_group_name;
    ih['service_role_arn'] = this.service_role_arn;
    if (this.codedeploy_deployment_group_id !== null) {
      ih['codedeploy_deployment_group_id'] = this.codedeploy_deployment_group_id;
    }
    if (this.alarm_configuration !== null) {
      ih['alarm_configuration'] = this.alarm_configuration;
    }
    if (this.auto_rollback_configuration !== null) {
      ih['auto_rollback_configuration'] = this.auto_rollback_configuration;
    }
    if (this.autoscaling_groups !== null) {
      ih['autoscaling_groups'] = this.autoscaling_groups;
    }
    if (this.blue_green_deployment_config !== null) {
      ih['blue_green_deployment_config'] = this.blue_green_deployment_config;
    }
    if (this.deployment_config_name !== 'CodeDeployDefault.OneAtATime') {
      ih['deployment_config_name'] = this.deployment_config_name;
    }
    if (this.deployment_style !== null) {
      ih['deployment_style'] = this.deployment_style;
    }
    if (this.ec2_tag_filter !== null) {
      ih['ec2_tag_filter'] = this.ec2_tag_filter;
    }
    if (this.ec2_tag_set !== null) {
      ih['ec2_tag_set'] = this.ec2_tag_set;
    }
    if (this.ecs_service !== null) {
      ih['ecs_service'] = this.ecs_service;
    }
    if (this.load_balancer_info !== null) {
      ih['load_balancer_info'] = this.load_balancer_info;
    }
    if (this.on_premises_instance_tag_filter !== null) {
      ih['on_premises_instance_tag_filter'] = this.on_premises_instance_tag_filter;
    }
    if (this.trigger_configuration !== null) {
      ih['trigger_configuration'] = this.trigger_configuration;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Codedeploy_deployment_group';
  }
}

export class Codepipeline implements PcoreValue {
  readonly name: string;
  readonly role_arn: string;
  readonly stage: Anon122[];
  readonly codepipeline_id: string|null;
  readonly arn: string|null;
  readonly artifact_store: Anon124|null;

  constructor({
    name,
    role_arn,
    stage,
    codepipeline_id = null,
    arn = null,
    artifact_store = null
  }: {
    name: string,
    role_arn: string,
    stage: Anon122[],
    codepipeline_id?: string|null,
    arn?: string|null,
    artifact_store?: Anon124|null
  }) {
    this.name = name;
    this.role_arn = role_arn;
    this.stage = stage;
    this.codepipeline_id = codepipeline_id;
    this.arn = arn;
    this.artifact_store = artifact_store;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['role_arn'] = this.role_arn;
    ih['stage'] = this.stage;
    if (this.codepipeline_id !== null) {
      ih['codepipeline_id'] = this.codepipeline_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.artifact_store !== null) {
      ih['artifact_store'] = this.artifact_store;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Codepipeline';
  }
}

export class Codepipeline_webhook implements PcoreValue {
  readonly authentication: string;
  readonly filter: Anon125[];
  readonly name: string;
  readonly target_action: string;
  readonly target_pipeline: string;
  readonly codepipeline_webhook_id: string|null;
  readonly authentication_configuration: Anon126|null;
  readonly url: string|null;

  constructor({
    authentication,
    filter,
    name,
    target_action,
    target_pipeline,
    codepipeline_webhook_id = null,
    authentication_configuration = null,
    url = null
  }: {
    authentication: string,
    filter: Anon125[],
    name: string,
    target_action: string,
    target_pipeline: string,
    codepipeline_webhook_id?: string|null,
    authentication_configuration?: Anon126|null,
    url?: string|null
  }) {
    this.authentication = authentication;
    this.filter = filter;
    this.name = name;
    this.target_action = target_action;
    this.target_pipeline = target_pipeline;
    this.codepipeline_webhook_id = codepipeline_webhook_id;
    this.authentication_configuration = authentication_configuration;
    this.url = url;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['authentication'] = this.authentication;
    ih['filter'] = this.filter;
    ih['name'] = this.name;
    ih['target_action'] = this.target_action;
    ih['target_pipeline'] = this.target_pipeline;
    if (this.codepipeline_webhook_id !== null) {
      ih['codepipeline_webhook_id'] = this.codepipeline_webhook_id;
    }
    if (this.authentication_configuration !== null) {
      ih['authentication_configuration'] = this.authentication_configuration;
    }
    if (this.url !== null) {
      ih['url'] = this.url;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Codepipeline_webhook';
  }
}

export class Cognito_identity_pool implements PcoreValue {
  readonly identity_pool_name: string;
  readonly cognito_identity_pool_id: string|null;
  readonly allow_unauthenticated_identities: boolean;
  readonly arn: string|null;
  readonly cognito_identity_providers: Anon127[]|null;
  readonly developer_provider_name: string|null;
  readonly openid_connect_provider_arns: string[]|null;
  readonly saml_provider_arns: string[]|null;
  readonly supported_login_providers: {[s: string]: string}|null;

  constructor({
    identity_pool_name,
    cognito_identity_pool_id = null,
    allow_unauthenticated_identities = false,
    arn = null,
    cognito_identity_providers = null,
    developer_provider_name = null,
    openid_connect_provider_arns = null,
    saml_provider_arns = null,
    supported_login_providers = null
  }: {
    identity_pool_name: string,
    cognito_identity_pool_id?: string|null,
    allow_unauthenticated_identities?: boolean,
    arn?: string|null,
    cognito_identity_providers?: Anon127[]|null,
    developer_provider_name?: string|null,
    openid_connect_provider_arns?: string[]|null,
    saml_provider_arns?: string[]|null,
    supported_login_providers?: {[s: string]: string}|null
  }) {
    this.identity_pool_name = identity_pool_name;
    this.cognito_identity_pool_id = cognito_identity_pool_id;
    this.allow_unauthenticated_identities = allow_unauthenticated_identities;
    this.arn = arn;
    this.cognito_identity_providers = cognito_identity_providers;
    this.developer_provider_name = developer_provider_name;
    this.openid_connect_provider_arns = openid_connect_provider_arns;
    this.saml_provider_arns = saml_provider_arns;
    this.supported_login_providers = supported_login_providers;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['identity_pool_name'] = this.identity_pool_name;
    if (this.cognito_identity_pool_id !== null) {
      ih['cognito_identity_pool_id'] = this.cognito_identity_pool_id;
    }
    if (this.allow_unauthenticated_identities !== false) {
      ih['allow_unauthenticated_identities'] = this.allow_unauthenticated_identities;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.cognito_identity_providers !== null) {
      ih['cognito_identity_providers'] = this.cognito_identity_providers;
    }
    if (this.developer_provider_name !== null) {
      ih['developer_provider_name'] = this.developer_provider_name;
    }
    if (this.openid_connect_provider_arns !== null) {
      ih['openid_connect_provider_arns'] = this.openid_connect_provider_arns;
    }
    if (this.saml_provider_arns !== null) {
      ih['saml_provider_arns'] = this.saml_provider_arns;
    }
    if (this.supported_login_providers !== null) {
      ih['supported_login_providers'] = this.supported_login_providers;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cognito_identity_pool';
  }
}

export class Cognito_identity_pool_roles_attachment implements PcoreValue {
  readonly identity_pool_id: string;
  readonly roles: {[s: string]: Anon128};
  readonly cognito_identity_pool_roles_attachment_id: string|null;
  readonly role_mapping: Anon130[]|null;

  constructor({
    identity_pool_id,
    roles,
    cognito_identity_pool_roles_attachment_id = null,
    role_mapping = null
  }: {
    identity_pool_id: string,
    roles: {[s: string]: Anon128},
    cognito_identity_pool_roles_attachment_id?: string|null,
    role_mapping?: Anon130[]|null
  }) {
    this.identity_pool_id = identity_pool_id;
    this.roles = roles;
    this.cognito_identity_pool_roles_attachment_id = cognito_identity_pool_roles_attachment_id;
    this.role_mapping = role_mapping;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['identity_pool_id'] = this.identity_pool_id;
    ih['roles'] = this.roles;
    if (this.cognito_identity_pool_roles_attachment_id !== null) {
      ih['cognito_identity_pool_roles_attachment_id'] = this.cognito_identity_pool_roles_attachment_id;
    }
    if (this.role_mapping !== null) {
      ih['role_mapping'] = this.role_mapping;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cognito_identity_pool_roles_attachment';
  }
}

export class Cognito_identity_provider implements PcoreValue {
  readonly provider_details: {[s: string]: string};
  readonly provider_name: string;
  readonly provider_type: string;
  readonly user_pool_id: string;
  readonly cognito_identity_provider_id: string|null;
  readonly attribute_mapping: {[s: string]: string}|null;
  readonly idp_identifiers: string[]|null;

  constructor({
    provider_details,
    provider_name,
    provider_type,
    user_pool_id,
    cognito_identity_provider_id = null,
    attribute_mapping = null,
    idp_identifiers = null
  }: {
    provider_details: {[s: string]: string},
    provider_name: string,
    provider_type: string,
    user_pool_id: string,
    cognito_identity_provider_id?: string|null,
    attribute_mapping?: {[s: string]: string}|null,
    idp_identifiers?: string[]|null
  }) {
    this.provider_details = provider_details;
    this.provider_name = provider_name;
    this.provider_type = provider_type;
    this.user_pool_id = user_pool_id;
    this.cognito_identity_provider_id = cognito_identity_provider_id;
    this.attribute_mapping = attribute_mapping;
    this.idp_identifiers = idp_identifiers;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['provider_details'] = this.provider_details;
    ih['provider_name'] = this.provider_name;
    ih['provider_type'] = this.provider_type;
    ih['user_pool_id'] = this.user_pool_id;
    if (this.cognito_identity_provider_id !== null) {
      ih['cognito_identity_provider_id'] = this.cognito_identity_provider_id;
    }
    if (this.attribute_mapping !== null) {
      ih['attribute_mapping'] = this.attribute_mapping;
    }
    if (this.idp_identifiers !== null) {
      ih['idp_identifiers'] = this.idp_identifiers;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cognito_identity_provider';
  }
}

export class Cognito_resource_server implements PcoreValue {
  readonly identifier: string;
  readonly name: string;
  readonly user_pool_id: string;
  readonly cognito_resource_server_id: string|null;
  readonly scope: Anon131[]|null;
  readonly scope_identifiers: string[]|null;

  constructor({
    identifier,
    name,
    user_pool_id,
    cognito_resource_server_id = null,
    scope = null,
    scope_identifiers = null
  }: {
    identifier: string,
    name: string,
    user_pool_id: string,
    cognito_resource_server_id?: string|null,
    scope?: Anon131[]|null,
    scope_identifiers?: string[]|null
  }) {
    this.identifier = identifier;
    this.name = name;
    this.user_pool_id = user_pool_id;
    this.cognito_resource_server_id = cognito_resource_server_id;
    this.scope = scope;
    this.scope_identifiers = scope_identifiers;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['identifier'] = this.identifier;
    ih['name'] = this.name;
    ih['user_pool_id'] = this.user_pool_id;
    if (this.cognito_resource_server_id !== null) {
      ih['cognito_resource_server_id'] = this.cognito_resource_server_id;
    }
    if (this.scope !== null) {
      ih['scope'] = this.scope;
    }
    if (this.scope_identifiers !== null) {
      ih['scope_identifiers'] = this.scope_identifiers;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cognito_resource_server';
  }
}

export class Cognito_user_group implements PcoreValue {
  readonly name: string;
  readonly user_pool_id: string;
  readonly cognito_user_group_id: string|null;
  readonly description: string|null;
  readonly precedence: number|null;
  readonly role_arn: string|null;

  constructor({
    name,
    user_pool_id,
    cognito_user_group_id = null,
    description = null,
    precedence = null,
    role_arn = null
  }: {
    name: string,
    user_pool_id: string,
    cognito_user_group_id?: string|null,
    description?: string|null,
    precedence?: number|null,
    role_arn?: string|null
  }) {
    this.name = name;
    this.user_pool_id = user_pool_id;
    this.cognito_user_group_id = cognito_user_group_id;
    this.description = description;
    this.precedence = precedence;
    this.role_arn = role_arn;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['user_pool_id'] = this.user_pool_id;
    if (this.cognito_user_group_id !== null) {
      ih['cognito_user_group_id'] = this.cognito_user_group_id;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.precedence !== null) {
      ih['precedence'] = this.precedence;
    }
    if (this.role_arn !== null) {
      ih['role_arn'] = this.role_arn;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cognito_user_group';
  }
}

export class Cognito_user_pool implements PcoreValue {
  readonly name: string;
  readonly cognito_user_pool_id: string|null;
  readonly admin_create_user_config: Anon133|null;
  readonly alias_attributes: string[]|null;
  readonly arn: string|null;
  readonly auto_verified_attributes: string[]|null;
  readonly creation_date: string|null;
  readonly device_configuration: Anon134|null;
  readonly email_configuration: Anon135|null;
  readonly email_verification_message: string|null;
  readonly email_verification_subject: string|null;
  readonly endpoint: string|null;
  readonly lambda_config: Anon136|null;
  readonly last_modified_date: string|null;
  readonly mfa_configuration: string;
  readonly password_policy: Anon137|null;
  readonly schema: Anon140[]|null;
  readonly sms_authentication_message: string|null;
  readonly sms_configuration: Anon141|null;
  readonly sms_verification_message: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly username_attributes: string[]|null;
  readonly verification_message_template: Anon142|null;

  constructor({
    name,
    cognito_user_pool_id = null,
    admin_create_user_config = null,
    alias_attributes = null,
    arn = null,
    auto_verified_attributes = null,
    creation_date = null,
    device_configuration = null,
    email_configuration = null,
    email_verification_message = null,
    email_verification_subject = null,
    endpoint = null,
    lambda_config = null,
    last_modified_date = null,
    mfa_configuration = 'OFF',
    password_policy = null,
    schema = null,
    sms_authentication_message = null,
    sms_configuration = null,
    sms_verification_message = null,
    tags = null,
    username_attributes = null,
    verification_message_template = null
  }: {
    name: string,
    cognito_user_pool_id?: string|null,
    admin_create_user_config?: Anon133|null,
    alias_attributes?: string[]|null,
    arn?: string|null,
    auto_verified_attributes?: string[]|null,
    creation_date?: string|null,
    device_configuration?: Anon134|null,
    email_configuration?: Anon135|null,
    email_verification_message?: string|null,
    email_verification_subject?: string|null,
    endpoint?: string|null,
    lambda_config?: Anon136|null,
    last_modified_date?: string|null,
    mfa_configuration?: string,
    password_policy?: Anon137|null,
    schema?: Anon140[]|null,
    sms_authentication_message?: string|null,
    sms_configuration?: Anon141|null,
    sms_verification_message?: string|null,
    tags?: {[s: string]: string}|null,
    username_attributes?: string[]|null,
    verification_message_template?: Anon142|null
  }) {
    this.name = name;
    this.cognito_user_pool_id = cognito_user_pool_id;
    this.admin_create_user_config = admin_create_user_config;
    this.alias_attributes = alias_attributes;
    this.arn = arn;
    this.auto_verified_attributes = auto_verified_attributes;
    this.creation_date = creation_date;
    this.device_configuration = device_configuration;
    this.email_configuration = email_configuration;
    this.email_verification_message = email_verification_message;
    this.email_verification_subject = email_verification_subject;
    this.endpoint = endpoint;
    this.lambda_config = lambda_config;
    this.last_modified_date = last_modified_date;
    this.mfa_configuration = mfa_configuration;
    this.password_policy = password_policy;
    this.schema = schema;
    this.sms_authentication_message = sms_authentication_message;
    this.sms_configuration = sms_configuration;
    this.sms_verification_message = sms_verification_message;
    this.tags = tags;
    this.username_attributes = username_attributes;
    this.verification_message_template = verification_message_template;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.cognito_user_pool_id !== null) {
      ih['cognito_user_pool_id'] = this.cognito_user_pool_id;
    }
    if (this.admin_create_user_config !== null) {
      ih['admin_create_user_config'] = this.admin_create_user_config;
    }
    if (this.alias_attributes !== null) {
      ih['alias_attributes'] = this.alias_attributes;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.auto_verified_attributes !== null) {
      ih['auto_verified_attributes'] = this.auto_verified_attributes;
    }
    if (this.creation_date !== null) {
      ih['creation_date'] = this.creation_date;
    }
    if (this.device_configuration !== null) {
      ih['device_configuration'] = this.device_configuration;
    }
    if (this.email_configuration !== null) {
      ih['email_configuration'] = this.email_configuration;
    }
    if (this.email_verification_message !== null) {
      ih['email_verification_message'] = this.email_verification_message;
    }
    if (this.email_verification_subject !== null) {
      ih['email_verification_subject'] = this.email_verification_subject;
    }
    if (this.endpoint !== null) {
      ih['endpoint'] = this.endpoint;
    }
    if (this.lambda_config !== null) {
      ih['lambda_config'] = this.lambda_config;
    }
    if (this.last_modified_date !== null) {
      ih['last_modified_date'] = this.last_modified_date;
    }
    if (this.mfa_configuration !== 'OFF') {
      ih['mfa_configuration'] = this.mfa_configuration;
    }
    if (this.password_policy !== null) {
      ih['password_policy'] = this.password_policy;
    }
    if (this.schema !== null) {
      ih['schema'] = this.schema;
    }
    if (this.sms_authentication_message !== null) {
      ih['sms_authentication_message'] = this.sms_authentication_message;
    }
    if (this.sms_configuration !== null) {
      ih['sms_configuration'] = this.sms_configuration;
    }
    if (this.sms_verification_message !== null) {
      ih['sms_verification_message'] = this.sms_verification_message;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.username_attributes !== null) {
      ih['username_attributes'] = this.username_attributes;
    }
    if (this.verification_message_template !== null) {
      ih['verification_message_template'] = this.verification_message_template;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cognito_user_pool';
  }
}

export class Cognito_user_pool_client implements PcoreValue {
  readonly name: string;
  readonly user_pool_id: string;
  readonly cognito_user_pool_client_id: string|null;
  readonly allowed_oauth_flows: string[]|null;
  readonly allowed_oauth_flows_user_pool_client: boolean|null;
  readonly allowed_oauth_scopes: string[]|null;
  readonly callback_urls: string[]|null;
  readonly client_secret: string|null;
  readonly default_redirect_uri: string|null;
  readonly explicit_auth_flows: string[]|null;
  readonly generate_secret: boolean|null;
  readonly logout_urls: string[]|null;
  readonly read_attributes: string[]|null;
  readonly refresh_token_validity: number;
  readonly supported_identity_providers: string[]|null;
  readonly write_attributes: string[]|null;

  constructor({
    name,
    user_pool_id,
    cognito_user_pool_client_id = null,
    allowed_oauth_flows = null,
    allowed_oauth_flows_user_pool_client = null,
    allowed_oauth_scopes = null,
    callback_urls = null,
    client_secret = null,
    default_redirect_uri = null,
    explicit_auth_flows = null,
    generate_secret = null,
    logout_urls = null,
    read_attributes = null,
    refresh_token_validity = 30,
    supported_identity_providers = null,
    write_attributes = null
  }: {
    name: string,
    user_pool_id: string,
    cognito_user_pool_client_id?: string|null,
    allowed_oauth_flows?: string[]|null,
    allowed_oauth_flows_user_pool_client?: boolean|null,
    allowed_oauth_scopes?: string[]|null,
    callback_urls?: string[]|null,
    client_secret?: string|null,
    default_redirect_uri?: string|null,
    explicit_auth_flows?: string[]|null,
    generate_secret?: boolean|null,
    logout_urls?: string[]|null,
    read_attributes?: string[]|null,
    refresh_token_validity?: number,
    supported_identity_providers?: string[]|null,
    write_attributes?: string[]|null
  }) {
    this.name = name;
    this.user_pool_id = user_pool_id;
    this.cognito_user_pool_client_id = cognito_user_pool_client_id;
    this.allowed_oauth_flows = allowed_oauth_flows;
    this.allowed_oauth_flows_user_pool_client = allowed_oauth_flows_user_pool_client;
    this.allowed_oauth_scopes = allowed_oauth_scopes;
    this.callback_urls = callback_urls;
    this.client_secret = client_secret;
    this.default_redirect_uri = default_redirect_uri;
    this.explicit_auth_flows = explicit_auth_flows;
    this.generate_secret = generate_secret;
    this.logout_urls = logout_urls;
    this.read_attributes = read_attributes;
    this.refresh_token_validity = refresh_token_validity;
    this.supported_identity_providers = supported_identity_providers;
    this.write_attributes = write_attributes;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['user_pool_id'] = this.user_pool_id;
    if (this.cognito_user_pool_client_id !== null) {
      ih['cognito_user_pool_client_id'] = this.cognito_user_pool_client_id;
    }
    if (this.allowed_oauth_flows !== null) {
      ih['allowed_oauth_flows'] = this.allowed_oauth_flows;
    }
    if (this.allowed_oauth_flows_user_pool_client !== null) {
      ih['allowed_oauth_flows_user_pool_client'] = this.allowed_oauth_flows_user_pool_client;
    }
    if (this.allowed_oauth_scopes !== null) {
      ih['allowed_oauth_scopes'] = this.allowed_oauth_scopes;
    }
    if (this.callback_urls !== null) {
      ih['callback_urls'] = this.callback_urls;
    }
    if (this.client_secret !== null) {
      ih['client_secret'] = this.client_secret;
    }
    if (this.default_redirect_uri !== null) {
      ih['default_redirect_uri'] = this.default_redirect_uri;
    }
    if (this.explicit_auth_flows !== null) {
      ih['explicit_auth_flows'] = this.explicit_auth_flows;
    }
    if (this.generate_secret !== null) {
      ih['generate_secret'] = this.generate_secret;
    }
    if (this.logout_urls !== null) {
      ih['logout_urls'] = this.logout_urls;
    }
    if (this.read_attributes !== null) {
      ih['read_attributes'] = this.read_attributes;
    }
    if (this.refresh_token_validity !== 30) {
      ih['refresh_token_validity'] = this.refresh_token_validity;
    }
    if (this.supported_identity_providers !== null) {
      ih['supported_identity_providers'] = this.supported_identity_providers;
    }
    if (this.write_attributes !== null) {
      ih['write_attributes'] = this.write_attributes;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cognito_user_pool_client';
  }
}

export class Cognito_user_pool_domain implements PcoreValue {
  readonly domain: string;
  readonly user_pool_id: string;
  readonly cognito_user_pool_domain_id: string|null;
  readonly aws_account_id: string|null;
  readonly certificate_arn: string|null;
  readonly cloudfront_distribution_arn: string|null;
  readonly s3_bucket: string|null;
  readonly version: string|null;

  constructor({
    domain,
    user_pool_id,
    cognito_user_pool_domain_id = null,
    aws_account_id = null,
    certificate_arn = null,
    cloudfront_distribution_arn = null,
    s3_bucket = null,
    version = null
  }: {
    domain: string,
    user_pool_id: string,
    cognito_user_pool_domain_id?: string|null,
    aws_account_id?: string|null,
    certificate_arn?: string|null,
    cloudfront_distribution_arn?: string|null,
    s3_bucket?: string|null,
    version?: string|null
  }) {
    this.domain = domain;
    this.user_pool_id = user_pool_id;
    this.cognito_user_pool_domain_id = cognito_user_pool_domain_id;
    this.aws_account_id = aws_account_id;
    this.certificate_arn = certificate_arn;
    this.cloudfront_distribution_arn = cloudfront_distribution_arn;
    this.s3_bucket = s3_bucket;
    this.version = version;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['domain'] = this.domain;
    ih['user_pool_id'] = this.user_pool_id;
    if (this.cognito_user_pool_domain_id !== null) {
      ih['cognito_user_pool_domain_id'] = this.cognito_user_pool_domain_id;
    }
    if (this.aws_account_id !== null) {
      ih['aws_account_id'] = this.aws_account_id;
    }
    if (this.certificate_arn !== null) {
      ih['certificate_arn'] = this.certificate_arn;
    }
    if (this.cloudfront_distribution_arn !== null) {
      ih['cloudfront_distribution_arn'] = this.cloudfront_distribution_arn;
    }
    if (this.s3_bucket !== null) {
      ih['s3_bucket'] = this.s3_bucket;
    }
    if (this.version !== null) {
      ih['version'] = this.version;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Cognito_user_pool_domain';
  }
}

export class Config_aggregate_authorization implements PcoreValue {
  readonly account_id: string;
  readonly region: string;
  readonly config_aggregate_authorization_id: string|null;
  readonly arn: string|null;

  constructor({
    account_id,
    region,
    config_aggregate_authorization_id = null,
    arn = null
  }: {
    account_id: string,
    region: string,
    config_aggregate_authorization_id?: string|null,
    arn?: string|null
  }) {
    this.account_id = account_id;
    this.region = region;
    this.config_aggregate_authorization_id = config_aggregate_authorization_id;
    this.arn = arn;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['account_id'] = this.account_id;
    ih['region'] = this.region;
    if (this.config_aggregate_authorization_id !== null) {
      ih['config_aggregate_authorization_id'] = this.config_aggregate_authorization_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Config_aggregate_authorization';
  }
}

export class Config_config_rule implements PcoreValue {
  readonly name: string;
  readonly config_config_rule_id: string|null;
  readonly arn: string|null;
  readonly description: string|null;
  readonly input_parameters: string|null;
  readonly maximum_execution_frequency: string|null;
  readonly rule_id: string|null;
  readonly scope: Anon143|null;
  readonly source: Anon145|null;

  constructor({
    name,
    config_config_rule_id = null,
    arn = null,
    description = null,
    input_parameters = null,
    maximum_execution_frequency = null,
    rule_id = null,
    scope = null,
    source = null
  }: {
    name: string,
    config_config_rule_id?: string|null,
    arn?: string|null,
    description?: string|null,
    input_parameters?: string|null,
    maximum_execution_frequency?: string|null,
    rule_id?: string|null,
    scope?: Anon143|null,
    source?: Anon145|null
  }) {
    this.name = name;
    this.config_config_rule_id = config_config_rule_id;
    this.arn = arn;
    this.description = description;
    this.input_parameters = input_parameters;
    this.maximum_execution_frequency = maximum_execution_frequency;
    this.rule_id = rule_id;
    this.scope = scope;
    this.source = source;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.config_config_rule_id !== null) {
      ih['config_config_rule_id'] = this.config_config_rule_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.input_parameters !== null) {
      ih['input_parameters'] = this.input_parameters;
    }
    if (this.maximum_execution_frequency !== null) {
      ih['maximum_execution_frequency'] = this.maximum_execution_frequency;
    }
    if (this.rule_id !== null) {
      ih['rule_id'] = this.rule_id;
    }
    if (this.scope !== null) {
      ih['scope'] = this.scope;
    }
    if (this.source !== null) {
      ih['source'] = this.source;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Config_config_rule';
  }
}

export class Config_configuration_aggregator implements PcoreValue {
  readonly name: string;
  readonly config_configuration_aggregator_id: string|null;
  readonly account_aggregation_source: Anon146|null;
  readonly arn: string|null;
  readonly organization_aggregation_source: Anon147|null;

  constructor({
    name,
    config_configuration_aggregator_id = null,
    account_aggregation_source = null,
    arn = null,
    organization_aggregation_source = null
  }: {
    name: string,
    config_configuration_aggregator_id?: string|null,
    account_aggregation_source?: Anon146|null,
    arn?: string|null,
    organization_aggregation_source?: Anon147|null
  }) {
    this.name = name;
    this.config_configuration_aggregator_id = config_configuration_aggregator_id;
    this.account_aggregation_source = account_aggregation_source;
    this.arn = arn;
    this.organization_aggregation_source = organization_aggregation_source;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.config_configuration_aggregator_id !== null) {
      ih['config_configuration_aggregator_id'] = this.config_configuration_aggregator_id;
    }
    if (this.account_aggregation_source !== null) {
      ih['account_aggregation_source'] = this.account_aggregation_source;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.organization_aggregation_source !== null) {
      ih['organization_aggregation_source'] = this.organization_aggregation_source;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Config_configuration_aggregator';
  }
}

export class Config_configuration_recorder implements PcoreValue {
  readonly role_arn: string;
  readonly config_configuration_recorder_id: string|null;
  readonly name: string;
  readonly recording_group: Anon148|null;

  constructor({
    role_arn,
    config_configuration_recorder_id = null,
    name = 'default',
    recording_group = null
  }: {
    role_arn: string,
    config_configuration_recorder_id?: string|null,
    name?: string,
    recording_group?: Anon148|null
  }) {
    this.role_arn = role_arn;
    this.config_configuration_recorder_id = config_configuration_recorder_id;
    this.name = name;
    this.recording_group = recording_group;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['role_arn'] = this.role_arn;
    if (this.config_configuration_recorder_id !== null) {
      ih['config_configuration_recorder_id'] = this.config_configuration_recorder_id;
    }
    if (this.name !== 'default') {
      ih['name'] = this.name;
    }
    if (this.recording_group !== null) {
      ih['recording_group'] = this.recording_group;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Config_configuration_recorder';
  }
}

export class Config_configuration_recorder_status implements PcoreValue {
  readonly is_enabled: boolean;
  readonly name: string;
  readonly config_configuration_recorder_status_id: string|null;

  constructor({
    is_enabled,
    name,
    config_configuration_recorder_status_id = null
  }: {
    is_enabled: boolean,
    name: string,
    config_configuration_recorder_status_id?: string|null
  }) {
    this.is_enabled = is_enabled;
    this.name = name;
    this.config_configuration_recorder_status_id = config_configuration_recorder_status_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['is_enabled'] = this.is_enabled;
    ih['name'] = this.name;
    if (this.config_configuration_recorder_status_id !== null) {
      ih['config_configuration_recorder_status_id'] = this.config_configuration_recorder_status_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Config_configuration_recorder_status';
  }
}

export class Config_delivery_channel implements PcoreValue {
  readonly s3_bucket_name: string;
  readonly config_delivery_channel_id: string|null;
  readonly name: string;
  readonly s3_key_prefix: string|null;
  readonly snapshot_delivery_properties: Anon149|null;
  readonly sns_topic_arn: string|null;

  constructor({
    s3_bucket_name,
    config_delivery_channel_id = null,
    name = 'default',
    s3_key_prefix = null,
    snapshot_delivery_properties = null,
    sns_topic_arn = null
  }: {
    s3_bucket_name: string,
    config_delivery_channel_id?: string|null,
    name?: string,
    s3_key_prefix?: string|null,
    snapshot_delivery_properties?: Anon149|null,
    sns_topic_arn?: string|null
  }) {
    this.s3_bucket_name = s3_bucket_name;
    this.config_delivery_channel_id = config_delivery_channel_id;
    this.name = name;
    this.s3_key_prefix = s3_key_prefix;
    this.snapshot_delivery_properties = snapshot_delivery_properties;
    this.sns_topic_arn = sns_topic_arn;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['s3_bucket_name'] = this.s3_bucket_name;
    if (this.config_delivery_channel_id !== null) {
      ih['config_delivery_channel_id'] = this.config_delivery_channel_id;
    }
    if (this.name !== 'default') {
      ih['name'] = this.name;
    }
    if (this.s3_key_prefix !== null) {
      ih['s3_key_prefix'] = this.s3_key_prefix;
    }
    if (this.snapshot_delivery_properties !== null) {
      ih['snapshot_delivery_properties'] = this.snapshot_delivery_properties;
    }
    if (this.sns_topic_arn !== null) {
      ih['sns_topic_arn'] = this.sns_topic_arn;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Config_delivery_channel';
  }
}

export class Customer_gateway implements PcoreValue {
  readonly bgp_asn: number;
  readonly ip_address: string;
  readonly type: string;
  readonly customer_gateway_id: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    bgp_asn,
    ip_address,
    type,
    customer_gateway_id = null,
    tags = null
  }: {
    bgp_asn: number,
    ip_address: string,
    type: string,
    customer_gateway_id?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.bgp_asn = bgp_asn;
    this.ip_address = ip_address;
    this.type = type;
    this.customer_gateway_id = customer_gateway_id;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['bgp_asn'] = this.bgp_asn;
    ih['ip_address'] = this.ip_address;
    ih['type'] = this.type;
    if (this.customer_gateway_id !== null) {
      ih['customer_gateway_id'] = this.customer_gateway_id;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Customer_gateway';
  }
}

export class Datasync_agent implements PcoreValue {
  readonly datasync_agent_id: string|null;
  readonly activation_key: string|null;
  readonly arn: string|null;
  readonly ip_address: string|null;
  readonly name: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    datasync_agent_id = null,
    activation_key = null,
    arn = null,
    ip_address = null,
    name = null,
    tags = null
  }: {
    datasync_agent_id?: string|null,
    activation_key?: string|null,
    arn?: string|null,
    ip_address?: string|null,
    name?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.datasync_agent_id = datasync_agent_id;
    this.activation_key = activation_key;
    this.arn = arn;
    this.ip_address = ip_address;
    this.name = name;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.datasync_agent_id !== null) {
      ih['datasync_agent_id'] = this.datasync_agent_id;
    }
    if (this.activation_key !== null) {
      ih['activation_key'] = this.activation_key;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.ip_address !== null) {
      ih['ip_address'] = this.ip_address;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Datasync_agent';
  }
}

export class Datasync_location_efs implements PcoreValue {
  readonly efs_file_system_arn: string;
  readonly datasync_location_efs_id: string|null;
  readonly arn: string|null;
  readonly ec2_config: Anon150|null;
  readonly subdirectory: string;
  readonly tags: {[s: string]: string}|null;
  readonly uri: string|null;

  constructor({
    efs_file_system_arn,
    datasync_location_efs_id = null,
    arn = null,
    ec2_config = null,
    subdirectory = '/',
    tags = null,
    uri = null
  }: {
    efs_file_system_arn: string,
    datasync_location_efs_id?: string|null,
    arn?: string|null,
    ec2_config?: Anon150|null,
    subdirectory?: string,
    tags?: {[s: string]: string}|null,
    uri?: string|null
  }) {
    this.efs_file_system_arn = efs_file_system_arn;
    this.datasync_location_efs_id = datasync_location_efs_id;
    this.arn = arn;
    this.ec2_config = ec2_config;
    this.subdirectory = subdirectory;
    this.tags = tags;
    this.uri = uri;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['efs_file_system_arn'] = this.efs_file_system_arn;
    if (this.datasync_location_efs_id !== null) {
      ih['datasync_location_efs_id'] = this.datasync_location_efs_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.ec2_config !== null) {
      ih['ec2_config'] = this.ec2_config;
    }
    if (this.subdirectory !== '/') {
      ih['subdirectory'] = this.subdirectory;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.uri !== null) {
      ih['uri'] = this.uri;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Datasync_location_efs';
  }
}

export class Datasync_location_nfs implements PcoreValue {
  readonly server_hostname: string;
  readonly subdirectory: string;
  readonly datasync_location_nfs_id: string|null;
  readonly arn: string|null;
  readonly on_prem_config: Anon151|null;
  readonly tags: {[s: string]: string}|null;
  readonly uri: string|null;

  constructor({
    server_hostname,
    subdirectory,
    datasync_location_nfs_id = null,
    arn = null,
    on_prem_config = null,
    tags = null,
    uri = null
  }: {
    server_hostname: string,
    subdirectory: string,
    datasync_location_nfs_id?: string|null,
    arn?: string|null,
    on_prem_config?: Anon151|null,
    tags?: {[s: string]: string}|null,
    uri?: string|null
  }) {
    this.server_hostname = server_hostname;
    this.subdirectory = subdirectory;
    this.datasync_location_nfs_id = datasync_location_nfs_id;
    this.arn = arn;
    this.on_prem_config = on_prem_config;
    this.tags = tags;
    this.uri = uri;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['server_hostname'] = this.server_hostname;
    ih['subdirectory'] = this.subdirectory;
    if (this.datasync_location_nfs_id !== null) {
      ih['datasync_location_nfs_id'] = this.datasync_location_nfs_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.on_prem_config !== null) {
      ih['on_prem_config'] = this.on_prem_config;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.uri !== null) {
      ih['uri'] = this.uri;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Datasync_location_nfs';
  }
}

export class Datasync_location_s3 implements PcoreValue {
  readonly s3_bucket_arn: string;
  readonly subdirectory: string;
  readonly datasync_location_s3_id: string|null;
  readonly arn: string|null;
  readonly s3_config: Anon152|null;
  readonly tags: {[s: string]: string}|null;
  readonly uri: string|null;

  constructor({
    s3_bucket_arn,
    subdirectory,
    datasync_location_s3_id = null,
    arn = null,
    s3_config = null,
    tags = null,
    uri = null
  }: {
    s3_bucket_arn: string,
    subdirectory: string,
    datasync_location_s3_id?: string|null,
    arn?: string|null,
    s3_config?: Anon152|null,
    tags?: {[s: string]: string}|null,
    uri?: string|null
  }) {
    this.s3_bucket_arn = s3_bucket_arn;
    this.subdirectory = subdirectory;
    this.datasync_location_s3_id = datasync_location_s3_id;
    this.arn = arn;
    this.s3_config = s3_config;
    this.tags = tags;
    this.uri = uri;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['s3_bucket_arn'] = this.s3_bucket_arn;
    ih['subdirectory'] = this.subdirectory;
    if (this.datasync_location_s3_id !== null) {
      ih['datasync_location_s3_id'] = this.datasync_location_s3_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.s3_config !== null) {
      ih['s3_config'] = this.s3_config;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.uri !== null) {
      ih['uri'] = this.uri;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Datasync_location_s3';
  }
}

export class Datasync_task implements PcoreValue {
  readonly destination_location_arn: string;
  readonly source_location_arn: string;
  readonly datasync_task_id: string|null;
  readonly arn: string|null;
  readonly cloudwatch_log_group_arn: string|null;
  readonly name: string|null;
  readonly options: Anon153|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    destination_location_arn,
    source_location_arn,
    datasync_task_id = null,
    arn = null,
    cloudwatch_log_group_arn = null,
    name = null,
    options = null,
    tags = null
  }: {
    destination_location_arn: string,
    source_location_arn: string,
    datasync_task_id?: string|null,
    arn?: string|null,
    cloudwatch_log_group_arn?: string|null,
    name?: string|null,
    options?: Anon153|null,
    tags?: {[s: string]: string}|null
  }) {
    this.destination_location_arn = destination_location_arn;
    this.source_location_arn = source_location_arn;
    this.datasync_task_id = datasync_task_id;
    this.arn = arn;
    this.cloudwatch_log_group_arn = cloudwatch_log_group_arn;
    this.name = name;
    this.options = options;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['destination_location_arn'] = this.destination_location_arn;
    ih['source_location_arn'] = this.source_location_arn;
    if (this.datasync_task_id !== null) {
      ih['datasync_task_id'] = this.datasync_task_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.cloudwatch_log_group_arn !== null) {
      ih['cloudwatch_log_group_arn'] = this.cloudwatch_log_group_arn;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.options !== null) {
      ih['options'] = this.options;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Datasync_task';
  }
}

export class Dax_cluster implements PcoreValue {
  readonly cluster_name: string;
  readonly iam_role_arn: string;
  readonly node_type: string;
  readonly replication_factor: number;
  readonly dax_cluster_id: string|null;
  readonly arn: string|null;
  readonly availability_zones: string[]|null;
  readonly cluster_address: string|null;
  readonly configuration_endpoint: string|null;
  readonly description: string|null;
  readonly maintenance_window: string|null;
  readonly nodes: Anon154[]|null;
  readonly notification_topic_arn: string|null;
  readonly parameter_group_name: string|null;
  readonly port: number|null;
  readonly security_group_ids: string[]|null;
  readonly server_side_encryption: Anon155|null;
  readonly subnet_group_name: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    cluster_name,
    iam_role_arn,
    node_type,
    replication_factor,
    dax_cluster_id = null,
    arn = null,
    availability_zones = null,
    cluster_address = null,
    configuration_endpoint = null,
    description = null,
    maintenance_window = null,
    nodes = null,
    notification_topic_arn = null,
    parameter_group_name = null,
    port = null,
    security_group_ids = null,
    server_side_encryption = null,
    subnet_group_name = null,
    tags = null
  }: {
    cluster_name: string,
    iam_role_arn: string,
    node_type: string,
    replication_factor: number,
    dax_cluster_id?: string|null,
    arn?: string|null,
    availability_zones?: string[]|null,
    cluster_address?: string|null,
    configuration_endpoint?: string|null,
    description?: string|null,
    maintenance_window?: string|null,
    nodes?: Anon154[]|null,
    notification_topic_arn?: string|null,
    parameter_group_name?: string|null,
    port?: number|null,
    security_group_ids?: string[]|null,
    server_side_encryption?: Anon155|null,
    subnet_group_name?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.cluster_name = cluster_name;
    this.iam_role_arn = iam_role_arn;
    this.node_type = node_type;
    this.replication_factor = replication_factor;
    this.dax_cluster_id = dax_cluster_id;
    this.arn = arn;
    this.availability_zones = availability_zones;
    this.cluster_address = cluster_address;
    this.configuration_endpoint = configuration_endpoint;
    this.description = description;
    this.maintenance_window = maintenance_window;
    this.nodes = nodes;
    this.notification_topic_arn = notification_topic_arn;
    this.parameter_group_name = parameter_group_name;
    this.port = port;
    this.security_group_ids = security_group_ids;
    this.server_side_encryption = server_side_encryption;
    this.subnet_group_name = subnet_group_name;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['cluster_name'] = this.cluster_name;
    ih['iam_role_arn'] = this.iam_role_arn;
    ih['node_type'] = this.node_type;
    ih['replication_factor'] = this.replication_factor;
    if (this.dax_cluster_id !== null) {
      ih['dax_cluster_id'] = this.dax_cluster_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.availability_zones !== null) {
      ih['availability_zones'] = this.availability_zones;
    }
    if (this.cluster_address !== null) {
      ih['cluster_address'] = this.cluster_address;
    }
    if (this.configuration_endpoint !== null) {
      ih['configuration_endpoint'] = this.configuration_endpoint;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.maintenance_window !== null) {
      ih['maintenance_window'] = this.maintenance_window;
    }
    if (this.nodes !== null) {
      ih['nodes'] = this.nodes;
    }
    if (this.notification_topic_arn !== null) {
      ih['notification_topic_arn'] = this.notification_topic_arn;
    }
    if (this.parameter_group_name !== null) {
      ih['parameter_group_name'] = this.parameter_group_name;
    }
    if (this.port !== null) {
      ih['port'] = this.port;
    }
    if (this.security_group_ids !== null) {
      ih['security_group_ids'] = this.security_group_ids;
    }
    if (this.server_side_encryption !== null) {
      ih['server_side_encryption'] = this.server_side_encryption;
    }
    if (this.subnet_group_name !== null) {
      ih['subnet_group_name'] = this.subnet_group_name;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dax_cluster';
  }
}

export class Dax_parameter_group implements PcoreValue {
  readonly name: string;
  readonly dax_parameter_group_id: string|null;
  readonly description: string|null;
  readonly parameters: Anon29[]|null;

  constructor({
    name,
    dax_parameter_group_id = null,
    description = null,
    parameters = null
  }: {
    name: string,
    dax_parameter_group_id?: string|null,
    description?: string|null,
    parameters?: Anon29[]|null
  }) {
    this.name = name;
    this.dax_parameter_group_id = dax_parameter_group_id;
    this.description = description;
    this.parameters = parameters;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.dax_parameter_group_id !== null) {
      ih['dax_parameter_group_id'] = this.dax_parameter_group_id;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.parameters !== null) {
      ih['parameters'] = this.parameters;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dax_parameter_group';
  }
}

export class Dax_subnet_group implements PcoreValue {
  readonly name: string;
  readonly subnet_ids: string[];
  readonly dax_subnet_group_id: string|null;
  readonly description: string|null;
  readonly vpc_id: string|null;

  constructor({
    name,
    subnet_ids,
    dax_subnet_group_id = null,
    description = null,
    vpc_id = null
  }: {
    name: string,
    subnet_ids: string[],
    dax_subnet_group_id?: string|null,
    description?: string|null,
    vpc_id?: string|null
  }) {
    this.name = name;
    this.subnet_ids = subnet_ids;
    this.dax_subnet_group_id = dax_subnet_group_id;
    this.description = description;
    this.vpc_id = vpc_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['subnet_ids'] = this.subnet_ids;
    if (this.dax_subnet_group_id !== null) {
      ih['dax_subnet_group_id'] = this.dax_subnet_group_id;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.vpc_id !== null) {
      ih['vpc_id'] = this.vpc_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dax_subnet_group';
  }
}

export class Db_cluster_snapshot implements PcoreValue {
  readonly db_cluster_identifier: string;
  readonly db_cluster_snapshot_identifier: string;
  readonly db_cluster_snapshot_id: string|null;
  readonly allocated_storage: number|null;
  readonly availability_zones: string[]|null;
  readonly db_cluster_snapshot_arn: string|null;
  readonly engine: string|null;
  readonly engine_version: string|null;
  readonly kms_key_id: string|null;
  readonly license_model: string|null;
  readonly port: number|null;
  readonly snapshot_type: string|null;
  readonly source_db_cluster_snapshot_arn: string|null;
  readonly status: string|null;
  readonly storage_encrypted: boolean|null;
  readonly vpc_id: string|null;

  constructor({
    db_cluster_identifier,
    db_cluster_snapshot_identifier,
    db_cluster_snapshot_id = null,
    allocated_storage = null,
    availability_zones = null,
    db_cluster_snapshot_arn = null,
    engine = null,
    engine_version = null,
    kms_key_id = null,
    license_model = null,
    port = null,
    snapshot_type = null,
    source_db_cluster_snapshot_arn = null,
    status = null,
    storage_encrypted = null,
    vpc_id = null
  }: {
    db_cluster_identifier: string,
    db_cluster_snapshot_identifier: string,
    db_cluster_snapshot_id?: string|null,
    allocated_storage?: number|null,
    availability_zones?: string[]|null,
    db_cluster_snapshot_arn?: string|null,
    engine?: string|null,
    engine_version?: string|null,
    kms_key_id?: string|null,
    license_model?: string|null,
    port?: number|null,
    snapshot_type?: string|null,
    source_db_cluster_snapshot_arn?: string|null,
    status?: string|null,
    storage_encrypted?: boolean|null,
    vpc_id?: string|null
  }) {
    this.db_cluster_identifier = db_cluster_identifier;
    this.db_cluster_snapshot_identifier = db_cluster_snapshot_identifier;
    this.db_cluster_snapshot_id = db_cluster_snapshot_id;
    this.allocated_storage = allocated_storage;
    this.availability_zones = availability_zones;
    this.db_cluster_snapshot_arn = db_cluster_snapshot_arn;
    this.engine = engine;
    this.engine_version = engine_version;
    this.kms_key_id = kms_key_id;
    this.license_model = license_model;
    this.port = port;
    this.snapshot_type = snapshot_type;
    this.source_db_cluster_snapshot_arn = source_db_cluster_snapshot_arn;
    this.status = status;
    this.storage_encrypted = storage_encrypted;
    this.vpc_id = vpc_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['db_cluster_identifier'] = this.db_cluster_identifier;
    ih['db_cluster_snapshot_identifier'] = this.db_cluster_snapshot_identifier;
    if (this.db_cluster_snapshot_id !== null) {
      ih['db_cluster_snapshot_id'] = this.db_cluster_snapshot_id;
    }
    if (this.allocated_storage !== null) {
      ih['allocated_storage'] = this.allocated_storage;
    }
    if (this.availability_zones !== null) {
      ih['availability_zones'] = this.availability_zones;
    }
    if (this.db_cluster_snapshot_arn !== null) {
      ih['db_cluster_snapshot_arn'] = this.db_cluster_snapshot_arn;
    }
    if (this.engine !== null) {
      ih['engine'] = this.engine;
    }
    if (this.engine_version !== null) {
      ih['engine_version'] = this.engine_version;
    }
    if (this.kms_key_id !== null) {
      ih['kms_key_id'] = this.kms_key_id;
    }
    if (this.license_model !== null) {
      ih['license_model'] = this.license_model;
    }
    if (this.port !== null) {
      ih['port'] = this.port;
    }
    if (this.snapshot_type !== null) {
      ih['snapshot_type'] = this.snapshot_type;
    }
    if (this.source_db_cluster_snapshot_arn !== null) {
      ih['source_db_cluster_snapshot_arn'] = this.source_db_cluster_snapshot_arn;
    }
    if (this.status !== null) {
      ih['status'] = this.status;
    }
    if (this.storage_encrypted !== null) {
      ih['storage_encrypted'] = this.storage_encrypted;
    }
    if (this.vpc_id !== null) {
      ih['vpc_id'] = this.vpc_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Db_cluster_snapshot';
  }
}

export class Db_event_subscription implements PcoreValue {
  readonly sns_topic: string;
  readonly db_event_subscription_id: string|null;
  readonly arn: string|null;
  readonly customer_aws_id: string|null;
  readonly enabled: boolean;
  readonly event_categories: string[]|null;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly source_ids: string[]|null;
  readonly source_type: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    sns_topic,
    db_event_subscription_id = null,
    arn = null,
    customer_aws_id = null,
    enabled = true,
    event_categories = null,
    name = null,
    name_prefix = null,
    source_ids = null,
    source_type = null,
    tags = null
  }: {
    sns_topic: string,
    db_event_subscription_id?: string|null,
    arn?: string|null,
    customer_aws_id?: string|null,
    enabled?: boolean,
    event_categories?: string[]|null,
    name?: string|null,
    name_prefix?: string|null,
    source_ids?: string[]|null,
    source_type?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.sns_topic = sns_topic;
    this.db_event_subscription_id = db_event_subscription_id;
    this.arn = arn;
    this.customer_aws_id = customer_aws_id;
    this.enabled = enabled;
    this.event_categories = event_categories;
    this.name = name;
    this.name_prefix = name_prefix;
    this.source_ids = source_ids;
    this.source_type = source_type;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['sns_topic'] = this.sns_topic;
    if (this.db_event_subscription_id !== null) {
      ih['db_event_subscription_id'] = this.db_event_subscription_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.customer_aws_id !== null) {
      ih['customer_aws_id'] = this.customer_aws_id;
    }
    if (this.enabled !== true) {
      ih['enabled'] = this.enabled;
    }
    if (this.event_categories !== null) {
      ih['event_categories'] = this.event_categories;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.source_ids !== null) {
      ih['source_ids'] = this.source_ids;
    }
    if (this.source_type !== null) {
      ih['source_type'] = this.source_type;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Db_event_subscription';
  }
}

export class Db_instance implements PcoreValue {
  readonly instance_class: string;
  readonly db_instance_id: string|null;
  readonly address: string|null;
  readonly allocated_storage: number|null;
  readonly allow_major_version_upgrade: boolean|null;
  readonly apply_immediately: boolean|null;
  readonly arn: string|null;
  readonly auto_minor_version_upgrade: boolean;
  readonly availability_zone: string|null;
  readonly backup_retention_period: number|null;
  readonly backup_window: string|null;
  readonly ca_cert_identifier: string|null;
  readonly character_set_name: string|null;
  readonly copy_tags_to_snapshot: boolean;
  readonly db_subnet_group_name: string|null;
  readonly deletion_protection: boolean|null;
  readonly domain: string|null;
  readonly domain_iam_role_name: string|null;
  readonly enabled_cloudwatch_logs_exports: string[]|null;
  readonly endpoint: string|null;
  readonly engine: string|null;
  readonly engine_version: string|null;
  readonly final_snapshot_identifier: string|null;
  readonly hosted_zone_id: string|null;
  readonly iam_database_authentication_enabled: boolean|null;
  readonly identifier: string|null;
  readonly identifier_prefix: string|null;
  readonly iops: number|null;
  readonly kms_key_id: string|null;
  readonly license_model: string|null;
  readonly maintenance_window: string|null;
  readonly monitoring_interval: number;
  readonly monitoring_role_arn: string|null;
  readonly multi_az: boolean|null;
  readonly name: string|null;
  readonly option_group_name: string|null;
  readonly parameter_group_name: string|null;
  readonly password: string|null;
  readonly port: number|null;
  readonly publicly_accessible: boolean;
  readonly replicas: string[]|null;
  readonly replicate_source_db: string|null;
  readonly resource_id: string|null;
  readonly s3_import: Anon156|null;
  readonly security_group_names: string[]|null;
  readonly skip_final_snapshot: boolean;
  readonly snapshot_identifier: string|null;
  readonly status: string|null;
  readonly storage_encrypted: boolean|null;
  readonly storage_type: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly timezone: string|null;
  readonly username: string|null;
  readonly vpc_security_group_ids: string[]|null;

  constructor({
    instance_class,
    db_instance_id = null,
    address = null,
    allocated_storage = null,
    allow_major_version_upgrade = null,
    apply_immediately = null,
    arn = null,
    auto_minor_version_upgrade = true,
    availability_zone = null,
    backup_retention_period = null,
    backup_window = null,
    ca_cert_identifier = null,
    character_set_name = null,
    copy_tags_to_snapshot = false,
    db_subnet_group_name = null,
    deletion_protection = null,
    domain = null,
    domain_iam_role_name = null,
    enabled_cloudwatch_logs_exports = null,
    endpoint = null,
    engine = null,
    engine_version = null,
    final_snapshot_identifier = null,
    hosted_zone_id = null,
    iam_database_authentication_enabled = null,
    identifier = null,
    identifier_prefix = null,
    iops = null,
    kms_key_id = null,
    license_model = null,
    maintenance_window = null,
    monitoring_interval = 0,
    monitoring_role_arn = null,
    multi_az = null,
    name = null,
    option_group_name = null,
    parameter_group_name = null,
    password = null,
    port = null,
    publicly_accessible = false,
    replicas = null,
    replicate_source_db = null,
    resource_id = null,
    s3_import = null,
    security_group_names = null,
    skip_final_snapshot = false,
    snapshot_identifier = null,
    status = null,
    storage_encrypted = null,
    storage_type = null,
    tags = null,
    timezone = null,
    username = null,
    vpc_security_group_ids = null
  }: {
    instance_class: string,
    db_instance_id?: string|null,
    address?: string|null,
    allocated_storage?: number|null,
    allow_major_version_upgrade?: boolean|null,
    apply_immediately?: boolean|null,
    arn?: string|null,
    auto_minor_version_upgrade?: boolean,
    availability_zone?: string|null,
    backup_retention_period?: number|null,
    backup_window?: string|null,
    ca_cert_identifier?: string|null,
    character_set_name?: string|null,
    copy_tags_to_snapshot?: boolean,
    db_subnet_group_name?: string|null,
    deletion_protection?: boolean|null,
    domain?: string|null,
    domain_iam_role_name?: string|null,
    enabled_cloudwatch_logs_exports?: string[]|null,
    endpoint?: string|null,
    engine?: string|null,
    engine_version?: string|null,
    final_snapshot_identifier?: string|null,
    hosted_zone_id?: string|null,
    iam_database_authentication_enabled?: boolean|null,
    identifier?: string|null,
    identifier_prefix?: string|null,
    iops?: number|null,
    kms_key_id?: string|null,
    license_model?: string|null,
    maintenance_window?: string|null,
    monitoring_interval?: number,
    monitoring_role_arn?: string|null,
    multi_az?: boolean|null,
    name?: string|null,
    option_group_name?: string|null,
    parameter_group_name?: string|null,
    password?: string|null,
    port?: number|null,
    publicly_accessible?: boolean,
    replicas?: string[]|null,
    replicate_source_db?: string|null,
    resource_id?: string|null,
    s3_import?: Anon156|null,
    security_group_names?: string[]|null,
    skip_final_snapshot?: boolean,
    snapshot_identifier?: string|null,
    status?: string|null,
    storage_encrypted?: boolean|null,
    storage_type?: string|null,
    tags?: {[s: string]: string}|null,
    timezone?: string|null,
    username?: string|null,
    vpc_security_group_ids?: string[]|null
  }) {
    this.instance_class = instance_class;
    this.db_instance_id = db_instance_id;
    this.address = address;
    this.allocated_storage = allocated_storage;
    this.allow_major_version_upgrade = allow_major_version_upgrade;
    this.apply_immediately = apply_immediately;
    this.arn = arn;
    this.auto_minor_version_upgrade = auto_minor_version_upgrade;
    this.availability_zone = availability_zone;
    this.backup_retention_period = backup_retention_period;
    this.backup_window = backup_window;
    this.ca_cert_identifier = ca_cert_identifier;
    this.character_set_name = character_set_name;
    this.copy_tags_to_snapshot = copy_tags_to_snapshot;
    this.db_subnet_group_name = db_subnet_group_name;
    this.deletion_protection = deletion_protection;
    this.domain = domain;
    this.domain_iam_role_name = domain_iam_role_name;
    this.enabled_cloudwatch_logs_exports = enabled_cloudwatch_logs_exports;
    this.endpoint = endpoint;
    this.engine = engine;
    this.engine_version = engine_version;
    this.final_snapshot_identifier = final_snapshot_identifier;
    this.hosted_zone_id = hosted_zone_id;
    this.iam_database_authentication_enabled = iam_database_authentication_enabled;
    this.identifier = identifier;
    this.identifier_prefix = identifier_prefix;
    this.iops = iops;
    this.kms_key_id = kms_key_id;
    this.license_model = license_model;
    this.maintenance_window = maintenance_window;
    this.monitoring_interval = monitoring_interval;
    this.monitoring_role_arn = monitoring_role_arn;
    this.multi_az = multi_az;
    this.name = name;
    this.option_group_name = option_group_name;
    this.parameter_group_name = parameter_group_name;
    this.password = password;
    this.port = port;
    this.publicly_accessible = publicly_accessible;
    this.replicas = replicas;
    this.replicate_source_db = replicate_source_db;
    this.resource_id = resource_id;
    this.s3_import = s3_import;
    this.security_group_names = security_group_names;
    this.skip_final_snapshot = skip_final_snapshot;
    this.snapshot_identifier = snapshot_identifier;
    this.status = status;
    this.storage_encrypted = storage_encrypted;
    this.storage_type = storage_type;
    this.tags = tags;
    this.timezone = timezone;
    this.username = username;
    this.vpc_security_group_ids = vpc_security_group_ids;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['instance_class'] = this.instance_class;
    if (this.db_instance_id !== null) {
      ih['db_instance_id'] = this.db_instance_id;
    }
    if (this.address !== null) {
      ih['address'] = this.address;
    }
    if (this.allocated_storage !== null) {
      ih['allocated_storage'] = this.allocated_storage;
    }
    if (this.allow_major_version_upgrade !== null) {
      ih['allow_major_version_upgrade'] = this.allow_major_version_upgrade;
    }
    if (this.apply_immediately !== null) {
      ih['apply_immediately'] = this.apply_immediately;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.auto_minor_version_upgrade !== true) {
      ih['auto_minor_version_upgrade'] = this.auto_minor_version_upgrade;
    }
    if (this.availability_zone !== null) {
      ih['availability_zone'] = this.availability_zone;
    }
    if (this.backup_retention_period !== null) {
      ih['backup_retention_period'] = this.backup_retention_period;
    }
    if (this.backup_window !== null) {
      ih['backup_window'] = this.backup_window;
    }
    if (this.ca_cert_identifier !== null) {
      ih['ca_cert_identifier'] = this.ca_cert_identifier;
    }
    if (this.character_set_name !== null) {
      ih['character_set_name'] = this.character_set_name;
    }
    if (this.copy_tags_to_snapshot !== false) {
      ih['copy_tags_to_snapshot'] = this.copy_tags_to_snapshot;
    }
    if (this.db_subnet_group_name !== null) {
      ih['db_subnet_group_name'] = this.db_subnet_group_name;
    }
    if (this.deletion_protection !== null) {
      ih['deletion_protection'] = this.deletion_protection;
    }
    if (this.domain !== null) {
      ih['domain'] = this.domain;
    }
    if (this.domain_iam_role_name !== null) {
      ih['domain_iam_role_name'] = this.domain_iam_role_name;
    }
    if (this.enabled_cloudwatch_logs_exports !== null) {
      ih['enabled_cloudwatch_logs_exports'] = this.enabled_cloudwatch_logs_exports;
    }
    if (this.endpoint !== null) {
      ih['endpoint'] = this.endpoint;
    }
    if (this.engine !== null) {
      ih['engine'] = this.engine;
    }
    if (this.engine_version !== null) {
      ih['engine_version'] = this.engine_version;
    }
    if (this.final_snapshot_identifier !== null) {
      ih['final_snapshot_identifier'] = this.final_snapshot_identifier;
    }
    if (this.hosted_zone_id !== null) {
      ih['hosted_zone_id'] = this.hosted_zone_id;
    }
    if (this.iam_database_authentication_enabled !== null) {
      ih['iam_database_authentication_enabled'] = this.iam_database_authentication_enabled;
    }
    if (this.identifier !== null) {
      ih['identifier'] = this.identifier;
    }
    if (this.identifier_prefix !== null) {
      ih['identifier_prefix'] = this.identifier_prefix;
    }
    if (this.iops !== null) {
      ih['iops'] = this.iops;
    }
    if (this.kms_key_id !== null) {
      ih['kms_key_id'] = this.kms_key_id;
    }
    if (this.license_model !== null) {
      ih['license_model'] = this.license_model;
    }
    if (this.maintenance_window !== null) {
      ih['maintenance_window'] = this.maintenance_window;
    }
    if (this.monitoring_interval !== 0) {
      ih['monitoring_interval'] = this.monitoring_interval;
    }
    if (this.monitoring_role_arn !== null) {
      ih['monitoring_role_arn'] = this.monitoring_role_arn;
    }
    if (this.multi_az !== null) {
      ih['multi_az'] = this.multi_az;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.option_group_name !== null) {
      ih['option_group_name'] = this.option_group_name;
    }
    if (this.parameter_group_name !== null) {
      ih['parameter_group_name'] = this.parameter_group_name;
    }
    if (this.password !== null) {
      ih['password'] = this.password;
    }
    if (this.port !== null) {
      ih['port'] = this.port;
    }
    if (this.publicly_accessible !== false) {
      ih['publicly_accessible'] = this.publicly_accessible;
    }
    if (this.replicas !== null) {
      ih['replicas'] = this.replicas;
    }
    if (this.replicate_source_db !== null) {
      ih['replicate_source_db'] = this.replicate_source_db;
    }
    if (this.resource_id !== null) {
      ih['resource_id'] = this.resource_id;
    }
    if (this.s3_import !== null) {
      ih['s3_import'] = this.s3_import;
    }
    if (this.security_group_names !== null) {
      ih['security_group_names'] = this.security_group_names;
    }
    if (this.skip_final_snapshot !== false) {
      ih['skip_final_snapshot'] = this.skip_final_snapshot;
    }
    if (this.snapshot_identifier !== null) {
      ih['snapshot_identifier'] = this.snapshot_identifier;
    }
    if (this.status !== null) {
      ih['status'] = this.status;
    }
    if (this.storage_encrypted !== null) {
      ih['storage_encrypted'] = this.storage_encrypted;
    }
    if (this.storage_type !== null) {
      ih['storage_type'] = this.storage_type;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.timezone !== null) {
      ih['timezone'] = this.timezone;
    }
    if (this.username !== null) {
      ih['username'] = this.username;
    }
    if (this.vpc_security_group_ids !== null) {
      ih['vpc_security_group_ids'] = this.vpc_security_group_ids;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Db_instance';
  }
}

export class Db_option_group implements PcoreValue {
  readonly engine_name: string;
  readonly major_engine_version: string;
  readonly db_option_group_id: string|null;
  readonly arn: string|null;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly option: Anon157[]|null;
  readonly option_group_description: string;
  readonly tags: {[s: string]: string}|null;

  constructor({
    engine_name,
    major_engine_version,
    db_option_group_id = null,
    arn = null,
    name = null,
    name_prefix = null,
    option = null,
    option_group_description = 'Managed by Terraform',
    tags = null
  }: {
    engine_name: string,
    major_engine_version: string,
    db_option_group_id?: string|null,
    arn?: string|null,
    name?: string|null,
    name_prefix?: string|null,
    option?: Anon157[]|null,
    option_group_description?: string,
    tags?: {[s: string]: string}|null
  }) {
    this.engine_name = engine_name;
    this.major_engine_version = major_engine_version;
    this.db_option_group_id = db_option_group_id;
    this.arn = arn;
    this.name = name;
    this.name_prefix = name_prefix;
    this.option = option;
    this.option_group_description = option_group_description;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['engine_name'] = this.engine_name;
    ih['major_engine_version'] = this.major_engine_version;
    if (this.db_option_group_id !== null) {
      ih['db_option_group_id'] = this.db_option_group_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.option !== null) {
      ih['option'] = this.option;
    }
    if (this.option_group_description !== 'Managed by Terraform') {
      ih['option_group_description'] = this.option_group_description;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Db_option_group';
  }
}

export class Db_parameter_group implements PcoreValue {
  readonly family: string;
  readonly db_parameter_group_id: string|null;
  readonly arn: string|null;
  readonly description: string;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly parameter: Anon158[]|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    family,
    db_parameter_group_id = null,
    arn = null,
    description = 'Managed by Terraform',
    name = null,
    name_prefix = null,
    parameter = null,
    tags = null
  }: {
    family: string,
    db_parameter_group_id?: string|null,
    arn?: string|null,
    description?: string,
    name?: string|null,
    name_prefix?: string|null,
    parameter?: Anon158[]|null,
    tags?: {[s: string]: string}|null
  }) {
    this.family = family;
    this.db_parameter_group_id = db_parameter_group_id;
    this.arn = arn;
    this.description = description;
    this.name = name;
    this.name_prefix = name_prefix;
    this.parameter = parameter;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['family'] = this.family;
    if (this.db_parameter_group_id !== null) {
      ih['db_parameter_group_id'] = this.db_parameter_group_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== 'Managed by Terraform') {
      ih['description'] = this.description;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.parameter !== null) {
      ih['parameter'] = this.parameter;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Db_parameter_group';
  }
}

export class Db_security_group implements PcoreValue {
  readonly ingress: Anon159[];
  readonly name: string;
  readonly db_security_group_id: string|null;
  readonly arn: string|null;
  readonly description: string;
  readonly tags: {[s: string]: string}|null;

  constructor({
    ingress,
    name,
    db_security_group_id = null,
    arn = null,
    description = 'Managed by Terraform',
    tags = null
  }: {
    ingress: Anon159[],
    name: string,
    db_security_group_id?: string|null,
    arn?: string|null,
    description?: string,
    tags?: {[s: string]: string}|null
  }) {
    this.ingress = ingress;
    this.name = name;
    this.db_security_group_id = db_security_group_id;
    this.arn = arn;
    this.description = description;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['ingress'] = this.ingress;
    ih['name'] = this.name;
    if (this.db_security_group_id !== null) {
      ih['db_security_group_id'] = this.db_security_group_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== 'Managed by Terraform') {
      ih['description'] = this.description;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Db_security_group';
  }
}

export class Db_snapshot implements PcoreValue {
  readonly db_instance_identifier: string;
  readonly db_snapshot_identifier: string;
  readonly db_snapshot_id: string|null;
  readonly allocated_storage: number|null;
  readonly availability_zone: string|null;
  readonly db_snapshot_arn: string|null;
  readonly encrypted: boolean|null;
  readonly engine: string|null;
  readonly engine_version: string|null;
  readonly iops: number|null;
  readonly kms_key_id: string|null;
  readonly license_model: string|null;
  readonly option_group_name: string|null;
  readonly port: number|null;
  readonly snapshot_type: string|null;
  readonly source_db_snapshot_identifier: string|null;
  readonly source_region: string|null;
  readonly status: string|null;
  readonly storage_type: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly vpc_id: string|null;

  constructor({
    db_instance_identifier,
    db_snapshot_identifier,
    db_snapshot_id = null,
    allocated_storage = null,
    availability_zone = null,
    db_snapshot_arn = null,
    encrypted = null,
    engine = null,
    engine_version = null,
    iops = null,
    kms_key_id = null,
    license_model = null,
    option_group_name = null,
    port = null,
    snapshot_type = null,
    source_db_snapshot_identifier = null,
    source_region = null,
    status = null,
    storage_type = null,
    tags = null,
    vpc_id = null
  }: {
    db_instance_identifier: string,
    db_snapshot_identifier: string,
    db_snapshot_id?: string|null,
    allocated_storage?: number|null,
    availability_zone?: string|null,
    db_snapshot_arn?: string|null,
    encrypted?: boolean|null,
    engine?: string|null,
    engine_version?: string|null,
    iops?: number|null,
    kms_key_id?: string|null,
    license_model?: string|null,
    option_group_name?: string|null,
    port?: number|null,
    snapshot_type?: string|null,
    source_db_snapshot_identifier?: string|null,
    source_region?: string|null,
    status?: string|null,
    storage_type?: string|null,
    tags?: {[s: string]: string}|null,
    vpc_id?: string|null
  }) {
    this.db_instance_identifier = db_instance_identifier;
    this.db_snapshot_identifier = db_snapshot_identifier;
    this.db_snapshot_id = db_snapshot_id;
    this.allocated_storage = allocated_storage;
    this.availability_zone = availability_zone;
    this.db_snapshot_arn = db_snapshot_arn;
    this.encrypted = encrypted;
    this.engine = engine;
    this.engine_version = engine_version;
    this.iops = iops;
    this.kms_key_id = kms_key_id;
    this.license_model = license_model;
    this.option_group_name = option_group_name;
    this.port = port;
    this.snapshot_type = snapshot_type;
    this.source_db_snapshot_identifier = source_db_snapshot_identifier;
    this.source_region = source_region;
    this.status = status;
    this.storage_type = storage_type;
    this.tags = tags;
    this.vpc_id = vpc_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['db_instance_identifier'] = this.db_instance_identifier;
    ih['db_snapshot_identifier'] = this.db_snapshot_identifier;
    if (this.db_snapshot_id !== null) {
      ih['db_snapshot_id'] = this.db_snapshot_id;
    }
    if (this.allocated_storage !== null) {
      ih['allocated_storage'] = this.allocated_storage;
    }
    if (this.availability_zone !== null) {
      ih['availability_zone'] = this.availability_zone;
    }
    if (this.db_snapshot_arn !== null) {
      ih['db_snapshot_arn'] = this.db_snapshot_arn;
    }
    if (this.encrypted !== null) {
      ih['encrypted'] = this.encrypted;
    }
    if (this.engine !== null) {
      ih['engine'] = this.engine;
    }
    if (this.engine_version !== null) {
      ih['engine_version'] = this.engine_version;
    }
    if (this.iops !== null) {
      ih['iops'] = this.iops;
    }
    if (this.kms_key_id !== null) {
      ih['kms_key_id'] = this.kms_key_id;
    }
    if (this.license_model !== null) {
      ih['license_model'] = this.license_model;
    }
    if (this.option_group_name !== null) {
      ih['option_group_name'] = this.option_group_name;
    }
    if (this.port !== null) {
      ih['port'] = this.port;
    }
    if (this.snapshot_type !== null) {
      ih['snapshot_type'] = this.snapshot_type;
    }
    if (this.source_db_snapshot_identifier !== null) {
      ih['source_db_snapshot_identifier'] = this.source_db_snapshot_identifier;
    }
    if (this.source_region !== null) {
      ih['source_region'] = this.source_region;
    }
    if (this.status !== null) {
      ih['status'] = this.status;
    }
    if (this.storage_type !== null) {
      ih['storage_type'] = this.storage_type;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpc_id !== null) {
      ih['vpc_id'] = this.vpc_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Db_snapshot';
  }
}

export class Db_subnet_group implements PcoreValue {
  readonly subnet_ids: string[];
  readonly db_subnet_group_id: string|null;
  readonly arn: string|null;
  readonly description: string;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    subnet_ids,
    db_subnet_group_id = null,
    arn = null,
    description = 'Managed by Terraform',
    name = null,
    name_prefix = null,
    tags = null
  }: {
    subnet_ids: string[],
    db_subnet_group_id?: string|null,
    arn?: string|null,
    description?: string,
    name?: string|null,
    name_prefix?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.subnet_ids = subnet_ids;
    this.db_subnet_group_id = db_subnet_group_id;
    this.arn = arn;
    this.description = description;
    this.name = name;
    this.name_prefix = name_prefix;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['subnet_ids'] = this.subnet_ids;
    if (this.db_subnet_group_id !== null) {
      ih['db_subnet_group_id'] = this.db_subnet_group_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== 'Managed by Terraform') {
      ih['description'] = this.description;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Db_subnet_group';
  }
}

export class Default_network_acl implements PcoreValue {
  readonly default_network_acl_id: string;
  readonly default_network_acl_lyra_id: string|null;
  readonly egress: Anon160[]|null;
  readonly ingress: Anon160[]|null;
  readonly owner_id: string|null;
  readonly subnet_ids: string[]|null;
  readonly tags: {[s: string]: string}|null;
  readonly vpc_id: string|null;

  constructor({
    default_network_acl_id,
    default_network_acl_lyra_id = null,
    egress = null,
    ingress = null,
    owner_id = null,
    subnet_ids = null,
    tags = null,
    vpc_id = null
  }: {
    default_network_acl_id: string,
    default_network_acl_lyra_id?: string|null,
    egress?: Anon160[]|null,
    ingress?: Anon160[]|null,
    owner_id?: string|null,
    subnet_ids?: string[]|null,
    tags?: {[s: string]: string}|null,
    vpc_id?: string|null
  }) {
    this.default_network_acl_id = default_network_acl_id;
    this.default_network_acl_lyra_id = default_network_acl_lyra_id;
    this.egress = egress;
    this.ingress = ingress;
    this.owner_id = owner_id;
    this.subnet_ids = subnet_ids;
    this.tags = tags;
    this.vpc_id = vpc_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['default_network_acl_id'] = this.default_network_acl_id;
    if (this.default_network_acl_lyra_id !== null) {
      ih['default_network_acl_lyra_id'] = this.default_network_acl_lyra_id;
    }
    if (this.egress !== null) {
      ih['egress'] = this.egress;
    }
    if (this.ingress !== null) {
      ih['ingress'] = this.ingress;
    }
    if (this.owner_id !== null) {
      ih['owner_id'] = this.owner_id;
    }
    if (this.subnet_ids !== null) {
      ih['subnet_ids'] = this.subnet_ids;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpc_id !== null) {
      ih['vpc_id'] = this.vpc_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Default_network_acl';
  }
}

export class Default_route_table implements PcoreValue {
  readonly default_route_table_id: string;
  readonly default_route_table_lyra_id: string|null;
  readonly owner_id: string|null;
  readonly propagating_vgws: string[]|null;
  readonly route: Anon161[]|null;
  readonly tags: {[s: string]: string}|null;
  readonly vpc_id: string|null;

  constructor({
    default_route_table_id,
    default_route_table_lyra_id = null,
    owner_id = null,
    propagating_vgws = null,
    route = null,
    tags = null,
    vpc_id = null
  }: {
    default_route_table_id: string,
    default_route_table_lyra_id?: string|null,
    owner_id?: string|null,
    propagating_vgws?: string[]|null,
    route?: Anon161[]|null,
    tags?: {[s: string]: string}|null,
    vpc_id?: string|null
  }) {
    this.default_route_table_id = default_route_table_id;
    this.default_route_table_lyra_id = default_route_table_lyra_id;
    this.owner_id = owner_id;
    this.propagating_vgws = propagating_vgws;
    this.route = route;
    this.tags = tags;
    this.vpc_id = vpc_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['default_route_table_id'] = this.default_route_table_id;
    if (this.default_route_table_lyra_id !== null) {
      ih['default_route_table_lyra_id'] = this.default_route_table_lyra_id;
    }
    if (this.owner_id !== null) {
      ih['owner_id'] = this.owner_id;
    }
    if (this.propagating_vgws !== null) {
      ih['propagating_vgws'] = this.propagating_vgws;
    }
    if (this.route !== null) {
      ih['route'] = this.route;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpc_id !== null) {
      ih['vpc_id'] = this.vpc_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Default_route_table';
  }
}

export class Default_security_group implements PcoreValue {
  readonly default_security_group_id: string|null;
  readonly arn: string|null;
  readonly egress: Anon162[]|null;
  readonly ingress: Anon162[]|null;
  readonly name: string|null;
  readonly owner_id: string|null;
  readonly revoke_rules_on_delete: boolean;
  readonly tags: {[s: string]: string}|null;
  readonly vpc_id: string|null;

  constructor({
    default_security_group_id = null,
    arn = null,
    egress = null,
    ingress = null,
    name = null,
    owner_id = null,
    revoke_rules_on_delete = false,
    tags = null,
    vpc_id = null
  }: {
    default_security_group_id?: string|null,
    arn?: string|null,
    egress?: Anon162[]|null,
    ingress?: Anon162[]|null,
    name?: string|null,
    owner_id?: string|null,
    revoke_rules_on_delete?: boolean,
    tags?: {[s: string]: string}|null,
    vpc_id?: string|null
  }) {
    this.default_security_group_id = default_security_group_id;
    this.arn = arn;
    this.egress = egress;
    this.ingress = ingress;
    this.name = name;
    this.owner_id = owner_id;
    this.revoke_rules_on_delete = revoke_rules_on_delete;
    this.tags = tags;
    this.vpc_id = vpc_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.default_security_group_id !== null) {
      ih['default_security_group_id'] = this.default_security_group_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.egress !== null) {
      ih['egress'] = this.egress;
    }
    if (this.ingress !== null) {
      ih['ingress'] = this.ingress;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.owner_id !== null) {
      ih['owner_id'] = this.owner_id;
    }
    if (this.revoke_rules_on_delete !== false) {
      ih['revoke_rules_on_delete'] = this.revoke_rules_on_delete;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpc_id !== null) {
      ih['vpc_id'] = this.vpc_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Default_security_group';
  }
}

export class Default_subnet implements PcoreValue {
  readonly availability_zone: string;
  readonly default_subnet_id: string|null;
  readonly arn: string|null;
  readonly assign_ipv6_address_on_creation: boolean|null;
  readonly availability_zone_id: string|null;
  readonly cidr_block: string|null;
  readonly ipv6_cidr_block: string|null;
  readonly ipv6_cidr_block_association_id: string|null;
  readonly map_public_ip_on_launch: boolean|null;
  readonly owner_id: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly vpc_id: string|null;

  constructor({
    availability_zone,
    default_subnet_id = null,
    arn = null,
    assign_ipv6_address_on_creation = null,
    availability_zone_id = null,
    cidr_block = null,
    ipv6_cidr_block = null,
    ipv6_cidr_block_association_id = null,
    map_public_ip_on_launch = null,
    owner_id = null,
    tags = null,
    vpc_id = null
  }: {
    availability_zone: string,
    default_subnet_id?: string|null,
    arn?: string|null,
    assign_ipv6_address_on_creation?: boolean|null,
    availability_zone_id?: string|null,
    cidr_block?: string|null,
    ipv6_cidr_block?: string|null,
    ipv6_cidr_block_association_id?: string|null,
    map_public_ip_on_launch?: boolean|null,
    owner_id?: string|null,
    tags?: {[s: string]: string}|null,
    vpc_id?: string|null
  }) {
    this.availability_zone = availability_zone;
    this.default_subnet_id = default_subnet_id;
    this.arn = arn;
    this.assign_ipv6_address_on_creation = assign_ipv6_address_on_creation;
    this.availability_zone_id = availability_zone_id;
    this.cidr_block = cidr_block;
    this.ipv6_cidr_block = ipv6_cidr_block;
    this.ipv6_cidr_block_association_id = ipv6_cidr_block_association_id;
    this.map_public_ip_on_launch = map_public_ip_on_launch;
    this.owner_id = owner_id;
    this.tags = tags;
    this.vpc_id = vpc_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['availability_zone'] = this.availability_zone;
    if (this.default_subnet_id !== null) {
      ih['default_subnet_id'] = this.default_subnet_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.assign_ipv6_address_on_creation !== null) {
      ih['assign_ipv6_address_on_creation'] = this.assign_ipv6_address_on_creation;
    }
    if (this.availability_zone_id !== null) {
      ih['availability_zone_id'] = this.availability_zone_id;
    }
    if (this.cidr_block !== null) {
      ih['cidr_block'] = this.cidr_block;
    }
    if (this.ipv6_cidr_block !== null) {
      ih['ipv6_cidr_block'] = this.ipv6_cidr_block;
    }
    if (this.ipv6_cidr_block_association_id !== null) {
      ih['ipv6_cidr_block_association_id'] = this.ipv6_cidr_block_association_id;
    }
    if (this.map_public_ip_on_launch !== null) {
      ih['map_public_ip_on_launch'] = this.map_public_ip_on_launch;
    }
    if (this.owner_id !== null) {
      ih['owner_id'] = this.owner_id;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpc_id !== null) {
      ih['vpc_id'] = this.vpc_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Default_subnet';
  }
}

export class Default_vpc implements PcoreValue {
  readonly default_vpc_id: string|null;
  readonly arn: string|null;
  readonly assign_generated_ipv6_cidr_block: boolean|null;
  readonly cidr_block: string|null;
  readonly default_network_acl_id: string|null;
  readonly default_route_table_id: string|null;
  readonly default_security_group_id: string|null;
  readonly dhcp_options_id: string|null;
  readonly enable_classiclink: boolean|null;
  readonly enable_classiclink_dns_support: boolean|null;
  readonly enable_dns_hostnames: boolean|null;
  readonly enable_dns_support: boolean;
  readonly instance_tenancy: string|null;
  readonly ipv6_association_id: string|null;
  readonly ipv6_cidr_block: string|null;
  readonly main_route_table_id: string|null;
  readonly owner_id: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    default_vpc_id = null,
    arn = null,
    assign_generated_ipv6_cidr_block = null,
    cidr_block = null,
    default_network_acl_id = null,
    default_route_table_id = null,
    default_security_group_id = null,
    dhcp_options_id = null,
    enable_classiclink = null,
    enable_classiclink_dns_support = null,
    enable_dns_hostnames = null,
    enable_dns_support = true,
    instance_tenancy = null,
    ipv6_association_id = null,
    ipv6_cidr_block = null,
    main_route_table_id = null,
    owner_id = null,
    tags = null
  }: {
    default_vpc_id?: string|null,
    arn?: string|null,
    assign_generated_ipv6_cidr_block?: boolean|null,
    cidr_block?: string|null,
    default_network_acl_id?: string|null,
    default_route_table_id?: string|null,
    default_security_group_id?: string|null,
    dhcp_options_id?: string|null,
    enable_classiclink?: boolean|null,
    enable_classiclink_dns_support?: boolean|null,
    enable_dns_hostnames?: boolean|null,
    enable_dns_support?: boolean,
    instance_tenancy?: string|null,
    ipv6_association_id?: string|null,
    ipv6_cidr_block?: string|null,
    main_route_table_id?: string|null,
    owner_id?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.default_vpc_id = default_vpc_id;
    this.arn = arn;
    this.assign_generated_ipv6_cidr_block = assign_generated_ipv6_cidr_block;
    this.cidr_block = cidr_block;
    this.default_network_acl_id = default_network_acl_id;
    this.default_route_table_id = default_route_table_id;
    this.default_security_group_id = default_security_group_id;
    this.dhcp_options_id = dhcp_options_id;
    this.enable_classiclink = enable_classiclink;
    this.enable_classiclink_dns_support = enable_classiclink_dns_support;
    this.enable_dns_hostnames = enable_dns_hostnames;
    this.enable_dns_support = enable_dns_support;
    this.instance_tenancy = instance_tenancy;
    this.ipv6_association_id = ipv6_association_id;
    this.ipv6_cidr_block = ipv6_cidr_block;
    this.main_route_table_id = main_route_table_id;
    this.owner_id = owner_id;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.default_vpc_id !== null) {
      ih['default_vpc_id'] = this.default_vpc_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.assign_generated_ipv6_cidr_block !== null) {
      ih['assign_generated_ipv6_cidr_block'] = this.assign_generated_ipv6_cidr_block;
    }
    if (this.cidr_block !== null) {
      ih['cidr_block'] = this.cidr_block;
    }
    if (this.default_network_acl_id !== null) {
      ih['default_network_acl_id'] = this.default_network_acl_id;
    }
    if (this.default_route_table_id !== null) {
      ih['default_route_table_id'] = this.default_route_table_id;
    }
    if (this.default_security_group_id !== null) {
      ih['default_security_group_id'] = this.default_security_group_id;
    }
    if (this.dhcp_options_id !== null) {
      ih['dhcp_options_id'] = this.dhcp_options_id;
    }
    if (this.enable_classiclink !== null) {
      ih['enable_classiclink'] = this.enable_classiclink;
    }
    if (this.enable_classiclink_dns_support !== null) {
      ih['enable_classiclink_dns_support'] = this.enable_classiclink_dns_support;
    }
    if (this.enable_dns_hostnames !== null) {
      ih['enable_dns_hostnames'] = this.enable_dns_hostnames;
    }
    if (this.enable_dns_support !== true) {
      ih['enable_dns_support'] = this.enable_dns_support;
    }
    if (this.instance_tenancy !== null) {
      ih['instance_tenancy'] = this.instance_tenancy;
    }
    if (this.ipv6_association_id !== null) {
      ih['ipv6_association_id'] = this.ipv6_association_id;
    }
    if (this.ipv6_cidr_block !== null) {
      ih['ipv6_cidr_block'] = this.ipv6_cidr_block;
    }
    if (this.main_route_table_id !== null) {
      ih['main_route_table_id'] = this.main_route_table_id;
    }
    if (this.owner_id !== null) {
      ih['owner_id'] = this.owner_id;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Default_vpc';
  }
}

export class Default_vpc_dhcp_options implements PcoreValue {
  readonly default_vpc_dhcp_options_id: string|null;
  readonly domain_name: string|null;
  readonly domain_name_servers: string|null;
  readonly netbios_name_servers: string[]|null;
  readonly netbios_node_type: string|null;
  readonly ntp_servers: string|null;
  readonly owner_id: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    default_vpc_dhcp_options_id = null,
    domain_name = null,
    domain_name_servers = null,
    netbios_name_servers = null,
    netbios_node_type = null,
    ntp_servers = null,
    owner_id = null,
    tags = null
  }: {
    default_vpc_dhcp_options_id?: string|null,
    domain_name?: string|null,
    domain_name_servers?: string|null,
    netbios_name_servers?: string[]|null,
    netbios_node_type?: string|null,
    ntp_servers?: string|null,
    owner_id?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.default_vpc_dhcp_options_id = default_vpc_dhcp_options_id;
    this.domain_name = domain_name;
    this.domain_name_servers = domain_name_servers;
    this.netbios_name_servers = netbios_name_servers;
    this.netbios_node_type = netbios_node_type;
    this.ntp_servers = ntp_servers;
    this.owner_id = owner_id;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.default_vpc_dhcp_options_id !== null) {
      ih['default_vpc_dhcp_options_id'] = this.default_vpc_dhcp_options_id;
    }
    if (this.domain_name !== null) {
      ih['domain_name'] = this.domain_name;
    }
    if (this.domain_name_servers !== null) {
      ih['domain_name_servers'] = this.domain_name_servers;
    }
    if (this.netbios_name_servers !== null) {
      ih['netbios_name_servers'] = this.netbios_name_servers;
    }
    if (this.netbios_node_type !== null) {
      ih['netbios_node_type'] = this.netbios_node_type;
    }
    if (this.ntp_servers !== null) {
      ih['ntp_servers'] = this.ntp_servers;
    }
    if (this.owner_id !== null) {
      ih['owner_id'] = this.owner_id;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Default_vpc_dhcp_options';
  }
}

export class Devicefarm_project implements PcoreValue {
  readonly name: string;
  readonly devicefarm_project_id: string|null;
  readonly arn: string|null;

  constructor({
    name,
    devicefarm_project_id = null,
    arn = null
  }: {
    name: string,
    devicefarm_project_id?: string|null,
    arn?: string|null
  }) {
    this.name = name;
    this.devicefarm_project_id = devicefarm_project_id;
    this.arn = arn;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.devicefarm_project_id !== null) {
      ih['devicefarm_project_id'] = this.devicefarm_project_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Devicefarm_project';
  }
}

export class Directory_service_conditional_forwarder implements PcoreValue {
  readonly directory_id: string;
  readonly dns_ips: string[];
  readonly remote_domain_name: string;
  readonly directory_service_conditional_forwarder_id: string|null;

  constructor({
    directory_id,
    dns_ips,
    remote_domain_name,
    directory_service_conditional_forwarder_id = null
  }: {
    directory_id: string,
    dns_ips: string[],
    remote_domain_name: string,
    directory_service_conditional_forwarder_id?: string|null
  }) {
    this.directory_id = directory_id;
    this.dns_ips = dns_ips;
    this.remote_domain_name = remote_domain_name;
    this.directory_service_conditional_forwarder_id = directory_service_conditional_forwarder_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['directory_id'] = this.directory_id;
    ih['dns_ips'] = this.dns_ips;
    ih['remote_domain_name'] = this.remote_domain_name;
    if (this.directory_service_conditional_forwarder_id !== null) {
      ih['directory_service_conditional_forwarder_id'] = this.directory_service_conditional_forwarder_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Directory_service_conditional_forwarder';
  }
}

export class Directory_service_directory implements PcoreValue {
  readonly name: string;
  readonly password: string;
  readonly directory_service_directory_id: string|null;
  readonly access_url: string|null;
  readonly alias: string|null;
  readonly connect_settings: Anon163|null;
  readonly description: string|null;
  readonly dns_ip_addresses: string[]|null;
  readonly edition: string|null;
  readonly enable_sso: boolean;
  readonly security_group_id: string|null;
  readonly short_name: string|null;
  readonly size: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly type: string;
  readonly vpc_settings: Anon164|null;

  constructor({
    name,
    password,
    directory_service_directory_id = null,
    access_url = null,
    alias = null,
    connect_settings = null,
    description = null,
    dns_ip_addresses = null,
    edition = null,
    enable_sso = false,
    security_group_id = null,
    short_name = null,
    size = null,
    tags = null,
    type = 'SimpleAD',
    vpc_settings = null
  }: {
    name: string,
    password: string,
    directory_service_directory_id?: string|null,
    access_url?: string|null,
    alias?: string|null,
    connect_settings?: Anon163|null,
    description?: string|null,
    dns_ip_addresses?: string[]|null,
    edition?: string|null,
    enable_sso?: boolean,
    security_group_id?: string|null,
    short_name?: string|null,
    size?: string|null,
    tags?: {[s: string]: string}|null,
    type?: string,
    vpc_settings?: Anon164|null
  }) {
    this.name = name;
    this.password = password;
    this.directory_service_directory_id = directory_service_directory_id;
    this.access_url = access_url;
    this.alias = alias;
    this.connect_settings = connect_settings;
    this.description = description;
    this.dns_ip_addresses = dns_ip_addresses;
    this.edition = edition;
    this.enable_sso = enable_sso;
    this.security_group_id = security_group_id;
    this.short_name = short_name;
    this.size = size;
    this.tags = tags;
    this.type = type;
    this.vpc_settings = vpc_settings;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['password'] = this.password;
    if (this.directory_service_directory_id !== null) {
      ih['directory_service_directory_id'] = this.directory_service_directory_id;
    }
    if (this.access_url !== null) {
      ih['access_url'] = this.access_url;
    }
    if (this.alias !== null) {
      ih['alias'] = this.alias;
    }
    if (this.connect_settings !== null) {
      ih['connect_settings'] = this.connect_settings;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.dns_ip_addresses !== null) {
      ih['dns_ip_addresses'] = this.dns_ip_addresses;
    }
    if (this.edition !== null) {
      ih['edition'] = this.edition;
    }
    if (this.enable_sso !== false) {
      ih['enable_sso'] = this.enable_sso;
    }
    if (this.security_group_id !== null) {
      ih['security_group_id'] = this.security_group_id;
    }
    if (this.short_name !== null) {
      ih['short_name'] = this.short_name;
    }
    if (this.size !== null) {
      ih['size'] = this.size;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.type !== 'SimpleAD') {
      ih['type'] = this.type;
    }
    if (this.vpc_settings !== null) {
      ih['vpc_settings'] = this.vpc_settings;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Directory_service_directory';
  }
}

export class Dlm_lifecycle_policy implements PcoreValue {
  readonly description: string;
  readonly execution_role_arn: string;
  readonly dlm_lifecycle_policy_id: string|null;
  readonly policy_details: Anon168|null;
  readonly state: string;

  constructor({
    description,
    execution_role_arn,
    dlm_lifecycle_policy_id = null,
    policy_details = null,
    state = 'ENABLED'
  }: {
    description: string,
    execution_role_arn: string,
    dlm_lifecycle_policy_id?: string|null,
    policy_details?: Anon168|null,
    state?: string
  }) {
    this.description = description;
    this.execution_role_arn = execution_role_arn;
    this.dlm_lifecycle_policy_id = dlm_lifecycle_policy_id;
    this.policy_details = policy_details;
    this.state = state;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['description'] = this.description;
    ih['execution_role_arn'] = this.execution_role_arn;
    if (this.dlm_lifecycle_policy_id !== null) {
      ih['dlm_lifecycle_policy_id'] = this.dlm_lifecycle_policy_id;
    }
    if (this.policy_details !== null) {
      ih['policy_details'] = this.policy_details;
    }
    if (this.state !== 'ENABLED') {
      ih['state'] = this.state;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dlm_lifecycle_policy';
  }
}

export class Dms_certificate implements PcoreValue {
  readonly certificate_id: string;
  readonly dms_certificate_id: string|null;
  readonly certificate_arn: string|null;
  readonly certificate_pem: string|null;
  readonly certificate_wallet: string|null;

  constructor({
    certificate_id,
    dms_certificate_id = null,
    certificate_arn = null,
    certificate_pem = null,
    certificate_wallet = null
  }: {
    certificate_id: string,
    dms_certificate_id?: string|null,
    certificate_arn?: string|null,
    certificate_pem?: string|null,
    certificate_wallet?: string|null
  }) {
    this.certificate_id = certificate_id;
    this.dms_certificate_id = dms_certificate_id;
    this.certificate_arn = certificate_arn;
    this.certificate_pem = certificate_pem;
    this.certificate_wallet = certificate_wallet;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['certificate_id'] = this.certificate_id;
    if (this.dms_certificate_id !== null) {
      ih['dms_certificate_id'] = this.dms_certificate_id;
    }
    if (this.certificate_arn !== null) {
      ih['certificate_arn'] = this.certificate_arn;
    }
    if (this.certificate_pem !== null) {
      ih['certificate_pem'] = this.certificate_pem;
    }
    if (this.certificate_wallet !== null) {
      ih['certificate_wallet'] = this.certificate_wallet;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dms_certificate';
  }
}

export class Dms_endpoint implements PcoreValue {
  readonly endpoint_id: string;
  readonly endpoint_type: string;
  readonly engine_name: string;
  readonly dms_endpoint_id: string|null;
  readonly certificate_arn: string|null;
  readonly database_name: string|null;
  readonly endpoint_arn: string|null;
  readonly extra_connection_attributes: string|null;
  readonly kms_key_arn: string|null;
  readonly mongodb_settings: Anon169|null;
  readonly password: string|null;
  readonly port: number|null;
  readonly s3_settings: Anon170|null;
  readonly server_name: string|null;
  readonly service_access_role: string|null;
  readonly ssl_mode: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly username: string|null;

  constructor({
    endpoint_id,
    endpoint_type,
    engine_name,
    dms_endpoint_id = null,
    certificate_arn = null,
    database_name = null,
    endpoint_arn = null,
    extra_connection_attributes = null,
    kms_key_arn = null,
    mongodb_settings = null,
    password = null,
    port = null,
    s3_settings = null,
    server_name = null,
    service_access_role = null,
    ssl_mode = null,
    tags = null,
    username = null
  }: {
    endpoint_id: string,
    endpoint_type: string,
    engine_name: string,
    dms_endpoint_id?: string|null,
    certificate_arn?: string|null,
    database_name?: string|null,
    endpoint_arn?: string|null,
    extra_connection_attributes?: string|null,
    kms_key_arn?: string|null,
    mongodb_settings?: Anon169|null,
    password?: string|null,
    port?: number|null,
    s3_settings?: Anon170|null,
    server_name?: string|null,
    service_access_role?: string|null,
    ssl_mode?: string|null,
    tags?: {[s: string]: string}|null,
    username?: string|null
  }) {
    this.endpoint_id = endpoint_id;
    this.endpoint_type = endpoint_type;
    this.engine_name = engine_name;
    this.dms_endpoint_id = dms_endpoint_id;
    this.certificate_arn = certificate_arn;
    this.database_name = database_name;
    this.endpoint_arn = endpoint_arn;
    this.extra_connection_attributes = extra_connection_attributes;
    this.kms_key_arn = kms_key_arn;
    this.mongodb_settings = mongodb_settings;
    this.password = password;
    this.port = port;
    this.s3_settings = s3_settings;
    this.server_name = server_name;
    this.service_access_role = service_access_role;
    this.ssl_mode = ssl_mode;
    this.tags = tags;
    this.username = username;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['endpoint_id'] = this.endpoint_id;
    ih['endpoint_type'] = this.endpoint_type;
    ih['engine_name'] = this.engine_name;
    if (this.dms_endpoint_id !== null) {
      ih['dms_endpoint_id'] = this.dms_endpoint_id;
    }
    if (this.certificate_arn !== null) {
      ih['certificate_arn'] = this.certificate_arn;
    }
    if (this.database_name !== null) {
      ih['database_name'] = this.database_name;
    }
    if (this.endpoint_arn !== null) {
      ih['endpoint_arn'] = this.endpoint_arn;
    }
    if (this.extra_connection_attributes !== null) {
      ih['extra_connection_attributes'] = this.extra_connection_attributes;
    }
    if (this.kms_key_arn !== null) {
      ih['kms_key_arn'] = this.kms_key_arn;
    }
    if (this.mongodb_settings !== null) {
      ih['mongodb_settings'] = this.mongodb_settings;
    }
    if (this.password !== null) {
      ih['password'] = this.password;
    }
    if (this.port !== null) {
      ih['port'] = this.port;
    }
    if (this.s3_settings !== null) {
      ih['s3_settings'] = this.s3_settings;
    }
    if (this.server_name !== null) {
      ih['server_name'] = this.server_name;
    }
    if (this.service_access_role !== null) {
      ih['service_access_role'] = this.service_access_role;
    }
    if (this.ssl_mode !== null) {
      ih['ssl_mode'] = this.ssl_mode;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.username !== null) {
      ih['username'] = this.username;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dms_endpoint';
  }
}

export class Dms_replication_instance implements PcoreValue {
  readonly replication_instance_class: string;
  readonly replication_instance_id: string;
  readonly dms_replication_instance_id: string|null;
  readonly allocated_storage: number|null;
  readonly apply_immediately: boolean|null;
  readonly auto_minor_version_upgrade: boolean|null;
  readonly availability_zone: string|null;
  readonly engine_version: string|null;
  readonly kms_key_arn: string|null;
  readonly multi_az: boolean|null;
  readonly preferred_maintenance_window: string|null;
  readonly publicly_accessible: boolean|null;
  readonly replication_instance_arn: string|null;
  readonly replication_instance_private_ips: string[]|null;
  readonly replication_instance_public_ips: string[]|null;
  readonly replication_subnet_group_id: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly vpc_security_group_ids: string[]|null;

  constructor({
    replication_instance_class,
    replication_instance_id,
    dms_replication_instance_id = null,
    allocated_storage = null,
    apply_immediately = null,
    auto_minor_version_upgrade = null,
    availability_zone = null,
    engine_version = null,
    kms_key_arn = null,
    multi_az = null,
    preferred_maintenance_window = null,
    publicly_accessible = null,
    replication_instance_arn = null,
    replication_instance_private_ips = null,
    replication_instance_public_ips = null,
    replication_subnet_group_id = null,
    tags = null,
    vpc_security_group_ids = null
  }: {
    replication_instance_class: string,
    replication_instance_id: string,
    dms_replication_instance_id?: string|null,
    allocated_storage?: number|null,
    apply_immediately?: boolean|null,
    auto_minor_version_upgrade?: boolean|null,
    availability_zone?: string|null,
    engine_version?: string|null,
    kms_key_arn?: string|null,
    multi_az?: boolean|null,
    preferred_maintenance_window?: string|null,
    publicly_accessible?: boolean|null,
    replication_instance_arn?: string|null,
    replication_instance_private_ips?: string[]|null,
    replication_instance_public_ips?: string[]|null,
    replication_subnet_group_id?: string|null,
    tags?: {[s: string]: string}|null,
    vpc_security_group_ids?: string[]|null
  }) {
    this.replication_instance_class = replication_instance_class;
    this.replication_instance_id = replication_instance_id;
    this.dms_replication_instance_id = dms_replication_instance_id;
    this.allocated_storage = allocated_storage;
    this.apply_immediately = apply_immediately;
    this.auto_minor_version_upgrade = auto_minor_version_upgrade;
    this.availability_zone = availability_zone;
    this.engine_version = engine_version;
    this.kms_key_arn = kms_key_arn;
    this.multi_az = multi_az;
    this.preferred_maintenance_window = preferred_maintenance_window;
    this.publicly_accessible = publicly_accessible;
    this.replication_instance_arn = replication_instance_arn;
    this.replication_instance_private_ips = replication_instance_private_ips;
    this.replication_instance_public_ips = replication_instance_public_ips;
    this.replication_subnet_group_id = replication_subnet_group_id;
    this.tags = tags;
    this.vpc_security_group_ids = vpc_security_group_ids;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['replication_instance_class'] = this.replication_instance_class;
    ih['replication_instance_id'] = this.replication_instance_id;
    if (this.dms_replication_instance_id !== null) {
      ih['dms_replication_instance_id'] = this.dms_replication_instance_id;
    }
    if (this.allocated_storage !== null) {
      ih['allocated_storage'] = this.allocated_storage;
    }
    if (this.apply_immediately !== null) {
      ih['apply_immediately'] = this.apply_immediately;
    }
    if (this.auto_minor_version_upgrade !== null) {
      ih['auto_minor_version_upgrade'] = this.auto_minor_version_upgrade;
    }
    if (this.availability_zone !== null) {
      ih['availability_zone'] = this.availability_zone;
    }
    if (this.engine_version !== null) {
      ih['engine_version'] = this.engine_version;
    }
    if (this.kms_key_arn !== null) {
      ih['kms_key_arn'] = this.kms_key_arn;
    }
    if (this.multi_az !== null) {
      ih['multi_az'] = this.multi_az;
    }
    if (this.preferred_maintenance_window !== null) {
      ih['preferred_maintenance_window'] = this.preferred_maintenance_window;
    }
    if (this.publicly_accessible !== null) {
      ih['publicly_accessible'] = this.publicly_accessible;
    }
    if (this.replication_instance_arn !== null) {
      ih['replication_instance_arn'] = this.replication_instance_arn;
    }
    if (this.replication_instance_private_ips !== null) {
      ih['replication_instance_private_ips'] = this.replication_instance_private_ips;
    }
    if (this.replication_instance_public_ips !== null) {
      ih['replication_instance_public_ips'] = this.replication_instance_public_ips;
    }
    if (this.replication_subnet_group_id !== null) {
      ih['replication_subnet_group_id'] = this.replication_subnet_group_id;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpc_security_group_ids !== null) {
      ih['vpc_security_group_ids'] = this.vpc_security_group_ids;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dms_replication_instance';
  }
}

export class Dms_replication_subnet_group implements PcoreValue {
  readonly replication_subnet_group_description: string;
  readonly replication_subnet_group_id: string;
  readonly subnet_ids: string[];
  readonly dms_replication_subnet_group_id: string|null;
  readonly replication_subnet_group_arn: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly vpc_id: string|null;

  constructor({
    replication_subnet_group_description,
    replication_subnet_group_id,
    subnet_ids,
    dms_replication_subnet_group_id = null,
    replication_subnet_group_arn = null,
    tags = null,
    vpc_id = null
  }: {
    replication_subnet_group_description: string,
    replication_subnet_group_id: string,
    subnet_ids: string[],
    dms_replication_subnet_group_id?: string|null,
    replication_subnet_group_arn?: string|null,
    tags?: {[s: string]: string}|null,
    vpc_id?: string|null
  }) {
    this.replication_subnet_group_description = replication_subnet_group_description;
    this.replication_subnet_group_id = replication_subnet_group_id;
    this.subnet_ids = subnet_ids;
    this.dms_replication_subnet_group_id = dms_replication_subnet_group_id;
    this.replication_subnet_group_arn = replication_subnet_group_arn;
    this.tags = tags;
    this.vpc_id = vpc_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['replication_subnet_group_description'] = this.replication_subnet_group_description;
    ih['replication_subnet_group_id'] = this.replication_subnet_group_id;
    ih['subnet_ids'] = this.subnet_ids;
    if (this.dms_replication_subnet_group_id !== null) {
      ih['dms_replication_subnet_group_id'] = this.dms_replication_subnet_group_id;
    }
    if (this.replication_subnet_group_arn !== null) {
      ih['replication_subnet_group_arn'] = this.replication_subnet_group_arn;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpc_id !== null) {
      ih['vpc_id'] = this.vpc_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dms_replication_subnet_group';
  }
}

export class Dms_replication_task implements PcoreValue {
  readonly migration_type: string;
  readonly replication_instance_arn: string;
  readonly replication_task_id: string;
  readonly source_endpoint_arn: string;
  readonly table_mappings: string;
  readonly target_endpoint_arn: string;
  readonly dms_replication_task_id: string|null;
  readonly cdc_start_time: string|null;
  readonly replication_task_arn: string|null;
  readonly replication_task_settings: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    migration_type,
    replication_instance_arn,
    replication_task_id,
    source_endpoint_arn,
    table_mappings,
    target_endpoint_arn,
    dms_replication_task_id = null,
    cdc_start_time = null,
    replication_task_arn = null,
    replication_task_settings = null,
    tags = null
  }: {
    migration_type: string,
    replication_instance_arn: string,
    replication_task_id: string,
    source_endpoint_arn: string,
    table_mappings: string,
    target_endpoint_arn: string,
    dms_replication_task_id?: string|null,
    cdc_start_time?: string|null,
    replication_task_arn?: string|null,
    replication_task_settings?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.migration_type = migration_type;
    this.replication_instance_arn = replication_instance_arn;
    this.replication_task_id = replication_task_id;
    this.source_endpoint_arn = source_endpoint_arn;
    this.table_mappings = table_mappings;
    this.target_endpoint_arn = target_endpoint_arn;
    this.dms_replication_task_id = dms_replication_task_id;
    this.cdc_start_time = cdc_start_time;
    this.replication_task_arn = replication_task_arn;
    this.replication_task_settings = replication_task_settings;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['migration_type'] = this.migration_type;
    ih['replication_instance_arn'] = this.replication_instance_arn;
    ih['replication_task_id'] = this.replication_task_id;
    ih['source_endpoint_arn'] = this.source_endpoint_arn;
    ih['table_mappings'] = this.table_mappings;
    ih['target_endpoint_arn'] = this.target_endpoint_arn;
    if (this.dms_replication_task_id !== null) {
      ih['dms_replication_task_id'] = this.dms_replication_task_id;
    }
    if (this.cdc_start_time !== null) {
      ih['cdc_start_time'] = this.cdc_start_time;
    }
    if (this.replication_task_arn !== null) {
      ih['replication_task_arn'] = this.replication_task_arn;
    }
    if (this.replication_task_settings !== null) {
      ih['replication_task_settings'] = this.replication_task_settings;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dms_replication_task';
  }
}

export class Docdb_cluster_parameter_group implements PcoreValue {
  readonly family: string;
  readonly docdb_cluster_parameter_group_id: string|null;
  readonly arn: string|null;
  readonly description: string;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly parameter: Anon158[]|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    family,
    docdb_cluster_parameter_group_id = null,
    arn = null,
    description = 'Managed by Terraform',
    name = null,
    name_prefix = null,
    parameter = null,
    tags = null
  }: {
    family: string,
    docdb_cluster_parameter_group_id?: string|null,
    arn?: string|null,
    description?: string,
    name?: string|null,
    name_prefix?: string|null,
    parameter?: Anon158[]|null,
    tags?: {[s: string]: string}|null
  }) {
    this.family = family;
    this.docdb_cluster_parameter_group_id = docdb_cluster_parameter_group_id;
    this.arn = arn;
    this.description = description;
    this.name = name;
    this.name_prefix = name_prefix;
    this.parameter = parameter;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['family'] = this.family;
    if (this.docdb_cluster_parameter_group_id !== null) {
      ih['docdb_cluster_parameter_group_id'] = this.docdb_cluster_parameter_group_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== 'Managed by Terraform') {
      ih['description'] = this.description;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.parameter !== null) {
      ih['parameter'] = this.parameter;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Docdb_cluster_parameter_group';
  }
}

export class Docdb_subnet_group implements PcoreValue {
  readonly subnet_ids: string[];
  readonly docdb_subnet_group_id: string|null;
  readonly arn: string|null;
  readonly description: string;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    subnet_ids,
    docdb_subnet_group_id = null,
    arn = null,
    description = 'Managed by Terraform',
    name = null,
    name_prefix = null,
    tags = null
  }: {
    subnet_ids: string[],
    docdb_subnet_group_id?: string|null,
    arn?: string|null,
    description?: string,
    name?: string|null,
    name_prefix?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.subnet_ids = subnet_ids;
    this.docdb_subnet_group_id = docdb_subnet_group_id;
    this.arn = arn;
    this.description = description;
    this.name = name;
    this.name_prefix = name_prefix;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['subnet_ids'] = this.subnet_ids;
    if (this.docdb_subnet_group_id !== null) {
      ih['docdb_subnet_group_id'] = this.docdb_subnet_group_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== 'Managed by Terraform') {
      ih['description'] = this.description;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Docdb_subnet_group';
  }
}

export class Dx_bgp_peer implements PcoreValue {
  readonly address_family: string;
  readonly bgp_asn: number;
  readonly virtual_interface_id: string;
  readonly dx_bgp_peer_id: string|null;
  readonly amazon_address: string|null;
  readonly bgp_auth_key: string|null;
  readonly bgp_status: string|null;
  readonly customer_address: string|null;

  constructor({
    address_family,
    bgp_asn,
    virtual_interface_id,
    dx_bgp_peer_id = null,
    amazon_address = null,
    bgp_auth_key = null,
    bgp_status = null,
    customer_address = null
  }: {
    address_family: string,
    bgp_asn: number,
    virtual_interface_id: string,
    dx_bgp_peer_id?: string|null,
    amazon_address?: string|null,
    bgp_auth_key?: string|null,
    bgp_status?: string|null,
    customer_address?: string|null
  }) {
    this.address_family = address_family;
    this.bgp_asn = bgp_asn;
    this.virtual_interface_id = virtual_interface_id;
    this.dx_bgp_peer_id = dx_bgp_peer_id;
    this.amazon_address = amazon_address;
    this.bgp_auth_key = bgp_auth_key;
    this.bgp_status = bgp_status;
    this.customer_address = customer_address;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['address_family'] = this.address_family;
    ih['bgp_asn'] = this.bgp_asn;
    ih['virtual_interface_id'] = this.virtual_interface_id;
    if (this.dx_bgp_peer_id !== null) {
      ih['dx_bgp_peer_id'] = this.dx_bgp_peer_id;
    }
    if (this.amazon_address !== null) {
      ih['amazon_address'] = this.amazon_address;
    }
    if (this.bgp_auth_key !== null) {
      ih['bgp_auth_key'] = this.bgp_auth_key;
    }
    if (this.bgp_status !== null) {
      ih['bgp_status'] = this.bgp_status;
    }
    if (this.customer_address !== null) {
      ih['customer_address'] = this.customer_address;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dx_bgp_peer';
  }
}

export class Dx_connection implements PcoreValue {
  readonly bandwidth: string;
  readonly location: string;
  readonly name: string;
  readonly dx_connection_id: string|null;
  readonly arn: string|null;
  readonly jumbo_frame_capable: boolean|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    bandwidth,
    location,
    name,
    dx_connection_id = null,
    arn = null,
    jumbo_frame_capable = null,
    tags = null
  }: {
    bandwidth: string,
    location: string,
    name: string,
    dx_connection_id?: string|null,
    arn?: string|null,
    jumbo_frame_capable?: boolean|null,
    tags?: {[s: string]: string}|null
  }) {
    this.bandwidth = bandwidth;
    this.location = location;
    this.name = name;
    this.dx_connection_id = dx_connection_id;
    this.arn = arn;
    this.jumbo_frame_capable = jumbo_frame_capable;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['bandwidth'] = this.bandwidth;
    ih['location'] = this.location;
    ih['name'] = this.name;
    if (this.dx_connection_id !== null) {
      ih['dx_connection_id'] = this.dx_connection_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.jumbo_frame_capable !== null) {
      ih['jumbo_frame_capable'] = this.jumbo_frame_capable;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dx_connection';
  }
}

export class Dx_connection_association implements PcoreValue {
  readonly connection_id: string;
  readonly lag_id: string;
  readonly dx_connection_association_id: string|null;

  constructor({
    connection_id,
    lag_id,
    dx_connection_association_id = null
  }: {
    connection_id: string,
    lag_id: string,
    dx_connection_association_id?: string|null
  }) {
    this.connection_id = connection_id;
    this.lag_id = lag_id;
    this.dx_connection_association_id = dx_connection_association_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['connection_id'] = this.connection_id;
    ih['lag_id'] = this.lag_id;
    if (this.dx_connection_association_id !== null) {
      ih['dx_connection_association_id'] = this.dx_connection_association_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dx_connection_association';
  }
}

export class Dx_gateway implements PcoreValue {
  readonly amazon_side_asn: string;
  readonly name: string;
  readonly dx_gateway_id: string|null;

  constructor({
    amazon_side_asn,
    name,
    dx_gateway_id = null
  }: {
    amazon_side_asn: string,
    name: string,
    dx_gateway_id?: string|null
  }) {
    this.amazon_side_asn = amazon_side_asn;
    this.name = name;
    this.dx_gateway_id = dx_gateway_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['amazon_side_asn'] = this.amazon_side_asn;
    ih['name'] = this.name;
    if (this.dx_gateway_id !== null) {
      ih['dx_gateway_id'] = this.dx_gateway_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dx_gateway';
  }
}

export class Dx_gateway_association implements PcoreValue {
  readonly dx_gateway_id: string;
  readonly vpn_gateway_id: string;
  readonly dx_gateway_association_id: string|null;

  constructor({
    dx_gateway_id,
    vpn_gateway_id,
    dx_gateway_association_id = null
  }: {
    dx_gateway_id: string,
    vpn_gateway_id: string,
    dx_gateway_association_id?: string|null
  }) {
    this.dx_gateway_id = dx_gateway_id;
    this.vpn_gateway_id = vpn_gateway_id;
    this.dx_gateway_association_id = dx_gateway_association_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['dx_gateway_id'] = this.dx_gateway_id;
    ih['vpn_gateway_id'] = this.vpn_gateway_id;
    if (this.dx_gateway_association_id !== null) {
      ih['dx_gateway_association_id'] = this.dx_gateway_association_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dx_gateway_association';
  }
}

export class Dx_hosted_private_virtual_interface implements PcoreValue {
  readonly address_family: string;
  readonly bgp_asn: number;
  readonly connection_id: string;
  readonly name: string;
  readonly owner_account_id: string;
  readonly vlan: number;
  readonly dx_hosted_private_virtual_interface_id: string|null;
  readonly amazon_address: string|null;
  readonly arn: string|null;
  readonly bgp_auth_key: string|null;
  readonly customer_address: string|null;
  readonly jumbo_frame_capable: boolean|null;
  readonly mtu: number;

  constructor({
    address_family,
    bgp_asn,
    connection_id,
    name,
    owner_account_id,
    vlan,
    dx_hosted_private_virtual_interface_id = null,
    amazon_address = null,
    arn = null,
    bgp_auth_key = null,
    customer_address = null,
    jumbo_frame_capable = null,
    mtu = 1500
  }: {
    address_family: string,
    bgp_asn: number,
    connection_id: string,
    name: string,
    owner_account_id: string,
    vlan: number,
    dx_hosted_private_virtual_interface_id?: string|null,
    amazon_address?: string|null,
    arn?: string|null,
    bgp_auth_key?: string|null,
    customer_address?: string|null,
    jumbo_frame_capable?: boolean|null,
    mtu?: number
  }) {
    this.address_family = address_family;
    this.bgp_asn = bgp_asn;
    this.connection_id = connection_id;
    this.name = name;
    this.owner_account_id = owner_account_id;
    this.vlan = vlan;
    this.dx_hosted_private_virtual_interface_id = dx_hosted_private_virtual_interface_id;
    this.amazon_address = amazon_address;
    this.arn = arn;
    this.bgp_auth_key = bgp_auth_key;
    this.customer_address = customer_address;
    this.jumbo_frame_capable = jumbo_frame_capable;
    this.mtu = mtu;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['address_family'] = this.address_family;
    ih['bgp_asn'] = this.bgp_asn;
    ih['connection_id'] = this.connection_id;
    ih['name'] = this.name;
    ih['owner_account_id'] = this.owner_account_id;
    ih['vlan'] = this.vlan;
    if (this.dx_hosted_private_virtual_interface_id !== null) {
      ih['dx_hosted_private_virtual_interface_id'] = this.dx_hosted_private_virtual_interface_id;
    }
    if (this.amazon_address !== null) {
      ih['amazon_address'] = this.amazon_address;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.bgp_auth_key !== null) {
      ih['bgp_auth_key'] = this.bgp_auth_key;
    }
    if (this.customer_address !== null) {
      ih['customer_address'] = this.customer_address;
    }
    if (this.jumbo_frame_capable !== null) {
      ih['jumbo_frame_capable'] = this.jumbo_frame_capable;
    }
    if (this.mtu !== 1500) {
      ih['mtu'] = this.mtu;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dx_hosted_private_virtual_interface';
  }
}

export class Dx_hosted_private_virtual_interface_accepter implements PcoreValue {
  readonly virtual_interface_id: string;
  readonly dx_hosted_private_virtual_interface_accepter_id: string|null;
  readonly arn: string|null;
  readonly dx_gateway_id: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly vpn_gateway_id: string|null;

  constructor({
    virtual_interface_id,
    dx_hosted_private_virtual_interface_accepter_id = null,
    arn = null,
    dx_gateway_id = null,
    tags = null,
    vpn_gateway_id = null
  }: {
    virtual_interface_id: string,
    dx_hosted_private_virtual_interface_accepter_id?: string|null,
    arn?: string|null,
    dx_gateway_id?: string|null,
    tags?: {[s: string]: string}|null,
    vpn_gateway_id?: string|null
  }) {
    this.virtual_interface_id = virtual_interface_id;
    this.dx_hosted_private_virtual_interface_accepter_id = dx_hosted_private_virtual_interface_accepter_id;
    this.arn = arn;
    this.dx_gateway_id = dx_gateway_id;
    this.tags = tags;
    this.vpn_gateway_id = vpn_gateway_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['virtual_interface_id'] = this.virtual_interface_id;
    if (this.dx_hosted_private_virtual_interface_accepter_id !== null) {
      ih['dx_hosted_private_virtual_interface_accepter_id'] = this.dx_hosted_private_virtual_interface_accepter_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.dx_gateway_id !== null) {
      ih['dx_gateway_id'] = this.dx_gateway_id;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpn_gateway_id !== null) {
      ih['vpn_gateway_id'] = this.vpn_gateway_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dx_hosted_private_virtual_interface_accepter';
  }
}

export class Dx_hosted_public_virtual_interface implements PcoreValue {
  readonly address_family: string;
  readonly bgp_asn: number;
  readonly connection_id: string;
  readonly name: string;
  readonly owner_account_id: string;
  readonly route_filter_prefixes: string[];
  readonly vlan: number;
  readonly dx_hosted_public_virtual_interface_id: string|null;
  readonly amazon_address: string|null;
  readonly arn: string|null;
  readonly bgp_auth_key: string|null;
  readonly customer_address: string|null;

  constructor({
    address_family,
    bgp_asn,
    connection_id,
    name,
    owner_account_id,
    route_filter_prefixes,
    vlan,
    dx_hosted_public_virtual_interface_id = null,
    amazon_address = null,
    arn = null,
    bgp_auth_key = null,
    customer_address = null
  }: {
    address_family: string,
    bgp_asn: number,
    connection_id: string,
    name: string,
    owner_account_id: string,
    route_filter_prefixes: string[],
    vlan: number,
    dx_hosted_public_virtual_interface_id?: string|null,
    amazon_address?: string|null,
    arn?: string|null,
    bgp_auth_key?: string|null,
    customer_address?: string|null
  }) {
    this.address_family = address_family;
    this.bgp_asn = bgp_asn;
    this.connection_id = connection_id;
    this.name = name;
    this.owner_account_id = owner_account_id;
    this.route_filter_prefixes = route_filter_prefixes;
    this.vlan = vlan;
    this.dx_hosted_public_virtual_interface_id = dx_hosted_public_virtual_interface_id;
    this.amazon_address = amazon_address;
    this.arn = arn;
    this.bgp_auth_key = bgp_auth_key;
    this.customer_address = customer_address;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['address_family'] = this.address_family;
    ih['bgp_asn'] = this.bgp_asn;
    ih['connection_id'] = this.connection_id;
    ih['name'] = this.name;
    ih['owner_account_id'] = this.owner_account_id;
    ih['route_filter_prefixes'] = this.route_filter_prefixes;
    ih['vlan'] = this.vlan;
    if (this.dx_hosted_public_virtual_interface_id !== null) {
      ih['dx_hosted_public_virtual_interface_id'] = this.dx_hosted_public_virtual_interface_id;
    }
    if (this.amazon_address !== null) {
      ih['amazon_address'] = this.amazon_address;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.bgp_auth_key !== null) {
      ih['bgp_auth_key'] = this.bgp_auth_key;
    }
    if (this.customer_address !== null) {
      ih['customer_address'] = this.customer_address;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dx_hosted_public_virtual_interface';
  }
}

export class Dx_hosted_public_virtual_interface_accepter implements PcoreValue {
  readonly virtual_interface_id: string;
  readonly dx_hosted_public_virtual_interface_accepter_id: string|null;
  readonly arn: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    virtual_interface_id,
    dx_hosted_public_virtual_interface_accepter_id = null,
    arn = null,
    tags = null
  }: {
    virtual_interface_id: string,
    dx_hosted_public_virtual_interface_accepter_id?: string|null,
    arn?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.virtual_interface_id = virtual_interface_id;
    this.dx_hosted_public_virtual_interface_accepter_id = dx_hosted_public_virtual_interface_accepter_id;
    this.arn = arn;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['virtual_interface_id'] = this.virtual_interface_id;
    if (this.dx_hosted_public_virtual_interface_accepter_id !== null) {
      ih['dx_hosted_public_virtual_interface_accepter_id'] = this.dx_hosted_public_virtual_interface_accepter_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dx_hosted_public_virtual_interface_accepter';
  }
}

export class Dx_lag implements PcoreValue {
  readonly connections_bandwidth: string;
  readonly location: string;
  readonly name: string;
  readonly dx_lag_id: string|null;
  readonly arn: string|null;
  readonly force_destroy: boolean;
  readonly tags: {[s: string]: string}|null;

  constructor({
    connections_bandwidth,
    location,
    name,
    dx_lag_id = null,
    arn = null,
    force_destroy = false,
    tags = null
  }: {
    connections_bandwidth: string,
    location: string,
    name: string,
    dx_lag_id?: string|null,
    arn?: string|null,
    force_destroy?: boolean,
    tags?: {[s: string]: string}|null
  }) {
    this.connections_bandwidth = connections_bandwidth;
    this.location = location;
    this.name = name;
    this.dx_lag_id = dx_lag_id;
    this.arn = arn;
    this.force_destroy = force_destroy;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['connections_bandwidth'] = this.connections_bandwidth;
    ih['location'] = this.location;
    ih['name'] = this.name;
    if (this.dx_lag_id !== null) {
      ih['dx_lag_id'] = this.dx_lag_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.force_destroy !== false) {
      ih['force_destroy'] = this.force_destroy;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dx_lag';
  }
}

export class Dx_private_virtual_interface implements PcoreValue {
  readonly address_family: string;
  readonly bgp_asn: number;
  readonly connection_id: string;
  readonly name: string;
  readonly vlan: number;
  readonly dx_private_virtual_interface_id: string|null;
  readonly amazon_address: string|null;
  readonly arn: string|null;
  readonly bgp_auth_key: string|null;
  readonly customer_address: string|null;
  readonly dx_gateway_id: string|null;
  readonly jumbo_frame_capable: boolean|null;
  readonly mtu: number;
  readonly tags: {[s: string]: string}|null;
  readonly vpn_gateway_id: string|null;

  constructor({
    address_family,
    bgp_asn,
    connection_id,
    name,
    vlan,
    dx_private_virtual_interface_id = null,
    amazon_address = null,
    arn = null,
    bgp_auth_key = null,
    customer_address = null,
    dx_gateway_id = null,
    jumbo_frame_capable = null,
    mtu = 1500,
    tags = null,
    vpn_gateway_id = null
  }: {
    address_family: string,
    bgp_asn: number,
    connection_id: string,
    name: string,
    vlan: number,
    dx_private_virtual_interface_id?: string|null,
    amazon_address?: string|null,
    arn?: string|null,
    bgp_auth_key?: string|null,
    customer_address?: string|null,
    dx_gateway_id?: string|null,
    jumbo_frame_capable?: boolean|null,
    mtu?: number,
    tags?: {[s: string]: string}|null,
    vpn_gateway_id?: string|null
  }) {
    this.address_family = address_family;
    this.bgp_asn = bgp_asn;
    this.connection_id = connection_id;
    this.name = name;
    this.vlan = vlan;
    this.dx_private_virtual_interface_id = dx_private_virtual_interface_id;
    this.amazon_address = amazon_address;
    this.arn = arn;
    this.bgp_auth_key = bgp_auth_key;
    this.customer_address = customer_address;
    this.dx_gateway_id = dx_gateway_id;
    this.jumbo_frame_capable = jumbo_frame_capable;
    this.mtu = mtu;
    this.tags = tags;
    this.vpn_gateway_id = vpn_gateway_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['address_family'] = this.address_family;
    ih['bgp_asn'] = this.bgp_asn;
    ih['connection_id'] = this.connection_id;
    ih['name'] = this.name;
    ih['vlan'] = this.vlan;
    if (this.dx_private_virtual_interface_id !== null) {
      ih['dx_private_virtual_interface_id'] = this.dx_private_virtual_interface_id;
    }
    if (this.amazon_address !== null) {
      ih['amazon_address'] = this.amazon_address;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.bgp_auth_key !== null) {
      ih['bgp_auth_key'] = this.bgp_auth_key;
    }
    if (this.customer_address !== null) {
      ih['customer_address'] = this.customer_address;
    }
    if (this.dx_gateway_id !== null) {
      ih['dx_gateway_id'] = this.dx_gateway_id;
    }
    if (this.jumbo_frame_capable !== null) {
      ih['jumbo_frame_capable'] = this.jumbo_frame_capable;
    }
    if (this.mtu !== 1500) {
      ih['mtu'] = this.mtu;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpn_gateway_id !== null) {
      ih['vpn_gateway_id'] = this.vpn_gateway_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dx_private_virtual_interface';
  }
}

export class Dx_public_virtual_interface implements PcoreValue {
  readonly address_family: string;
  readonly bgp_asn: number;
  readonly connection_id: string;
  readonly name: string;
  readonly route_filter_prefixes: string[];
  readonly vlan: number;
  readonly dx_public_virtual_interface_id: string|null;
  readonly amazon_address: string|null;
  readonly arn: string|null;
  readonly bgp_auth_key: string|null;
  readonly customer_address: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    address_family,
    bgp_asn,
    connection_id,
    name,
    route_filter_prefixes,
    vlan,
    dx_public_virtual_interface_id = null,
    amazon_address = null,
    arn = null,
    bgp_auth_key = null,
    customer_address = null,
    tags = null
  }: {
    address_family: string,
    bgp_asn: number,
    connection_id: string,
    name: string,
    route_filter_prefixes: string[],
    vlan: number,
    dx_public_virtual_interface_id?: string|null,
    amazon_address?: string|null,
    arn?: string|null,
    bgp_auth_key?: string|null,
    customer_address?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.address_family = address_family;
    this.bgp_asn = bgp_asn;
    this.connection_id = connection_id;
    this.name = name;
    this.route_filter_prefixes = route_filter_prefixes;
    this.vlan = vlan;
    this.dx_public_virtual_interface_id = dx_public_virtual_interface_id;
    this.amazon_address = amazon_address;
    this.arn = arn;
    this.bgp_auth_key = bgp_auth_key;
    this.customer_address = customer_address;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['address_family'] = this.address_family;
    ih['bgp_asn'] = this.bgp_asn;
    ih['connection_id'] = this.connection_id;
    ih['name'] = this.name;
    ih['route_filter_prefixes'] = this.route_filter_prefixes;
    ih['vlan'] = this.vlan;
    if (this.dx_public_virtual_interface_id !== null) {
      ih['dx_public_virtual_interface_id'] = this.dx_public_virtual_interface_id;
    }
    if (this.amazon_address !== null) {
      ih['amazon_address'] = this.amazon_address;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.bgp_auth_key !== null) {
      ih['bgp_auth_key'] = this.bgp_auth_key;
    }
    if (this.customer_address !== null) {
      ih['customer_address'] = this.customer_address;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dx_public_virtual_interface';
  }
}

export class Dynamodb_global_table implements PcoreValue {
  readonly name: string;
  readonly replica: Anon171[];
  readonly dynamodb_global_table_id: string|null;
  readonly arn: string|null;

  constructor({
    name,
    replica,
    dynamodb_global_table_id = null,
    arn = null
  }: {
    name: string,
    replica: Anon171[],
    dynamodb_global_table_id?: string|null,
    arn?: string|null
  }) {
    this.name = name;
    this.replica = replica;
    this.dynamodb_global_table_id = dynamodb_global_table_id;
    this.arn = arn;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['replica'] = this.replica;
    if (this.dynamodb_global_table_id !== null) {
      ih['dynamodb_global_table_id'] = this.dynamodb_global_table_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dynamodb_global_table';
  }
}

export class Dynamodb_table implements PcoreValue {
  readonly attribute: Anon172[];
  readonly hash_key: string;
  readonly name: string;
  readonly dynamodb_table_id: string|null;
  readonly arn: string|null;
  readonly billing_mode: string;
  readonly global_secondary_index: Anon173[]|null;
  readonly local_secondary_index: Anon174[]|null;
  readonly point_in_time_recovery: Anon175|null;
  readonly range_key: string|null;
  readonly read_capacity: number|null;
  readonly server_side_encryption: Anon175|null;
  readonly stream_arn: string|null;
  readonly stream_enabled: boolean|null;
  readonly stream_label: string|null;
  readonly stream_view_type: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly ttl: Anon176|null;
  readonly write_capacity: number|null;

  constructor({
    attribute,
    hash_key,
    name,
    dynamodb_table_id = null,
    arn = null,
    billing_mode = 'PROVISIONED',
    global_secondary_index = null,
    local_secondary_index = null,
    point_in_time_recovery = null,
    range_key = null,
    read_capacity = null,
    server_side_encryption = null,
    stream_arn = null,
    stream_enabled = null,
    stream_label = null,
    stream_view_type = null,
    tags = null,
    ttl = null,
    write_capacity = null
  }: {
    attribute: Anon172[],
    hash_key: string,
    name: string,
    dynamodb_table_id?: string|null,
    arn?: string|null,
    billing_mode?: string,
    global_secondary_index?: Anon173[]|null,
    local_secondary_index?: Anon174[]|null,
    point_in_time_recovery?: Anon175|null,
    range_key?: string|null,
    read_capacity?: number|null,
    server_side_encryption?: Anon175|null,
    stream_arn?: string|null,
    stream_enabled?: boolean|null,
    stream_label?: string|null,
    stream_view_type?: string|null,
    tags?: {[s: string]: string}|null,
    ttl?: Anon176|null,
    write_capacity?: number|null
  }) {
    this.attribute = attribute;
    this.hash_key = hash_key;
    this.name = name;
    this.dynamodb_table_id = dynamodb_table_id;
    this.arn = arn;
    this.billing_mode = billing_mode;
    this.global_secondary_index = global_secondary_index;
    this.local_secondary_index = local_secondary_index;
    this.point_in_time_recovery = point_in_time_recovery;
    this.range_key = range_key;
    this.read_capacity = read_capacity;
    this.server_side_encryption = server_side_encryption;
    this.stream_arn = stream_arn;
    this.stream_enabled = stream_enabled;
    this.stream_label = stream_label;
    this.stream_view_type = stream_view_type;
    this.tags = tags;
    this.ttl = ttl;
    this.write_capacity = write_capacity;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['attribute'] = this.attribute;
    ih['hash_key'] = this.hash_key;
    ih['name'] = this.name;
    if (this.dynamodb_table_id !== null) {
      ih['dynamodb_table_id'] = this.dynamodb_table_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.billing_mode !== 'PROVISIONED') {
      ih['billing_mode'] = this.billing_mode;
    }
    if (this.global_secondary_index !== null) {
      ih['global_secondary_index'] = this.global_secondary_index;
    }
    if (this.local_secondary_index !== null) {
      ih['local_secondary_index'] = this.local_secondary_index;
    }
    if (this.point_in_time_recovery !== null) {
      ih['point_in_time_recovery'] = this.point_in_time_recovery;
    }
    if (this.range_key !== null) {
      ih['range_key'] = this.range_key;
    }
    if (this.read_capacity !== null) {
      ih['read_capacity'] = this.read_capacity;
    }
    if (this.server_side_encryption !== null) {
      ih['server_side_encryption'] = this.server_side_encryption;
    }
    if (this.stream_arn !== null) {
      ih['stream_arn'] = this.stream_arn;
    }
    if (this.stream_enabled !== null) {
      ih['stream_enabled'] = this.stream_enabled;
    }
    if (this.stream_label !== null) {
      ih['stream_label'] = this.stream_label;
    }
    if (this.stream_view_type !== null) {
      ih['stream_view_type'] = this.stream_view_type;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.ttl !== null) {
      ih['ttl'] = this.ttl;
    }
    if (this.write_capacity !== null) {
      ih['write_capacity'] = this.write_capacity;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dynamodb_table';
  }
}

export class Dynamodb_table_item implements PcoreValue {
  readonly hash_key: string;
  readonly item: string;
  readonly table_name: string;
  readonly dynamodb_table_item_id: string|null;
  readonly range_key: string|null;

  constructor({
    hash_key,
    item,
    table_name,
    dynamodb_table_item_id = null,
    range_key = null
  }: {
    hash_key: string,
    item: string,
    table_name: string,
    dynamodb_table_item_id?: string|null,
    range_key?: string|null
  }) {
    this.hash_key = hash_key;
    this.item = item;
    this.table_name = table_name;
    this.dynamodb_table_item_id = dynamodb_table_item_id;
    this.range_key = range_key;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['hash_key'] = this.hash_key;
    ih['item'] = this.item;
    ih['table_name'] = this.table_name;
    if (this.dynamodb_table_item_id !== null) {
      ih['dynamodb_table_item_id'] = this.dynamodb_table_item_id;
    }
    if (this.range_key !== null) {
      ih['range_key'] = this.range_key;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Dynamodb_table_item';
  }
}

export class Ebs_snapshot implements PcoreValue {
  readonly volume_id: string;
  readonly ebs_snapshot_id: string|null;
  readonly data_encryption_key_id: string|null;
  readonly description: string|null;
  readonly encrypted: boolean|null;
  readonly kms_key_id: string|null;
  readonly owner_alias: string|null;
  readonly owner_id: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly volume_size: number|null;

  constructor({
    volume_id,
    ebs_snapshot_id = null,
    data_encryption_key_id = null,
    description = null,
    encrypted = null,
    kms_key_id = null,
    owner_alias = null,
    owner_id = null,
    tags = null,
    volume_size = null
  }: {
    volume_id: string,
    ebs_snapshot_id?: string|null,
    data_encryption_key_id?: string|null,
    description?: string|null,
    encrypted?: boolean|null,
    kms_key_id?: string|null,
    owner_alias?: string|null,
    owner_id?: string|null,
    tags?: {[s: string]: string}|null,
    volume_size?: number|null
  }) {
    this.volume_id = volume_id;
    this.ebs_snapshot_id = ebs_snapshot_id;
    this.data_encryption_key_id = data_encryption_key_id;
    this.description = description;
    this.encrypted = encrypted;
    this.kms_key_id = kms_key_id;
    this.owner_alias = owner_alias;
    this.owner_id = owner_id;
    this.tags = tags;
    this.volume_size = volume_size;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['volume_id'] = this.volume_id;
    if (this.ebs_snapshot_id !== null) {
      ih['ebs_snapshot_id'] = this.ebs_snapshot_id;
    }
    if (this.data_encryption_key_id !== null) {
      ih['data_encryption_key_id'] = this.data_encryption_key_id;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.encrypted !== null) {
      ih['encrypted'] = this.encrypted;
    }
    if (this.kms_key_id !== null) {
      ih['kms_key_id'] = this.kms_key_id;
    }
    if (this.owner_alias !== null) {
      ih['owner_alias'] = this.owner_alias;
    }
    if (this.owner_id !== null) {
      ih['owner_id'] = this.owner_id;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.volume_size !== null) {
      ih['volume_size'] = this.volume_size;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ebs_snapshot';
  }
}

export class Ebs_snapshot_copy implements PcoreValue {
  readonly source_region: string;
  readonly source_snapshot_id: string;
  readonly ebs_snapshot_copy_id: string|null;
  readonly data_encryption_key_id: string|null;
  readonly description: string|null;
  readonly encrypted: boolean|null;
  readonly kms_key_id: string|null;
  readonly owner_alias: string|null;
  readonly owner_id: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly volume_id: string|null;
  readonly volume_size: number|null;

  constructor({
    source_region,
    source_snapshot_id,
    ebs_snapshot_copy_id = null,
    data_encryption_key_id = null,
    description = null,
    encrypted = null,
    kms_key_id = null,
    owner_alias = null,
    owner_id = null,
    tags = null,
    volume_id = null,
    volume_size = null
  }: {
    source_region: string,
    source_snapshot_id: string,
    ebs_snapshot_copy_id?: string|null,
    data_encryption_key_id?: string|null,
    description?: string|null,
    encrypted?: boolean|null,
    kms_key_id?: string|null,
    owner_alias?: string|null,
    owner_id?: string|null,
    tags?: {[s: string]: string}|null,
    volume_id?: string|null,
    volume_size?: number|null
  }) {
    this.source_region = source_region;
    this.source_snapshot_id = source_snapshot_id;
    this.ebs_snapshot_copy_id = ebs_snapshot_copy_id;
    this.data_encryption_key_id = data_encryption_key_id;
    this.description = description;
    this.encrypted = encrypted;
    this.kms_key_id = kms_key_id;
    this.owner_alias = owner_alias;
    this.owner_id = owner_id;
    this.tags = tags;
    this.volume_id = volume_id;
    this.volume_size = volume_size;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['source_region'] = this.source_region;
    ih['source_snapshot_id'] = this.source_snapshot_id;
    if (this.ebs_snapshot_copy_id !== null) {
      ih['ebs_snapshot_copy_id'] = this.ebs_snapshot_copy_id;
    }
    if (this.data_encryption_key_id !== null) {
      ih['data_encryption_key_id'] = this.data_encryption_key_id;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.encrypted !== null) {
      ih['encrypted'] = this.encrypted;
    }
    if (this.kms_key_id !== null) {
      ih['kms_key_id'] = this.kms_key_id;
    }
    if (this.owner_alias !== null) {
      ih['owner_alias'] = this.owner_alias;
    }
    if (this.owner_id !== null) {
      ih['owner_id'] = this.owner_id;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.volume_id !== null) {
      ih['volume_id'] = this.volume_id;
    }
    if (this.volume_size !== null) {
      ih['volume_size'] = this.volume_size;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ebs_snapshot_copy';
  }
}

export class Ebs_volume implements PcoreValue {
  readonly availability_zone: string;
  readonly ebs_volume_id: string|null;
  readonly arn: string|null;
  readonly encrypted: boolean|null;
  readonly iops: number|null;
  readonly kms_key_id: string|null;
  readonly size: number|null;
  readonly snapshot_id: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly type: string|null;

  constructor({
    availability_zone,
    ebs_volume_id = null,
    arn = null,
    encrypted = null,
    iops = null,
    kms_key_id = null,
    size = null,
    snapshot_id = null,
    tags = null,
    type = null
  }: {
    availability_zone: string,
    ebs_volume_id?: string|null,
    arn?: string|null,
    encrypted?: boolean|null,
    iops?: number|null,
    kms_key_id?: string|null,
    size?: number|null,
    snapshot_id?: string|null,
    tags?: {[s: string]: string}|null,
    type?: string|null
  }) {
    this.availability_zone = availability_zone;
    this.ebs_volume_id = ebs_volume_id;
    this.arn = arn;
    this.encrypted = encrypted;
    this.iops = iops;
    this.kms_key_id = kms_key_id;
    this.size = size;
    this.snapshot_id = snapshot_id;
    this.tags = tags;
    this.type = type;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['availability_zone'] = this.availability_zone;
    if (this.ebs_volume_id !== null) {
      ih['ebs_volume_id'] = this.ebs_volume_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.encrypted !== null) {
      ih['encrypted'] = this.encrypted;
    }
    if (this.iops !== null) {
      ih['iops'] = this.iops;
    }
    if (this.kms_key_id !== null) {
      ih['kms_key_id'] = this.kms_key_id;
    }
    if (this.size !== null) {
      ih['size'] = this.size;
    }
    if (this.snapshot_id !== null) {
      ih['snapshot_id'] = this.snapshot_id;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.type !== null) {
      ih['type'] = this.type;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ebs_volume';
  }
}

export class Ec2_capacity_reservation implements PcoreValue {
  readonly availability_zone: string;
  readonly instance_count: number;
  readonly instance_platform: string;
  readonly instance_type: string;
  readonly ec2_capacity_reservation_id: string|null;
  readonly ebs_optimized: boolean;
  readonly end_date: |null;
  readonly end_date_type: string;
  readonly ephemeral_storage: boolean;
  readonly instance_match_criteria: string;
  readonly tags: {[s: string]: string}|null;
  readonly tenancy: string;

  constructor({
    availability_zone,
    instance_count,
    instance_platform,
    instance_type,
    ec2_capacity_reservation_id = null,
    ebs_optimized = false,
    end_date = null,
    end_date_type = 'unlimited',
    ephemeral_storage = false,
    instance_match_criteria = 'open',
    tags = null,
    tenancy = 'default'
  }: {
    availability_zone: string,
    instance_count: number,
    instance_platform: string,
    instance_type: string,
    ec2_capacity_reservation_id?: string|null,
    ebs_optimized?: boolean,
    end_date?: |null,
    end_date_type?: string,
    ephemeral_storage?: boolean,
    instance_match_criteria?: string,
    tags?: {[s: string]: string}|null,
    tenancy?: string
  }) {
    this.availability_zone = availability_zone;
    this.instance_count = instance_count;
    this.instance_platform = instance_platform;
    this.instance_type = instance_type;
    this.ec2_capacity_reservation_id = ec2_capacity_reservation_id;
    this.ebs_optimized = ebs_optimized;
    this.end_date = end_date;
    this.end_date_type = end_date_type;
    this.ephemeral_storage = ephemeral_storage;
    this.instance_match_criteria = instance_match_criteria;
    this.tags = tags;
    this.tenancy = tenancy;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['availability_zone'] = this.availability_zone;
    ih['instance_count'] = this.instance_count;
    ih['instance_platform'] = this.instance_platform;
    ih['instance_type'] = this.instance_type;
    if (this.ec2_capacity_reservation_id !== null) {
      ih['ec2_capacity_reservation_id'] = this.ec2_capacity_reservation_id;
    }
    if (this.ebs_optimized !== false) {
      ih['ebs_optimized'] = this.ebs_optimized;
    }
    if (this.end_date !== null) {
      ih['end_date'] = this.end_date;
    }
    if (this.end_date_type !== 'unlimited') {
      ih['end_date_type'] = this.end_date_type;
    }
    if (this.ephemeral_storage !== false) {
      ih['ephemeral_storage'] = this.ephemeral_storage;
    }
    if (this.instance_match_criteria !== 'open') {
      ih['instance_match_criteria'] = this.instance_match_criteria;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.tenancy !== 'default') {
      ih['tenancy'] = this.tenancy;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ec2_capacity_reservation';
  }
}

export class Ec2_fleet implements PcoreValue {
  readonly launch_template_config: Anon179;
  readonly target_capacity_specification: Anon180;
  readonly ec2_fleet_id: string|null;
  readonly excess_capacity_termination_policy: string;
  readonly on_demand_options: Anon181|null;
  readonly replace_unhealthy_instances: boolean|null;
  readonly spot_options: Anon182|null;
  readonly tags: {[s: string]: string}|null;
  readonly terminate_instances: boolean;
  readonly terminate_instances_with_expiration: boolean|null;
  readonly type: string;

  constructor({
    launch_template_config,
    target_capacity_specification,
    ec2_fleet_id = null,
    excess_capacity_termination_policy = 'termination',
    on_demand_options = null,
    replace_unhealthy_instances = null,
    spot_options = null,
    tags = null,
    terminate_instances = false,
    terminate_instances_with_expiration = null,
    type = 'maintain'
  }: {
    launch_template_config: Anon179,
    target_capacity_specification: Anon180,
    ec2_fleet_id?: string|null,
    excess_capacity_termination_policy?: string,
    on_demand_options?: Anon181|null,
    replace_unhealthy_instances?: boolean|null,
    spot_options?: Anon182|null,
    tags?: {[s: string]: string}|null,
    terminate_instances?: boolean,
    terminate_instances_with_expiration?: boolean|null,
    type?: string
  }) {
    this.launch_template_config = launch_template_config;
    this.target_capacity_specification = target_capacity_specification;
    this.ec2_fleet_id = ec2_fleet_id;
    this.excess_capacity_termination_policy = excess_capacity_termination_policy;
    this.on_demand_options = on_demand_options;
    this.replace_unhealthy_instances = replace_unhealthy_instances;
    this.spot_options = spot_options;
    this.tags = tags;
    this.terminate_instances = terminate_instances;
    this.terminate_instances_with_expiration = terminate_instances_with_expiration;
    this.type = type;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['launch_template_config'] = this.launch_template_config;
    ih['target_capacity_specification'] = this.target_capacity_specification;
    if (this.ec2_fleet_id !== null) {
      ih['ec2_fleet_id'] = this.ec2_fleet_id;
    }
    if (this.excess_capacity_termination_policy !== 'termination') {
      ih['excess_capacity_termination_policy'] = this.excess_capacity_termination_policy;
    }
    if (this.on_demand_options !== null) {
      ih['on_demand_options'] = this.on_demand_options;
    }
    if (this.replace_unhealthy_instances !== null) {
      ih['replace_unhealthy_instances'] = this.replace_unhealthy_instances;
    }
    if (this.spot_options !== null) {
      ih['spot_options'] = this.spot_options;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.terminate_instances !== false) {
      ih['terminate_instances'] = this.terminate_instances;
    }
    if (this.terminate_instances_with_expiration !== null) {
      ih['terminate_instances_with_expiration'] = this.terminate_instances_with_expiration;
    }
    if (this.type !== 'maintain') {
      ih['type'] = this.type;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ec2_fleet';
  }
}

export class Ec2_transit_gateway implements PcoreValue {
  readonly ec2_transit_gateway_id: string|null;
  readonly amazon_side_asn: number;
  readonly arn: string|null;
  readonly association_default_route_table_id: string|null;
  readonly auto_accept_shared_attachments: string;
  readonly default_route_table_association: string;
  readonly default_route_table_propagation: string;
  readonly description: string|null;
  readonly dns_support: string;
  readonly owner_id: string|null;
  readonly propagation_default_route_table_id: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly vpn_ecmp_support: string;

  constructor({
    ec2_transit_gateway_id = null,
    amazon_side_asn = 64512,
    arn = null,
    association_default_route_table_id = null,
    auto_accept_shared_attachments = 'disable',
    default_route_table_association = 'enable',
    default_route_table_propagation = 'enable',
    description = null,
    dns_support = 'enable',
    owner_id = null,
    propagation_default_route_table_id = null,
    tags = null,
    vpn_ecmp_support = 'enable'
  }: {
    ec2_transit_gateway_id?: string|null,
    amazon_side_asn?: number,
    arn?: string|null,
    association_default_route_table_id?: string|null,
    auto_accept_shared_attachments?: string,
    default_route_table_association?: string,
    default_route_table_propagation?: string,
    description?: string|null,
    dns_support?: string,
    owner_id?: string|null,
    propagation_default_route_table_id?: string|null,
    tags?: {[s: string]: string}|null,
    vpn_ecmp_support?: string
  }) {
    this.ec2_transit_gateway_id = ec2_transit_gateway_id;
    this.amazon_side_asn = amazon_side_asn;
    this.arn = arn;
    this.association_default_route_table_id = association_default_route_table_id;
    this.auto_accept_shared_attachments = auto_accept_shared_attachments;
    this.default_route_table_association = default_route_table_association;
    this.default_route_table_propagation = default_route_table_propagation;
    this.description = description;
    this.dns_support = dns_support;
    this.owner_id = owner_id;
    this.propagation_default_route_table_id = propagation_default_route_table_id;
    this.tags = tags;
    this.vpn_ecmp_support = vpn_ecmp_support;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.ec2_transit_gateway_id !== null) {
      ih['ec2_transit_gateway_id'] = this.ec2_transit_gateway_id;
    }
    if (this.amazon_side_asn !== 64512) {
      ih['amazon_side_asn'] = this.amazon_side_asn;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.association_default_route_table_id !== null) {
      ih['association_default_route_table_id'] = this.association_default_route_table_id;
    }
    if (this.auto_accept_shared_attachments !== 'disable') {
      ih['auto_accept_shared_attachments'] = this.auto_accept_shared_attachments;
    }
    if (this.default_route_table_association !== 'enable') {
      ih['default_route_table_association'] = this.default_route_table_association;
    }
    if (this.default_route_table_propagation !== 'enable') {
      ih['default_route_table_propagation'] = this.default_route_table_propagation;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.dns_support !== 'enable') {
      ih['dns_support'] = this.dns_support;
    }
    if (this.owner_id !== null) {
      ih['owner_id'] = this.owner_id;
    }
    if (this.propagation_default_route_table_id !== null) {
      ih['propagation_default_route_table_id'] = this.propagation_default_route_table_id;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpn_ecmp_support !== 'enable') {
      ih['vpn_ecmp_support'] = this.vpn_ecmp_support;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ec2_transit_gateway';
  }
}

export class Ec2_transit_gateway_route implements PcoreValue {
  readonly destination_cidr_block: string;
  readonly transit_gateway_attachment_id: string;
  readonly transit_gateway_route_table_id: string;
  readonly ec2_transit_gateway_route_id: string|null;

  constructor({
    destination_cidr_block,
    transit_gateway_attachment_id,
    transit_gateway_route_table_id,
    ec2_transit_gateway_route_id = null
  }: {
    destination_cidr_block: string,
    transit_gateway_attachment_id: string,
    transit_gateway_route_table_id: string,
    ec2_transit_gateway_route_id?: string|null
  }) {
    this.destination_cidr_block = destination_cidr_block;
    this.transit_gateway_attachment_id = transit_gateway_attachment_id;
    this.transit_gateway_route_table_id = transit_gateway_route_table_id;
    this.ec2_transit_gateway_route_id = ec2_transit_gateway_route_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['destination_cidr_block'] = this.destination_cidr_block;
    ih['transit_gateway_attachment_id'] = this.transit_gateway_attachment_id;
    ih['transit_gateway_route_table_id'] = this.transit_gateway_route_table_id;
    if (this.ec2_transit_gateway_route_id !== null) {
      ih['ec2_transit_gateway_route_id'] = this.ec2_transit_gateway_route_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ec2_transit_gateway_route';
  }
}

export class Ec2_transit_gateway_route_table implements PcoreValue {
  readonly transit_gateway_id: string;
  readonly ec2_transit_gateway_route_table_id: string|null;
  readonly default_association_route_table: boolean|null;
  readonly default_propagation_route_table: boolean|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    transit_gateway_id,
    ec2_transit_gateway_route_table_id = null,
    default_association_route_table = null,
    default_propagation_route_table = null,
    tags = null
  }: {
    transit_gateway_id: string,
    ec2_transit_gateway_route_table_id?: string|null,
    default_association_route_table?: boolean|null,
    default_propagation_route_table?: boolean|null,
    tags?: {[s: string]: string}|null
  }) {
    this.transit_gateway_id = transit_gateway_id;
    this.ec2_transit_gateway_route_table_id = ec2_transit_gateway_route_table_id;
    this.default_association_route_table = default_association_route_table;
    this.default_propagation_route_table = default_propagation_route_table;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['transit_gateway_id'] = this.transit_gateway_id;
    if (this.ec2_transit_gateway_route_table_id !== null) {
      ih['ec2_transit_gateway_route_table_id'] = this.ec2_transit_gateway_route_table_id;
    }
    if (this.default_association_route_table !== null) {
      ih['default_association_route_table'] = this.default_association_route_table;
    }
    if (this.default_propagation_route_table !== null) {
      ih['default_propagation_route_table'] = this.default_propagation_route_table;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ec2_transit_gateway_route_table';
  }
}

export class Ec2_transit_gateway_route_table_association implements PcoreValue {
  readonly transit_gateway_attachment_id: string;
  readonly transit_gateway_route_table_id: string;
  readonly ec2_transit_gateway_route_table_association_id: string|null;
  readonly resource_id: string|null;
  readonly resource_type: string|null;

  constructor({
    transit_gateway_attachment_id,
    transit_gateway_route_table_id,
    ec2_transit_gateway_route_table_association_id = null,
    resource_id = null,
    resource_type = null
  }: {
    transit_gateway_attachment_id: string,
    transit_gateway_route_table_id: string,
    ec2_transit_gateway_route_table_association_id?: string|null,
    resource_id?: string|null,
    resource_type?: string|null
  }) {
    this.transit_gateway_attachment_id = transit_gateway_attachment_id;
    this.transit_gateway_route_table_id = transit_gateway_route_table_id;
    this.ec2_transit_gateway_route_table_association_id = ec2_transit_gateway_route_table_association_id;
    this.resource_id = resource_id;
    this.resource_type = resource_type;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['transit_gateway_attachment_id'] = this.transit_gateway_attachment_id;
    ih['transit_gateway_route_table_id'] = this.transit_gateway_route_table_id;
    if (this.ec2_transit_gateway_route_table_association_id !== null) {
      ih['ec2_transit_gateway_route_table_association_id'] = this.ec2_transit_gateway_route_table_association_id;
    }
    if (this.resource_id !== null) {
      ih['resource_id'] = this.resource_id;
    }
    if (this.resource_type !== null) {
      ih['resource_type'] = this.resource_type;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ec2_transit_gateway_route_table_association';
  }
}

export class Ec2_transit_gateway_route_table_propagation implements PcoreValue {
  readonly transit_gateway_attachment_id: string;
  readonly transit_gateway_route_table_id: string;
  readonly ec2_transit_gateway_route_table_propagation_id: string|null;
  readonly resource_id: string|null;
  readonly resource_type: string|null;

  constructor({
    transit_gateway_attachment_id,
    transit_gateway_route_table_id,
    ec2_transit_gateway_route_table_propagation_id = null,
    resource_id = null,
    resource_type = null
  }: {
    transit_gateway_attachment_id: string,
    transit_gateway_route_table_id: string,
    ec2_transit_gateway_route_table_propagation_id?: string|null,
    resource_id?: string|null,
    resource_type?: string|null
  }) {
    this.transit_gateway_attachment_id = transit_gateway_attachment_id;
    this.transit_gateway_route_table_id = transit_gateway_route_table_id;
    this.ec2_transit_gateway_route_table_propagation_id = ec2_transit_gateway_route_table_propagation_id;
    this.resource_id = resource_id;
    this.resource_type = resource_type;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['transit_gateway_attachment_id'] = this.transit_gateway_attachment_id;
    ih['transit_gateway_route_table_id'] = this.transit_gateway_route_table_id;
    if (this.ec2_transit_gateway_route_table_propagation_id !== null) {
      ih['ec2_transit_gateway_route_table_propagation_id'] = this.ec2_transit_gateway_route_table_propagation_id;
    }
    if (this.resource_id !== null) {
      ih['resource_id'] = this.resource_id;
    }
    if (this.resource_type !== null) {
      ih['resource_type'] = this.resource_type;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ec2_transit_gateway_route_table_propagation';
  }
}

export class Ec2_transit_gateway_vpc_attachment implements PcoreValue {
  readonly subnet_ids: string[];
  readonly transit_gateway_id: string;
  readonly vpc_id: string;
  readonly ec2_transit_gateway_vpc_attachment_id: string|null;
  readonly dns_support: string;
  readonly ipv6_support: string;
  readonly tags: {[s: string]: string}|null;
  readonly transit_gateway_default_route_table_association: boolean;
  readonly transit_gateway_default_route_table_propagation: boolean;
  readonly vpc_owner_id: string|null;

  constructor({
    subnet_ids,
    transit_gateway_id,
    vpc_id,
    ec2_transit_gateway_vpc_attachment_id = null,
    dns_support = 'enable',
    ipv6_support = 'disable',
    tags = null,
    transit_gateway_default_route_table_association = true,
    transit_gateway_default_route_table_propagation = true,
    vpc_owner_id = null
  }: {
    subnet_ids: string[],
    transit_gateway_id: string,
    vpc_id: string,
    ec2_transit_gateway_vpc_attachment_id?: string|null,
    dns_support?: string,
    ipv6_support?: string,
    tags?: {[s: string]: string}|null,
    transit_gateway_default_route_table_association?: boolean,
    transit_gateway_default_route_table_propagation?: boolean,
    vpc_owner_id?: string|null
  }) {
    this.subnet_ids = subnet_ids;
    this.transit_gateway_id = transit_gateway_id;
    this.vpc_id = vpc_id;
    this.ec2_transit_gateway_vpc_attachment_id = ec2_transit_gateway_vpc_attachment_id;
    this.dns_support = dns_support;
    this.ipv6_support = ipv6_support;
    this.tags = tags;
    this.transit_gateway_default_route_table_association = transit_gateway_default_route_table_association;
    this.transit_gateway_default_route_table_propagation = transit_gateway_default_route_table_propagation;
    this.vpc_owner_id = vpc_owner_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['subnet_ids'] = this.subnet_ids;
    ih['transit_gateway_id'] = this.transit_gateway_id;
    ih['vpc_id'] = this.vpc_id;
    if (this.ec2_transit_gateway_vpc_attachment_id !== null) {
      ih['ec2_transit_gateway_vpc_attachment_id'] = this.ec2_transit_gateway_vpc_attachment_id;
    }
    if (this.dns_support !== 'enable') {
      ih['dns_support'] = this.dns_support;
    }
    if (this.ipv6_support !== 'disable') {
      ih['ipv6_support'] = this.ipv6_support;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.transit_gateway_default_route_table_association !== true) {
      ih['transit_gateway_default_route_table_association'] = this.transit_gateway_default_route_table_association;
    }
    if (this.transit_gateway_default_route_table_propagation !== true) {
      ih['transit_gateway_default_route_table_propagation'] = this.transit_gateway_default_route_table_propagation;
    }
    if (this.vpc_owner_id !== null) {
      ih['vpc_owner_id'] = this.vpc_owner_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ec2_transit_gateway_vpc_attachment';
  }
}

export class Ecr_lifecycle_policy implements PcoreValue {
  readonly policy: string;
  readonly repository: string;
  readonly ecr_lifecycle_policy_id: string|null;
  readonly registry_id: string|null;

  constructor({
    policy,
    repository,
    ecr_lifecycle_policy_id = null,
    registry_id = null
  }: {
    policy: string,
    repository: string,
    ecr_lifecycle_policy_id?: string|null,
    registry_id?: string|null
  }) {
    this.policy = policy;
    this.repository = repository;
    this.ecr_lifecycle_policy_id = ecr_lifecycle_policy_id;
    this.registry_id = registry_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['policy'] = this.policy;
    ih['repository'] = this.repository;
    if (this.ecr_lifecycle_policy_id !== null) {
      ih['ecr_lifecycle_policy_id'] = this.ecr_lifecycle_policy_id;
    }
    if (this.registry_id !== null) {
      ih['registry_id'] = this.registry_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ecr_lifecycle_policy';
  }
}

export class Ecr_repository implements PcoreValue {
  readonly name: string;
  readonly ecr_repository_id: string|null;
  readonly arn: string|null;
  readonly registry_id: string|null;
  readonly repository_url: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    name,
    ecr_repository_id = null,
    arn = null,
    registry_id = null,
    repository_url = null,
    tags = null
  }: {
    name: string,
    ecr_repository_id?: string|null,
    arn?: string|null,
    registry_id?: string|null,
    repository_url?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.name = name;
    this.ecr_repository_id = ecr_repository_id;
    this.arn = arn;
    this.registry_id = registry_id;
    this.repository_url = repository_url;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.ecr_repository_id !== null) {
      ih['ecr_repository_id'] = this.ecr_repository_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.registry_id !== null) {
      ih['registry_id'] = this.registry_id;
    }
    if (this.repository_url !== null) {
      ih['repository_url'] = this.repository_url;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ecr_repository';
  }
}

export class Ecr_repository_policy implements PcoreValue {
  readonly policy: string;
  readonly repository: string;
  readonly ecr_repository_policy_id: string|null;
  readonly registry_id: string|null;

  constructor({
    policy,
    repository,
    ecr_repository_policy_id = null,
    registry_id = null
  }: {
    policy: string,
    repository: string,
    ecr_repository_policy_id?: string|null,
    registry_id?: string|null
  }) {
    this.policy = policy;
    this.repository = repository;
    this.ecr_repository_policy_id = ecr_repository_policy_id;
    this.registry_id = registry_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['policy'] = this.policy;
    ih['repository'] = this.repository;
    if (this.ecr_repository_policy_id !== null) {
      ih['ecr_repository_policy_id'] = this.ecr_repository_policy_id;
    }
    if (this.registry_id !== null) {
      ih['registry_id'] = this.registry_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ecr_repository_policy';
  }
}

export class Ecs_cluster implements PcoreValue {
  readonly name: string;
  readonly ecs_cluster_id: string|null;
  readonly arn: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    name,
    ecs_cluster_id = null,
    arn = null,
    tags = null
  }: {
    name: string,
    ecs_cluster_id?: string|null,
    arn?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.name = name;
    this.ecs_cluster_id = ecs_cluster_id;
    this.arn = arn;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.ecs_cluster_id !== null) {
      ih['ecs_cluster_id'] = this.ecs_cluster_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ecs_cluster';
  }
}

export class Ecs_service implements PcoreValue {
  readonly name: string;
  readonly task_definition: string;
  readonly ecs_service_id: string|null;
  readonly cluster: string|null;
  readonly deployment_controller: Anon183|null;
  readonly deployment_maximum_percent: number;
  readonly deployment_minimum_healthy_percent: number;
  readonly desired_count: number|null;
  readonly enable_ecs_managed_tags: boolean;
  readonly health_check_grace_period_seconds: number|null;
  readonly iam_role: string|null;
  readonly launch_type: string;
  readonly load_balancer: Anon184|null;
  readonly network_configuration: Anon85|null;
  readonly ordered_placement_strategy: Anon185[]|null;
  readonly placement_constraints: Anon186[]|null;
  readonly platform_version: string|null;
  readonly propagate_tags: string|null;
  readonly scheduling_strategy: string;
  readonly service_registries: Anon187|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    name,
    task_definition,
    ecs_service_id = null,
    cluster = null,
    deployment_controller = null,
    deployment_maximum_percent = 200,
    deployment_minimum_healthy_percent = 100,
    desired_count = null,
    enable_ecs_managed_tags = false,
    health_check_grace_period_seconds = null,
    iam_role = null,
    launch_type = 'EC2',
    load_balancer = null,
    network_configuration = null,
    ordered_placement_strategy = null,
    placement_constraints = null,
    platform_version = null,
    propagate_tags = null,
    scheduling_strategy = 'REPLICA',
    service_registries = null,
    tags = null
  }: {
    name: string,
    task_definition: string,
    ecs_service_id?: string|null,
    cluster?: string|null,
    deployment_controller?: Anon183|null,
    deployment_maximum_percent?: number,
    deployment_minimum_healthy_percent?: number,
    desired_count?: number|null,
    enable_ecs_managed_tags?: boolean,
    health_check_grace_period_seconds?: number|null,
    iam_role?: string|null,
    launch_type?: string,
    load_balancer?: Anon184|null,
    network_configuration?: Anon85|null,
    ordered_placement_strategy?: Anon185[]|null,
    placement_constraints?: Anon186[]|null,
    platform_version?: string|null,
    propagate_tags?: string|null,
    scheduling_strategy?: string,
    service_registries?: Anon187|null,
    tags?: {[s: string]: string}|null
  }) {
    this.name = name;
    this.task_definition = task_definition;
    this.ecs_service_id = ecs_service_id;
    this.cluster = cluster;
    this.deployment_controller = deployment_controller;
    this.deployment_maximum_percent = deployment_maximum_percent;
    this.deployment_minimum_healthy_percent = deployment_minimum_healthy_percent;
    this.desired_count = desired_count;
    this.enable_ecs_managed_tags = enable_ecs_managed_tags;
    this.health_check_grace_period_seconds = health_check_grace_period_seconds;
    this.iam_role = iam_role;
    this.launch_type = launch_type;
    this.load_balancer = load_balancer;
    this.network_configuration = network_configuration;
    this.ordered_placement_strategy = ordered_placement_strategy;
    this.placement_constraints = placement_constraints;
    this.platform_version = platform_version;
    this.propagate_tags = propagate_tags;
    this.scheduling_strategy = scheduling_strategy;
    this.service_registries = service_registries;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['task_definition'] = this.task_definition;
    if (this.ecs_service_id !== null) {
      ih['ecs_service_id'] = this.ecs_service_id;
    }
    if (this.cluster !== null) {
      ih['cluster'] = this.cluster;
    }
    if (this.deployment_controller !== null) {
      ih['deployment_controller'] = this.deployment_controller;
    }
    if (this.deployment_maximum_percent !== 200) {
      ih['deployment_maximum_percent'] = this.deployment_maximum_percent;
    }
    if (this.deployment_minimum_healthy_percent !== 100) {
      ih['deployment_minimum_healthy_percent'] = this.deployment_minimum_healthy_percent;
    }
    if (this.desired_count !== null) {
      ih['desired_count'] = this.desired_count;
    }
    if (this.enable_ecs_managed_tags !== false) {
      ih['enable_ecs_managed_tags'] = this.enable_ecs_managed_tags;
    }
    if (this.health_check_grace_period_seconds !== null) {
      ih['health_check_grace_period_seconds'] = this.health_check_grace_period_seconds;
    }
    if (this.iam_role !== null) {
      ih['iam_role'] = this.iam_role;
    }
    if (this.launch_type !== 'EC2') {
      ih['launch_type'] = this.launch_type;
    }
    if (this.load_balancer !== null) {
      ih['load_balancer'] = this.load_balancer;
    }
    if (this.network_configuration !== null) {
      ih['network_configuration'] = this.network_configuration;
    }
    if (this.ordered_placement_strategy !== null) {
      ih['ordered_placement_strategy'] = this.ordered_placement_strategy;
    }
    if (this.placement_constraints !== null) {
      ih['placement_constraints'] = this.placement_constraints;
    }
    if (this.platform_version !== null) {
      ih['platform_version'] = this.platform_version;
    }
    if (this.propagate_tags !== null) {
      ih['propagate_tags'] = this.propagate_tags;
    }
    if (this.scheduling_strategy !== 'REPLICA') {
      ih['scheduling_strategy'] = this.scheduling_strategy;
    }
    if (this.service_registries !== null) {
      ih['service_registries'] = this.service_registries;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ecs_service';
  }
}

export class Ecs_task_definition implements PcoreValue {
  readonly container_definitions: string;
  readonly family: string;
  readonly ecs_task_definition_id: string|null;
  readonly arn: string|null;
  readonly cpu: string|null;
  readonly execution_role_arn: string|null;
  readonly ipc_mode: string|null;
  readonly memory: string|null;
  readonly network_mode: string|null;
  readonly pid_mode: string|null;
  readonly placement_constraints: Anon186[]|null;
  readonly requires_compatibilities: string[]|null;
  readonly revision: number|null;
  readonly tags: {[s: string]: string}|null;
  readonly task_role_arn: string|null;
  readonly volume: Anon189[]|null;

  constructor({
    container_definitions,
    family,
    ecs_task_definition_id = null,
    arn = null,
    cpu = null,
    execution_role_arn = null,
    ipc_mode = null,
    memory = null,
    network_mode = null,
    pid_mode = null,
    placement_constraints = null,
    requires_compatibilities = null,
    revision = null,
    tags = null,
    task_role_arn = null,
    volume = null
  }: {
    container_definitions: string,
    family: string,
    ecs_task_definition_id?: string|null,
    arn?: string|null,
    cpu?: string|null,
    execution_role_arn?: string|null,
    ipc_mode?: string|null,
    memory?: string|null,
    network_mode?: string|null,
    pid_mode?: string|null,
    placement_constraints?: Anon186[]|null,
    requires_compatibilities?: string[]|null,
    revision?: number|null,
    tags?: {[s: string]: string}|null,
    task_role_arn?: string|null,
    volume?: Anon189[]|null
  }) {
    this.container_definitions = container_definitions;
    this.family = family;
    this.ecs_task_definition_id = ecs_task_definition_id;
    this.arn = arn;
    this.cpu = cpu;
    this.execution_role_arn = execution_role_arn;
    this.ipc_mode = ipc_mode;
    this.memory = memory;
    this.network_mode = network_mode;
    this.pid_mode = pid_mode;
    this.placement_constraints = placement_constraints;
    this.requires_compatibilities = requires_compatibilities;
    this.revision = revision;
    this.tags = tags;
    this.task_role_arn = task_role_arn;
    this.volume = volume;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['container_definitions'] = this.container_definitions;
    ih['family'] = this.family;
    if (this.ecs_task_definition_id !== null) {
      ih['ecs_task_definition_id'] = this.ecs_task_definition_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.cpu !== null) {
      ih['cpu'] = this.cpu;
    }
    if (this.execution_role_arn !== null) {
      ih['execution_role_arn'] = this.execution_role_arn;
    }
    if (this.ipc_mode !== null) {
      ih['ipc_mode'] = this.ipc_mode;
    }
    if (this.memory !== null) {
      ih['memory'] = this.memory;
    }
    if (this.network_mode !== null) {
      ih['network_mode'] = this.network_mode;
    }
    if (this.pid_mode !== null) {
      ih['pid_mode'] = this.pid_mode;
    }
    if (this.placement_constraints !== null) {
      ih['placement_constraints'] = this.placement_constraints;
    }
    if (this.requires_compatibilities !== null) {
      ih['requires_compatibilities'] = this.requires_compatibilities;
    }
    if (this.revision !== null) {
      ih['revision'] = this.revision;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.task_role_arn !== null) {
      ih['task_role_arn'] = this.task_role_arn;
    }
    if (this.volume !== null) {
      ih['volume'] = this.volume;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ecs_task_definition';
  }
}

export class Efs_file_system implements PcoreValue {
  readonly efs_file_system_id: string|null;
  readonly arn: string|null;
  readonly creation_token: string|null;
  readonly dns_name: string|null;
  readonly encrypted: boolean|null;
  readonly kms_key_id: string|null;
  readonly performance_mode: string|null;
  readonly provisioned_throughput_in_mibps: number|null;
  readonly tags: {[s: string]: string}|null;
  readonly throughput_mode: string;

  constructor({
    efs_file_system_id = null,
    arn = null,
    creation_token = null,
    dns_name = null,
    encrypted = null,
    kms_key_id = null,
    performance_mode = null,
    provisioned_throughput_in_mibps = null,
    tags = null,
    throughput_mode = 'bursting'
  }: {
    efs_file_system_id?: string|null,
    arn?: string|null,
    creation_token?: string|null,
    dns_name?: string|null,
    encrypted?: boolean|null,
    kms_key_id?: string|null,
    performance_mode?: string|null,
    provisioned_throughput_in_mibps?: number|null,
    tags?: {[s: string]: string}|null,
    throughput_mode?: string
  }) {
    this.efs_file_system_id = efs_file_system_id;
    this.arn = arn;
    this.creation_token = creation_token;
    this.dns_name = dns_name;
    this.encrypted = encrypted;
    this.kms_key_id = kms_key_id;
    this.performance_mode = performance_mode;
    this.provisioned_throughput_in_mibps = provisioned_throughput_in_mibps;
    this.tags = tags;
    this.throughput_mode = throughput_mode;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.efs_file_system_id !== null) {
      ih['efs_file_system_id'] = this.efs_file_system_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.creation_token !== null) {
      ih['creation_token'] = this.creation_token;
    }
    if (this.dns_name !== null) {
      ih['dns_name'] = this.dns_name;
    }
    if (this.encrypted !== null) {
      ih['encrypted'] = this.encrypted;
    }
    if (this.kms_key_id !== null) {
      ih['kms_key_id'] = this.kms_key_id;
    }
    if (this.performance_mode !== null) {
      ih['performance_mode'] = this.performance_mode;
    }
    if (this.provisioned_throughput_in_mibps !== null) {
      ih['provisioned_throughput_in_mibps'] = this.provisioned_throughput_in_mibps;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.throughput_mode !== 'bursting') {
      ih['throughput_mode'] = this.throughput_mode;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Efs_file_system';
  }
}

export class Efs_mount_target implements PcoreValue {
  readonly file_system_id: string;
  readonly subnet_id: string;
  readonly efs_mount_target_id: string|null;
  readonly dns_name: string|null;
  readonly file_system_arn: string|null;
  readonly ip_address: string|null;
  readonly network_interface_id: string|null;
  readonly security_groups: string[]|null;

  constructor({
    file_system_id,
    subnet_id,
    efs_mount_target_id = null,
    dns_name = null,
    file_system_arn = null,
    ip_address = null,
    network_interface_id = null,
    security_groups = null
  }: {
    file_system_id: string,
    subnet_id: string,
    efs_mount_target_id?: string|null,
    dns_name?: string|null,
    file_system_arn?: string|null,
    ip_address?: string|null,
    network_interface_id?: string|null,
    security_groups?: string[]|null
  }) {
    this.file_system_id = file_system_id;
    this.subnet_id = subnet_id;
    this.efs_mount_target_id = efs_mount_target_id;
    this.dns_name = dns_name;
    this.file_system_arn = file_system_arn;
    this.ip_address = ip_address;
    this.network_interface_id = network_interface_id;
    this.security_groups = security_groups;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['file_system_id'] = this.file_system_id;
    ih['subnet_id'] = this.subnet_id;
    if (this.efs_mount_target_id !== null) {
      ih['efs_mount_target_id'] = this.efs_mount_target_id;
    }
    if (this.dns_name !== null) {
      ih['dns_name'] = this.dns_name;
    }
    if (this.file_system_arn !== null) {
      ih['file_system_arn'] = this.file_system_arn;
    }
    if (this.ip_address !== null) {
      ih['ip_address'] = this.ip_address;
    }
    if (this.network_interface_id !== null) {
      ih['network_interface_id'] = this.network_interface_id;
    }
    if (this.security_groups !== null) {
      ih['security_groups'] = this.security_groups;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Efs_mount_target';
  }
}

export class Egress_only_internet_gateway implements PcoreValue {
  readonly vpc_id: string;
  readonly egress_only_internet_gateway_id: string|null;

  constructor({
    vpc_id,
    egress_only_internet_gateway_id = null
  }: {
    vpc_id: string,
    egress_only_internet_gateway_id?: string|null
  }) {
    this.vpc_id = vpc_id;
    this.egress_only_internet_gateway_id = egress_only_internet_gateway_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['vpc_id'] = this.vpc_id;
    if (this.egress_only_internet_gateway_id !== null) {
      ih['egress_only_internet_gateway_id'] = this.egress_only_internet_gateway_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Egress_only_internet_gateway';
  }
}

export class Eip implements PcoreValue {
  readonly eip_id: string|null;
  readonly allocation_id: string|null;
  readonly associate_with_private_ip: string|null;
  readonly association_id: string|null;
  readonly domain: string|null;
  readonly instance: string|null;
  readonly network_interface: string|null;
  readonly private_ip: string|null;
  readonly public_ip: string|null;
  readonly public_ipv4_pool: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly vpc: boolean|null;

  constructor({
    eip_id = null,
    allocation_id = null,
    associate_with_private_ip = null,
    association_id = null,
    domain = null,
    instance = null,
    network_interface = null,
    private_ip = null,
    public_ip = null,
    public_ipv4_pool = null,
    tags = null,
    vpc = null
  }: {
    eip_id?: string|null,
    allocation_id?: string|null,
    associate_with_private_ip?: string|null,
    association_id?: string|null,
    domain?: string|null,
    instance?: string|null,
    network_interface?: string|null,
    private_ip?: string|null,
    public_ip?: string|null,
    public_ipv4_pool?: string|null,
    tags?: {[s: string]: string}|null,
    vpc?: boolean|null
  }) {
    this.eip_id = eip_id;
    this.allocation_id = allocation_id;
    this.associate_with_private_ip = associate_with_private_ip;
    this.association_id = association_id;
    this.domain = domain;
    this.instance = instance;
    this.network_interface = network_interface;
    this.private_ip = private_ip;
    this.public_ip = public_ip;
    this.public_ipv4_pool = public_ipv4_pool;
    this.tags = tags;
    this.vpc = vpc;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.eip_id !== null) {
      ih['eip_id'] = this.eip_id;
    }
    if (this.allocation_id !== null) {
      ih['allocation_id'] = this.allocation_id;
    }
    if (this.associate_with_private_ip !== null) {
      ih['associate_with_private_ip'] = this.associate_with_private_ip;
    }
    if (this.association_id !== null) {
      ih['association_id'] = this.association_id;
    }
    if (this.domain !== null) {
      ih['domain'] = this.domain;
    }
    if (this.instance !== null) {
      ih['instance'] = this.instance;
    }
    if (this.network_interface !== null) {
      ih['network_interface'] = this.network_interface;
    }
    if (this.private_ip !== null) {
      ih['private_ip'] = this.private_ip;
    }
    if (this.public_ip !== null) {
      ih['public_ip'] = this.public_ip;
    }
    if (this.public_ipv4_pool !== null) {
      ih['public_ipv4_pool'] = this.public_ipv4_pool;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpc !== null) {
      ih['vpc'] = this.vpc;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Eip';
  }
}

export class Eip_association implements PcoreValue {
  readonly eip_association_id: string|null;
  readonly allocation_id: string|null;
  readonly allow_reassociation: boolean|null;
  readonly instance_id: string|null;
  readonly network_interface_id: string|null;
  readonly private_ip_address: string|null;
  readonly public_ip: string|null;

  constructor({
    eip_association_id = null,
    allocation_id = null,
    allow_reassociation = null,
    instance_id = null,
    network_interface_id = null,
    private_ip_address = null,
    public_ip = null
  }: {
    eip_association_id?: string|null,
    allocation_id?: string|null,
    allow_reassociation?: boolean|null,
    instance_id?: string|null,
    network_interface_id?: string|null,
    private_ip_address?: string|null,
    public_ip?: string|null
  }) {
    this.eip_association_id = eip_association_id;
    this.allocation_id = allocation_id;
    this.allow_reassociation = allow_reassociation;
    this.instance_id = instance_id;
    this.network_interface_id = network_interface_id;
    this.private_ip_address = private_ip_address;
    this.public_ip = public_ip;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.eip_association_id !== null) {
      ih['eip_association_id'] = this.eip_association_id;
    }
    if (this.allocation_id !== null) {
      ih['allocation_id'] = this.allocation_id;
    }
    if (this.allow_reassociation !== null) {
      ih['allow_reassociation'] = this.allow_reassociation;
    }
    if (this.instance_id !== null) {
      ih['instance_id'] = this.instance_id;
    }
    if (this.network_interface_id !== null) {
      ih['network_interface_id'] = this.network_interface_id;
    }
    if (this.private_ip_address !== null) {
      ih['private_ip_address'] = this.private_ip_address;
    }
    if (this.public_ip !== null) {
      ih['public_ip'] = this.public_ip;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Eip_association';
  }
}

export class Eks_cluster implements PcoreValue {
  readonly name: string;
  readonly role_arn: string;
  readonly vpc_config: Anon190;
  readonly eks_cluster_id: string|null;
  readonly arn: string|null;
  readonly certificate_authority: Anon191|null;
  readonly created_at: string|null;
  readonly endpoint: string|null;
  readonly platform_version: string|null;
  readonly version: string|null;

  constructor({
    name,
    role_arn,
    vpc_config,
    eks_cluster_id = null,
    arn = null,
    certificate_authority = null,
    created_at = null,
    endpoint = null,
    platform_version = null,
    version = null
  }: {
    name: string,
    role_arn: string,
    vpc_config: Anon190,
    eks_cluster_id?: string|null,
    arn?: string|null,
    certificate_authority?: Anon191|null,
    created_at?: string|null,
    endpoint?: string|null,
    platform_version?: string|null,
    version?: string|null
  }) {
    this.name = name;
    this.role_arn = role_arn;
    this.vpc_config = vpc_config;
    this.eks_cluster_id = eks_cluster_id;
    this.arn = arn;
    this.certificate_authority = certificate_authority;
    this.created_at = created_at;
    this.endpoint = endpoint;
    this.platform_version = platform_version;
    this.version = version;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['role_arn'] = this.role_arn;
    ih['vpc_config'] = this.vpc_config;
    if (this.eks_cluster_id !== null) {
      ih['eks_cluster_id'] = this.eks_cluster_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.certificate_authority !== null) {
      ih['certificate_authority'] = this.certificate_authority;
    }
    if (this.created_at !== null) {
      ih['created_at'] = this.created_at;
    }
    if (this.endpoint !== null) {
      ih['endpoint'] = this.endpoint;
    }
    if (this.platform_version !== null) {
      ih['platform_version'] = this.platform_version;
    }
    if (this.version !== null) {
      ih['version'] = this.version;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Eks_cluster';
  }
}

export class Elastic_beanstalk_application implements PcoreValue {
  readonly name: string;
  readonly elastic_beanstalk_application_id: string|null;
  readonly appversion_lifecycle: Anon192|null;
  readonly description: string|null;

  constructor({
    name,
    elastic_beanstalk_application_id = null,
    appversion_lifecycle = null,
    description = null
  }: {
    name: string,
    elastic_beanstalk_application_id?: string|null,
    appversion_lifecycle?: Anon192|null,
    description?: string|null
  }) {
    this.name = name;
    this.elastic_beanstalk_application_id = elastic_beanstalk_application_id;
    this.appversion_lifecycle = appversion_lifecycle;
    this.description = description;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.elastic_beanstalk_application_id !== null) {
      ih['elastic_beanstalk_application_id'] = this.elastic_beanstalk_application_id;
    }
    if (this.appversion_lifecycle !== null) {
      ih['appversion_lifecycle'] = this.appversion_lifecycle;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Elastic_beanstalk_application';
  }
}

export class Elastic_beanstalk_application_version implements PcoreValue {
  readonly application: string;
  readonly bucket: string;
  readonly key: string;
  readonly name: string;
  readonly elastic_beanstalk_application_version_id: string|null;
  readonly description: string|null;
  readonly force_delete: boolean;

  constructor({
    application,
    bucket,
    key,
    name,
    elastic_beanstalk_application_version_id = null,
    description = null,
    force_delete = false
  }: {
    application: string,
    bucket: string,
    key: string,
    name: string,
    elastic_beanstalk_application_version_id?: string|null,
    description?: string|null,
    force_delete?: boolean
  }) {
    this.application = application;
    this.bucket = bucket;
    this.key = key;
    this.name = name;
    this.elastic_beanstalk_application_version_id = elastic_beanstalk_application_version_id;
    this.description = description;
    this.force_delete = force_delete;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['application'] = this.application;
    ih['bucket'] = this.bucket;
    ih['key'] = this.key;
    ih['name'] = this.name;
    if (this.elastic_beanstalk_application_version_id !== null) {
      ih['elastic_beanstalk_application_version_id'] = this.elastic_beanstalk_application_version_id;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.force_delete !== false) {
      ih['force_delete'] = this.force_delete;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Elastic_beanstalk_application_version';
  }
}

export class Elastic_beanstalk_configuration_template implements PcoreValue {
  readonly application: string;
  readonly name: string;
  readonly elastic_beanstalk_configuration_template_id: string|null;
  readonly description: string|null;
  readonly environment_id: string|null;
  readonly setting: Anon193[]|null;
  readonly solution_stack_name: string|null;

  constructor({
    application,
    name,
    elastic_beanstalk_configuration_template_id = null,
    description = null,
    environment_id = null,
    setting = null,
    solution_stack_name = null
  }: {
    application: string,
    name: string,
    elastic_beanstalk_configuration_template_id?: string|null,
    description?: string|null,
    environment_id?: string|null,
    setting?: Anon193[]|null,
    solution_stack_name?: string|null
  }) {
    this.application = application;
    this.name = name;
    this.elastic_beanstalk_configuration_template_id = elastic_beanstalk_configuration_template_id;
    this.description = description;
    this.environment_id = environment_id;
    this.setting = setting;
    this.solution_stack_name = solution_stack_name;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['application'] = this.application;
    ih['name'] = this.name;
    if (this.elastic_beanstalk_configuration_template_id !== null) {
      ih['elastic_beanstalk_configuration_template_id'] = this.elastic_beanstalk_configuration_template_id;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.environment_id !== null) {
      ih['environment_id'] = this.environment_id;
    }
    if (this.setting !== null) {
      ih['setting'] = this.setting;
    }
    if (this.solution_stack_name !== null) {
      ih['solution_stack_name'] = this.solution_stack_name;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Elastic_beanstalk_configuration_template';
  }
}

export class Elastic_beanstalk_environment implements PcoreValue {
  readonly application: string;
  readonly name: string;
  readonly elastic_beanstalk_environment_id: string|null;
  readonly all_settings: Anon193[]|null;
  readonly arn: string|null;
  readonly autoscaling_groups: string[]|null;
  readonly cname: string|null;
  readonly cname_prefix: string|null;
  readonly description: string|null;
  readonly instances: string[]|null;
  readonly launch_configurations: string[]|null;
  readonly load_balancers: string[]|null;
  readonly platform_arn: string|null;
  readonly poll_interval: string|null;
  readonly queues: string[]|null;
  readonly setting: Anon193[]|null;
  readonly solution_stack_name: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly template_name: string|null;
  readonly tier: string;
  readonly triggers: string[]|null;
  readonly version_label: string|null;
  readonly wait_for_ready_timeout: string;

  constructor({
    application,
    name,
    elastic_beanstalk_environment_id = null,
    all_settings = null,
    arn = null,
    autoscaling_groups = null,
    cname = null,
    cname_prefix = null,
    description = null,
    instances = null,
    launch_configurations = null,
    load_balancers = null,
    platform_arn = null,
    poll_interval = null,
    queues = null,
    setting = null,
    solution_stack_name = null,
    tags = null,
    template_name = null,
    tier = 'WebServer',
    triggers = null,
    version_label = null,
    wait_for_ready_timeout = '20m'
  }: {
    application: string,
    name: string,
    elastic_beanstalk_environment_id?: string|null,
    all_settings?: Anon193[]|null,
    arn?: string|null,
    autoscaling_groups?: string[]|null,
    cname?: string|null,
    cname_prefix?: string|null,
    description?: string|null,
    instances?: string[]|null,
    launch_configurations?: string[]|null,
    load_balancers?: string[]|null,
    platform_arn?: string|null,
    poll_interval?: string|null,
    queues?: string[]|null,
    setting?: Anon193[]|null,
    solution_stack_name?: string|null,
    tags?: {[s: string]: string}|null,
    template_name?: string|null,
    tier?: string,
    triggers?: string[]|null,
    version_label?: string|null,
    wait_for_ready_timeout?: string
  }) {
    this.application = application;
    this.name = name;
    this.elastic_beanstalk_environment_id = elastic_beanstalk_environment_id;
    this.all_settings = all_settings;
    this.arn = arn;
    this.autoscaling_groups = autoscaling_groups;
    this.cname = cname;
    this.cname_prefix = cname_prefix;
    this.description = description;
    this.instances = instances;
    this.launch_configurations = launch_configurations;
    this.load_balancers = load_balancers;
    this.platform_arn = platform_arn;
    this.poll_interval = poll_interval;
    this.queues = queues;
    this.setting = setting;
    this.solution_stack_name = solution_stack_name;
    this.tags = tags;
    this.template_name = template_name;
    this.tier = tier;
    this.triggers = triggers;
    this.version_label = version_label;
    this.wait_for_ready_timeout = wait_for_ready_timeout;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['application'] = this.application;
    ih['name'] = this.name;
    if (this.elastic_beanstalk_environment_id !== null) {
      ih['elastic_beanstalk_environment_id'] = this.elastic_beanstalk_environment_id;
    }
    if (this.all_settings !== null) {
      ih['all_settings'] = this.all_settings;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.autoscaling_groups !== null) {
      ih['autoscaling_groups'] = this.autoscaling_groups;
    }
    if (this.cname !== null) {
      ih['cname'] = this.cname;
    }
    if (this.cname_prefix !== null) {
      ih['cname_prefix'] = this.cname_prefix;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.instances !== null) {
      ih['instances'] = this.instances;
    }
    if (this.launch_configurations !== null) {
      ih['launch_configurations'] = this.launch_configurations;
    }
    if (this.load_balancers !== null) {
      ih['load_balancers'] = this.load_balancers;
    }
    if (this.platform_arn !== null) {
      ih['platform_arn'] = this.platform_arn;
    }
    if (this.poll_interval !== null) {
      ih['poll_interval'] = this.poll_interval;
    }
    if (this.queues !== null) {
      ih['queues'] = this.queues;
    }
    if (this.setting !== null) {
      ih['setting'] = this.setting;
    }
    if (this.solution_stack_name !== null) {
      ih['solution_stack_name'] = this.solution_stack_name;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.template_name !== null) {
      ih['template_name'] = this.template_name;
    }
    if (this.tier !== 'WebServer') {
      ih['tier'] = this.tier;
    }
    if (this.triggers !== null) {
      ih['triggers'] = this.triggers;
    }
    if (this.version_label !== null) {
      ih['version_label'] = this.version_label;
    }
    if (this.wait_for_ready_timeout !== '20m') {
      ih['wait_for_ready_timeout'] = this.wait_for_ready_timeout;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Elastic_beanstalk_environment';
  }
}

export class Elasticache_cluster implements PcoreValue {
  readonly cluster_id: string;
  readonly elasticache_cluster_id: string|null;
  readonly apply_immediately: boolean|null;
  readonly availability_zone: string|null;
  readonly az_mode: string|null;
  readonly cache_nodes: Anon154[]|null;
  readonly cluster_address: string|null;
  readonly configuration_endpoint: string|null;
  readonly engine: string|null;
  readonly engine_version: string|null;
  readonly maintenance_window: string|null;
  readonly node_type: string|null;
  readonly notification_topic_arn: string|null;
  readonly num_cache_nodes: number|null;
  readonly parameter_group_name: string|null;
  readonly port: number|null;
  readonly preferred_availability_zones: string[]|null;
  readonly replication_group_id: string|null;
  readonly security_group_ids: string[]|null;
  readonly security_group_names: string[]|null;
  readonly snapshot_arns: string[]|null;
  readonly snapshot_name: string|null;
  readonly snapshot_retention_limit: number|null;
  readonly snapshot_window: string|null;
  readonly subnet_group_name: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    cluster_id,
    elasticache_cluster_id = null,
    apply_immediately = null,
    availability_zone = null,
    az_mode = null,
    cache_nodes = null,
    cluster_address = null,
    configuration_endpoint = null,
    engine = null,
    engine_version = null,
    maintenance_window = null,
    node_type = null,
    notification_topic_arn = null,
    num_cache_nodes = null,
    parameter_group_name = null,
    port = null,
    preferred_availability_zones = null,
    replication_group_id = null,
    security_group_ids = null,
    security_group_names = null,
    snapshot_arns = null,
    snapshot_name = null,
    snapshot_retention_limit = null,
    snapshot_window = null,
    subnet_group_name = null,
    tags = null
  }: {
    cluster_id: string,
    elasticache_cluster_id?: string|null,
    apply_immediately?: boolean|null,
    availability_zone?: string|null,
    az_mode?: string|null,
    cache_nodes?: Anon154[]|null,
    cluster_address?: string|null,
    configuration_endpoint?: string|null,
    engine?: string|null,
    engine_version?: string|null,
    maintenance_window?: string|null,
    node_type?: string|null,
    notification_topic_arn?: string|null,
    num_cache_nodes?: number|null,
    parameter_group_name?: string|null,
    port?: number|null,
    preferred_availability_zones?: string[]|null,
    replication_group_id?: string|null,
    security_group_ids?: string[]|null,
    security_group_names?: string[]|null,
    snapshot_arns?: string[]|null,
    snapshot_name?: string|null,
    snapshot_retention_limit?: number|null,
    snapshot_window?: string|null,
    subnet_group_name?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.cluster_id = cluster_id;
    this.elasticache_cluster_id = elasticache_cluster_id;
    this.apply_immediately = apply_immediately;
    this.availability_zone = availability_zone;
    this.az_mode = az_mode;
    this.cache_nodes = cache_nodes;
    this.cluster_address = cluster_address;
    this.configuration_endpoint = configuration_endpoint;
    this.engine = engine;
    this.engine_version = engine_version;
    this.maintenance_window = maintenance_window;
    this.node_type = node_type;
    this.notification_topic_arn = notification_topic_arn;
    this.num_cache_nodes = num_cache_nodes;
    this.parameter_group_name = parameter_group_name;
    this.port = port;
    this.preferred_availability_zones = preferred_availability_zones;
    this.replication_group_id = replication_group_id;
    this.security_group_ids = security_group_ids;
    this.security_group_names = security_group_names;
    this.snapshot_arns = snapshot_arns;
    this.snapshot_name = snapshot_name;
    this.snapshot_retention_limit = snapshot_retention_limit;
    this.snapshot_window = snapshot_window;
    this.subnet_group_name = subnet_group_name;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['cluster_id'] = this.cluster_id;
    if (this.elasticache_cluster_id !== null) {
      ih['elasticache_cluster_id'] = this.elasticache_cluster_id;
    }
    if (this.apply_immediately !== null) {
      ih['apply_immediately'] = this.apply_immediately;
    }
    if (this.availability_zone !== null) {
      ih['availability_zone'] = this.availability_zone;
    }
    if (this.az_mode !== null) {
      ih['az_mode'] = this.az_mode;
    }
    if (this.cache_nodes !== null) {
      ih['cache_nodes'] = this.cache_nodes;
    }
    if (this.cluster_address !== null) {
      ih['cluster_address'] = this.cluster_address;
    }
    if (this.configuration_endpoint !== null) {
      ih['configuration_endpoint'] = this.configuration_endpoint;
    }
    if (this.engine !== null) {
      ih['engine'] = this.engine;
    }
    if (this.engine_version !== null) {
      ih['engine_version'] = this.engine_version;
    }
    if (this.maintenance_window !== null) {
      ih['maintenance_window'] = this.maintenance_window;
    }
    if (this.node_type !== null) {
      ih['node_type'] = this.node_type;
    }
    if (this.notification_topic_arn !== null) {
      ih['notification_topic_arn'] = this.notification_topic_arn;
    }
    if (this.num_cache_nodes !== null) {
      ih['num_cache_nodes'] = this.num_cache_nodes;
    }
    if (this.parameter_group_name !== null) {
      ih['parameter_group_name'] = this.parameter_group_name;
    }
    if (this.port !== null) {
      ih['port'] = this.port;
    }
    if (this.preferred_availability_zones !== null) {
      ih['preferred_availability_zones'] = this.preferred_availability_zones;
    }
    if (this.replication_group_id !== null) {
      ih['replication_group_id'] = this.replication_group_id;
    }
    if (this.security_group_ids !== null) {
      ih['security_group_ids'] = this.security_group_ids;
    }
    if (this.security_group_names !== null) {
      ih['security_group_names'] = this.security_group_names;
    }
    if (this.snapshot_arns !== null) {
      ih['snapshot_arns'] = this.snapshot_arns;
    }
    if (this.snapshot_name !== null) {
      ih['snapshot_name'] = this.snapshot_name;
    }
    if (this.snapshot_retention_limit !== null) {
      ih['snapshot_retention_limit'] = this.snapshot_retention_limit;
    }
    if (this.snapshot_window !== null) {
      ih['snapshot_window'] = this.snapshot_window;
    }
    if (this.subnet_group_name !== null) {
      ih['subnet_group_name'] = this.subnet_group_name;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Elasticache_cluster';
  }
}

export class Elasticache_parameter_group implements PcoreValue {
  readonly family: string;
  readonly name: string;
  readonly elasticache_parameter_group_id: string|null;
  readonly description: string;
  readonly parameter: Anon29[]|null;

  constructor({
    family,
    name,
    elasticache_parameter_group_id = null,
    description = 'Managed by Terraform',
    parameter = null
  }: {
    family: string,
    name: string,
    elasticache_parameter_group_id?: string|null,
    description?: string,
    parameter?: Anon29[]|null
  }) {
    this.family = family;
    this.name = name;
    this.elasticache_parameter_group_id = elasticache_parameter_group_id;
    this.description = description;
    this.parameter = parameter;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['family'] = this.family;
    ih['name'] = this.name;
    if (this.elasticache_parameter_group_id !== null) {
      ih['elasticache_parameter_group_id'] = this.elasticache_parameter_group_id;
    }
    if (this.description !== 'Managed by Terraform') {
      ih['description'] = this.description;
    }
    if (this.parameter !== null) {
      ih['parameter'] = this.parameter;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Elasticache_parameter_group';
  }
}

export class Elasticache_replication_group implements PcoreValue {
  readonly replication_group_description: string;
  readonly replication_group_id: string;
  readonly elasticache_replication_group_id: string|null;
  readonly apply_immediately: boolean|null;
  readonly at_rest_encryption_enabled: boolean;
  readonly auth_token: string|null;
  readonly auto_minor_version_upgrade: boolean;
  readonly automatic_failover_enabled: boolean;
  readonly availability_zones: string[]|null;
  readonly cluster_mode: Anon194|null;
  readonly configuration_endpoint_address: string|null;
  readonly engine: string;
  readonly engine_version: string|null;
  readonly maintenance_window: string|null;
  readonly member_clusters: string[]|null;
  readonly node_type: string|null;
  readonly notification_topic_arn: string|null;
  readonly number_cache_clusters: number|null;
  readonly parameter_group_name: string|null;
  readonly port: number|null;
  readonly primary_endpoint_address: string|null;
  readonly security_group_ids: string[]|null;
  readonly security_group_names: string[]|null;
  readonly snapshot_arns: string[]|null;
  readonly snapshot_name: string|null;
  readonly snapshot_retention_limit: number|null;
  readonly snapshot_window: string|null;
  readonly subnet_group_name: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly transit_encryption_enabled: boolean;

  constructor({
    replication_group_description,
    replication_group_id,
    elasticache_replication_group_id = null,
    apply_immediately = null,
    at_rest_encryption_enabled = false,
    auth_token = null,
    auto_minor_version_upgrade = true,
    automatic_failover_enabled = false,
    availability_zones = null,
    cluster_mode = null,
    configuration_endpoint_address = null,
    engine = 'redis',
    engine_version = null,
    maintenance_window = null,
    member_clusters = null,
    node_type = null,
    notification_topic_arn = null,
    number_cache_clusters = null,
    parameter_group_name = null,
    port = null,
    primary_endpoint_address = null,
    security_group_ids = null,
    security_group_names = null,
    snapshot_arns = null,
    snapshot_name = null,
    snapshot_retention_limit = null,
    snapshot_window = null,
    subnet_group_name = null,
    tags = null,
    transit_encryption_enabled = false
  }: {
    replication_group_description: string,
    replication_group_id: string,
    elasticache_replication_group_id?: string|null,
    apply_immediately?: boolean|null,
    at_rest_encryption_enabled?: boolean,
    auth_token?: string|null,
    auto_minor_version_upgrade?: boolean,
    automatic_failover_enabled?: boolean,
    availability_zones?: string[]|null,
    cluster_mode?: Anon194|null,
    configuration_endpoint_address?: string|null,
    engine?: string,
    engine_version?: string|null,
    maintenance_window?: string|null,
    member_clusters?: string[]|null,
    node_type?: string|null,
    notification_topic_arn?: string|null,
    number_cache_clusters?: number|null,
    parameter_group_name?: string|null,
    port?: number|null,
    primary_endpoint_address?: string|null,
    security_group_ids?: string[]|null,
    security_group_names?: string[]|null,
    snapshot_arns?: string[]|null,
    snapshot_name?: string|null,
    snapshot_retention_limit?: number|null,
    snapshot_window?: string|null,
    subnet_group_name?: string|null,
    tags?: {[s: string]: string}|null,
    transit_encryption_enabled?: boolean
  }) {
    this.replication_group_description = replication_group_description;
    this.replication_group_id = replication_group_id;
    this.elasticache_replication_group_id = elasticache_replication_group_id;
    this.apply_immediately = apply_immediately;
    this.at_rest_encryption_enabled = at_rest_encryption_enabled;
    this.auth_token = auth_token;
    this.auto_minor_version_upgrade = auto_minor_version_upgrade;
    this.automatic_failover_enabled = automatic_failover_enabled;
    this.availability_zones = availability_zones;
    this.cluster_mode = cluster_mode;
    this.configuration_endpoint_address = configuration_endpoint_address;
    this.engine = engine;
    this.engine_version = engine_version;
    this.maintenance_window = maintenance_window;
    this.member_clusters = member_clusters;
    this.node_type = node_type;
    this.notification_topic_arn = notification_topic_arn;
    this.number_cache_clusters = number_cache_clusters;
    this.parameter_group_name = parameter_group_name;
    this.port = port;
    this.primary_endpoint_address = primary_endpoint_address;
    this.security_group_ids = security_group_ids;
    this.security_group_names = security_group_names;
    this.snapshot_arns = snapshot_arns;
    this.snapshot_name = snapshot_name;
    this.snapshot_retention_limit = snapshot_retention_limit;
    this.snapshot_window = snapshot_window;
    this.subnet_group_name = subnet_group_name;
    this.tags = tags;
    this.transit_encryption_enabled = transit_encryption_enabled;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['replication_group_description'] = this.replication_group_description;
    ih['replication_group_id'] = this.replication_group_id;
    if (this.elasticache_replication_group_id !== null) {
      ih['elasticache_replication_group_id'] = this.elasticache_replication_group_id;
    }
    if (this.apply_immediately !== null) {
      ih['apply_immediately'] = this.apply_immediately;
    }
    if (this.at_rest_encryption_enabled !== false) {
      ih['at_rest_encryption_enabled'] = this.at_rest_encryption_enabled;
    }
    if (this.auth_token !== null) {
      ih['auth_token'] = this.auth_token;
    }
    if (this.auto_minor_version_upgrade !== true) {
      ih['auto_minor_version_upgrade'] = this.auto_minor_version_upgrade;
    }
    if (this.automatic_failover_enabled !== false) {
      ih['automatic_failover_enabled'] = this.automatic_failover_enabled;
    }
    if (this.availability_zones !== null) {
      ih['availability_zones'] = this.availability_zones;
    }
    if (this.cluster_mode !== null) {
      ih['cluster_mode'] = this.cluster_mode;
    }
    if (this.configuration_endpoint_address !== null) {
      ih['configuration_endpoint_address'] = this.configuration_endpoint_address;
    }
    if (this.engine !== 'redis') {
      ih['engine'] = this.engine;
    }
    if (this.engine_version !== null) {
      ih['engine_version'] = this.engine_version;
    }
    if (this.maintenance_window !== null) {
      ih['maintenance_window'] = this.maintenance_window;
    }
    if (this.member_clusters !== null) {
      ih['member_clusters'] = this.member_clusters;
    }
    if (this.node_type !== null) {
      ih['node_type'] = this.node_type;
    }
    if (this.notification_topic_arn !== null) {
      ih['notification_topic_arn'] = this.notification_topic_arn;
    }
    if (this.number_cache_clusters !== null) {
      ih['number_cache_clusters'] = this.number_cache_clusters;
    }
    if (this.parameter_group_name !== null) {
      ih['parameter_group_name'] = this.parameter_group_name;
    }
    if (this.port !== null) {
      ih['port'] = this.port;
    }
    if (this.primary_endpoint_address !== null) {
      ih['primary_endpoint_address'] = this.primary_endpoint_address;
    }
    if (this.security_group_ids !== null) {
      ih['security_group_ids'] = this.security_group_ids;
    }
    if (this.security_group_names !== null) {
      ih['security_group_names'] = this.security_group_names;
    }
    if (this.snapshot_arns !== null) {
      ih['snapshot_arns'] = this.snapshot_arns;
    }
    if (this.snapshot_name !== null) {
      ih['snapshot_name'] = this.snapshot_name;
    }
    if (this.snapshot_retention_limit !== null) {
      ih['snapshot_retention_limit'] = this.snapshot_retention_limit;
    }
    if (this.snapshot_window !== null) {
      ih['snapshot_window'] = this.snapshot_window;
    }
    if (this.subnet_group_name !== null) {
      ih['subnet_group_name'] = this.subnet_group_name;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.transit_encryption_enabled !== false) {
      ih['transit_encryption_enabled'] = this.transit_encryption_enabled;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Elasticache_replication_group';
  }
}

export class Elasticache_security_group implements PcoreValue {
  readonly name: string;
  readonly security_group_names: string[];
  readonly elasticache_security_group_id: string|null;
  readonly description: string;

  constructor({
    name,
    security_group_names,
    elasticache_security_group_id = null,
    description = 'Managed by Terraform'
  }: {
    name: string,
    security_group_names: string[],
    elasticache_security_group_id?: string|null,
    description?: string
  }) {
    this.name = name;
    this.security_group_names = security_group_names;
    this.elasticache_security_group_id = elasticache_security_group_id;
    this.description = description;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['security_group_names'] = this.security_group_names;
    if (this.elasticache_security_group_id !== null) {
      ih['elasticache_security_group_id'] = this.elasticache_security_group_id;
    }
    if (this.description !== 'Managed by Terraform') {
      ih['description'] = this.description;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Elasticache_security_group';
  }
}

export class Elasticache_subnet_group implements PcoreValue {
  readonly name: string;
  readonly subnet_ids: string[];
  readonly elasticache_subnet_group_id: string|null;
  readonly description: string;

  constructor({
    name,
    subnet_ids,
    elasticache_subnet_group_id = null,
    description = 'Managed by Terraform'
  }: {
    name: string,
    subnet_ids: string[],
    elasticache_subnet_group_id?: string|null,
    description?: string
  }) {
    this.name = name;
    this.subnet_ids = subnet_ids;
    this.elasticache_subnet_group_id = elasticache_subnet_group_id;
    this.description = description;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['subnet_ids'] = this.subnet_ids;
    if (this.elasticache_subnet_group_id !== null) {
      ih['elasticache_subnet_group_id'] = this.elasticache_subnet_group_id;
    }
    if (this.description !== 'Managed by Terraform') {
      ih['description'] = this.description;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Elasticache_subnet_group';
  }
}

export class Elasticsearch_domain implements PcoreValue {
  readonly domain_name: string;
  readonly elasticsearch_domain_id: string|null;
  readonly access_policies: string|null;
  readonly advanced_options: {[s: string]: string}|null;
  readonly arn: string|null;
  readonly cluster_config: Anon195|null;
  readonly cognito_options: Anon196|null;
  readonly domain_id: string|null;
  readonly ebs_options: Anon197|null;
  readonly elasticsearch_version: string;
  readonly encrypt_at_rest: Anon198|null;
  readonly endpoint: string|null;
  readonly kibana_endpoint: string|null;
  readonly log_publishing_options: Anon199[]|null;
  readonly node_to_node_encryption: Anon175|null;
  readonly snapshot_options: Anon200|null;
  readonly tags: {[s: string]: string}|null;
  readonly vpc_options: Anon201|null;

  constructor({
    domain_name,
    elasticsearch_domain_id = null,
    access_policies = null,
    advanced_options = null,
    arn = null,
    cluster_config = null,
    cognito_options = null,
    domain_id = null,
    ebs_options = null,
    elasticsearch_version = '1.5',
    encrypt_at_rest = null,
    endpoint = null,
    kibana_endpoint = null,
    log_publishing_options = null,
    node_to_node_encryption = null,
    snapshot_options = null,
    tags = null,
    vpc_options = null
  }: {
    domain_name: string,
    elasticsearch_domain_id?: string|null,
    access_policies?: string|null,
    advanced_options?: {[s: string]: string}|null,
    arn?: string|null,
    cluster_config?: Anon195|null,
    cognito_options?: Anon196|null,
    domain_id?: string|null,
    ebs_options?: Anon197|null,
    elasticsearch_version?: string,
    encrypt_at_rest?: Anon198|null,
    endpoint?: string|null,
    kibana_endpoint?: string|null,
    log_publishing_options?: Anon199[]|null,
    node_to_node_encryption?: Anon175|null,
    snapshot_options?: Anon200|null,
    tags?: {[s: string]: string}|null,
    vpc_options?: Anon201|null
  }) {
    this.domain_name = domain_name;
    this.elasticsearch_domain_id = elasticsearch_domain_id;
    this.access_policies = access_policies;
    this.advanced_options = advanced_options;
    this.arn = arn;
    this.cluster_config = cluster_config;
    this.cognito_options = cognito_options;
    this.domain_id = domain_id;
    this.ebs_options = ebs_options;
    this.elasticsearch_version = elasticsearch_version;
    this.encrypt_at_rest = encrypt_at_rest;
    this.endpoint = endpoint;
    this.kibana_endpoint = kibana_endpoint;
    this.log_publishing_options = log_publishing_options;
    this.node_to_node_encryption = node_to_node_encryption;
    this.snapshot_options = snapshot_options;
    this.tags = tags;
    this.vpc_options = vpc_options;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['domain_name'] = this.domain_name;
    if (this.elasticsearch_domain_id !== null) {
      ih['elasticsearch_domain_id'] = this.elasticsearch_domain_id;
    }
    if (this.access_policies !== null) {
      ih['access_policies'] = this.access_policies;
    }
    if (this.advanced_options !== null) {
      ih['advanced_options'] = this.advanced_options;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.cluster_config !== null) {
      ih['cluster_config'] = this.cluster_config;
    }
    if (this.cognito_options !== null) {
      ih['cognito_options'] = this.cognito_options;
    }
    if (this.domain_id !== null) {
      ih['domain_id'] = this.domain_id;
    }
    if (this.ebs_options !== null) {
      ih['ebs_options'] = this.ebs_options;
    }
    if (this.elasticsearch_version !== '1.5') {
      ih['elasticsearch_version'] = this.elasticsearch_version;
    }
    if (this.encrypt_at_rest !== null) {
      ih['encrypt_at_rest'] = this.encrypt_at_rest;
    }
    if (this.endpoint !== null) {
      ih['endpoint'] = this.endpoint;
    }
    if (this.kibana_endpoint !== null) {
      ih['kibana_endpoint'] = this.kibana_endpoint;
    }
    if (this.log_publishing_options !== null) {
      ih['log_publishing_options'] = this.log_publishing_options;
    }
    if (this.node_to_node_encryption !== null) {
      ih['node_to_node_encryption'] = this.node_to_node_encryption;
    }
    if (this.snapshot_options !== null) {
      ih['snapshot_options'] = this.snapshot_options;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpc_options !== null) {
      ih['vpc_options'] = this.vpc_options;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Elasticsearch_domain';
  }
}

export class Elasticsearch_domain_policy implements PcoreValue {
  readonly access_policies: string;
  readonly domain_name: string;
  readonly elasticsearch_domain_policy_id: string|null;

  constructor({
    access_policies,
    domain_name,
    elasticsearch_domain_policy_id = null
  }: {
    access_policies: string,
    domain_name: string,
    elasticsearch_domain_policy_id?: string|null
  }) {
    this.access_policies = access_policies;
    this.domain_name = domain_name;
    this.elasticsearch_domain_policy_id = elasticsearch_domain_policy_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['access_policies'] = this.access_policies;
    ih['domain_name'] = this.domain_name;
    if (this.elasticsearch_domain_policy_id !== null) {
      ih['elasticsearch_domain_policy_id'] = this.elasticsearch_domain_policy_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Elasticsearch_domain_policy';
  }
}

export class Elastictranscoder_pipeline implements PcoreValue {
  readonly input_bucket: string;
  readonly role: string;
  readonly elastictranscoder_pipeline_id: string|null;
  readonly arn: string|null;
  readonly aws_kms_key_arn: string|null;
  readonly content_config: Anon202|null;
  readonly content_config_permissions: Anon203[]|null;
  readonly name: string|null;
  readonly notifications: Anon204|null;
  readonly output_bucket: string|null;
  readonly thumbnail_config: Anon202|null;
  readonly thumbnail_config_permissions: Anon203[]|null;

  constructor({
    input_bucket,
    role,
    elastictranscoder_pipeline_id = null,
    arn = null,
    aws_kms_key_arn = null,
    content_config = null,
    content_config_permissions = null,
    name = null,
    notifications = null,
    output_bucket = null,
    thumbnail_config = null,
    thumbnail_config_permissions = null
  }: {
    input_bucket: string,
    role: string,
    elastictranscoder_pipeline_id?: string|null,
    arn?: string|null,
    aws_kms_key_arn?: string|null,
    content_config?: Anon202|null,
    content_config_permissions?: Anon203[]|null,
    name?: string|null,
    notifications?: Anon204|null,
    output_bucket?: string|null,
    thumbnail_config?: Anon202|null,
    thumbnail_config_permissions?: Anon203[]|null
  }) {
    this.input_bucket = input_bucket;
    this.role = role;
    this.elastictranscoder_pipeline_id = elastictranscoder_pipeline_id;
    this.arn = arn;
    this.aws_kms_key_arn = aws_kms_key_arn;
    this.content_config = content_config;
    this.content_config_permissions = content_config_permissions;
    this.name = name;
    this.notifications = notifications;
    this.output_bucket = output_bucket;
    this.thumbnail_config = thumbnail_config;
    this.thumbnail_config_permissions = thumbnail_config_permissions;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['input_bucket'] = this.input_bucket;
    ih['role'] = this.role;
    if (this.elastictranscoder_pipeline_id !== null) {
      ih['elastictranscoder_pipeline_id'] = this.elastictranscoder_pipeline_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.aws_kms_key_arn !== null) {
      ih['aws_kms_key_arn'] = this.aws_kms_key_arn;
    }
    if (this.content_config !== null) {
      ih['content_config'] = this.content_config;
    }
    if (this.content_config_permissions !== null) {
      ih['content_config_permissions'] = this.content_config_permissions;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.notifications !== null) {
      ih['notifications'] = this.notifications;
    }
    if (this.output_bucket !== null) {
      ih['output_bucket'] = this.output_bucket;
    }
    if (this.thumbnail_config !== null) {
      ih['thumbnail_config'] = this.thumbnail_config;
    }
    if (this.thumbnail_config_permissions !== null) {
      ih['thumbnail_config_permissions'] = this.thumbnail_config_permissions;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Elastictranscoder_pipeline';
  }
}

export class Elastictranscoder_preset implements PcoreValue {
  readonly container: string;
  readonly elastictranscoder_preset_id: string|null;
  readonly arn: string|null;
  readonly audio: Anon205|null;
  readonly audio_codec_options: Anon206|null;
  readonly description: string|null;
  readonly name: string|null;
  readonly thumbnails: Anon207|null;
  readonly type: string|null;
  readonly video: Anon208|null;
  readonly video_codec_options: {[s: string]: string}|null;
  readonly video_watermarks: Anon209[]|null;

  constructor({
    container,
    elastictranscoder_preset_id = null,
    arn = null,
    audio = null,
    audio_codec_options = null,
    description = null,
    name = null,
    thumbnails = null,
    type = null,
    video = null,
    video_codec_options = null,
    video_watermarks = null
  }: {
    container: string,
    elastictranscoder_preset_id?: string|null,
    arn?: string|null,
    audio?: Anon205|null,
    audio_codec_options?: Anon206|null,
    description?: string|null,
    name?: string|null,
    thumbnails?: Anon207|null,
    type?: string|null,
    video?: Anon208|null,
    video_codec_options?: {[s: string]: string}|null,
    video_watermarks?: Anon209[]|null
  }) {
    this.container = container;
    this.elastictranscoder_preset_id = elastictranscoder_preset_id;
    this.arn = arn;
    this.audio = audio;
    this.audio_codec_options = audio_codec_options;
    this.description = description;
    this.name = name;
    this.thumbnails = thumbnails;
    this.type = type;
    this.video = video;
    this.video_codec_options = video_codec_options;
    this.video_watermarks = video_watermarks;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['container'] = this.container;
    if (this.elastictranscoder_preset_id !== null) {
      ih['elastictranscoder_preset_id'] = this.elastictranscoder_preset_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.audio !== null) {
      ih['audio'] = this.audio;
    }
    if (this.audio_codec_options !== null) {
      ih['audio_codec_options'] = this.audio_codec_options;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.thumbnails !== null) {
      ih['thumbnails'] = this.thumbnails;
    }
    if (this.type !== null) {
      ih['type'] = this.type;
    }
    if (this.video !== null) {
      ih['video'] = this.video;
    }
    if (this.video_codec_options !== null) {
      ih['video_codec_options'] = this.video_codec_options;
    }
    if (this.video_watermarks !== null) {
      ih['video_watermarks'] = this.video_watermarks;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Elastictranscoder_preset';
  }
}

export class Elb implements PcoreValue {
  readonly listener: Anon210[];
  readonly elb_id: string|null;
  readonly access_logs: Anon211|null;
  readonly arn: string|null;
  readonly availability_zones: string[]|null;
  readonly connection_draining: boolean;
  readonly connection_draining_timeout: number;
  readonly cross_zone_load_balancing: boolean;
  readonly dns_name: string|null;
  readonly health_check: Anon212|null;
  readonly idle_timeout: number;
  readonly instances: string[]|null;
  readonly internal: boolean|null;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly security_groups: string[]|null;
  readonly source_security_group: string|null;
  readonly source_security_group_id: string|null;
  readonly subnets: string[]|null;
  readonly tags: {[s: string]: string}|null;
  readonly zone_id: string|null;

  constructor({
    listener,
    elb_id = null,
    access_logs = null,
    arn = null,
    availability_zones = null,
    connection_draining = false,
    connection_draining_timeout = 300,
    cross_zone_load_balancing = true,
    dns_name = null,
    health_check = null,
    idle_timeout = 60,
    instances = null,
    internal = null,
    name = null,
    name_prefix = null,
    security_groups = null,
    source_security_group = null,
    source_security_group_id = null,
    subnets = null,
    tags = null,
    zone_id = null
  }: {
    listener: Anon210[],
    elb_id?: string|null,
    access_logs?: Anon211|null,
    arn?: string|null,
    availability_zones?: string[]|null,
    connection_draining?: boolean,
    connection_draining_timeout?: number,
    cross_zone_load_balancing?: boolean,
    dns_name?: string|null,
    health_check?: Anon212|null,
    idle_timeout?: number,
    instances?: string[]|null,
    internal?: boolean|null,
    name?: string|null,
    name_prefix?: string|null,
    security_groups?: string[]|null,
    source_security_group?: string|null,
    source_security_group_id?: string|null,
    subnets?: string[]|null,
    tags?: {[s: string]: string}|null,
    zone_id?: string|null
  }) {
    this.listener = listener;
    this.elb_id = elb_id;
    this.access_logs = access_logs;
    this.arn = arn;
    this.availability_zones = availability_zones;
    this.connection_draining = connection_draining;
    this.connection_draining_timeout = connection_draining_timeout;
    this.cross_zone_load_balancing = cross_zone_load_balancing;
    this.dns_name = dns_name;
    this.health_check = health_check;
    this.idle_timeout = idle_timeout;
    this.instances = instances;
    this.internal = internal;
    this.name = name;
    this.name_prefix = name_prefix;
    this.security_groups = security_groups;
    this.source_security_group = source_security_group;
    this.source_security_group_id = source_security_group_id;
    this.subnets = subnets;
    this.tags = tags;
    this.zone_id = zone_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['listener'] = this.listener;
    if (this.elb_id !== null) {
      ih['elb_id'] = this.elb_id;
    }
    if (this.access_logs !== null) {
      ih['access_logs'] = this.access_logs;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.availability_zones !== null) {
      ih['availability_zones'] = this.availability_zones;
    }
    if (this.connection_draining !== false) {
      ih['connection_draining'] = this.connection_draining;
    }
    if (this.connection_draining_timeout !== 300) {
      ih['connection_draining_timeout'] = this.connection_draining_timeout;
    }
    if (this.cross_zone_load_balancing !== true) {
      ih['cross_zone_load_balancing'] = this.cross_zone_load_balancing;
    }
    if (this.dns_name !== null) {
      ih['dns_name'] = this.dns_name;
    }
    if (this.health_check !== null) {
      ih['health_check'] = this.health_check;
    }
    if (this.idle_timeout !== 60) {
      ih['idle_timeout'] = this.idle_timeout;
    }
    if (this.instances !== null) {
      ih['instances'] = this.instances;
    }
    if (this.internal !== null) {
      ih['internal'] = this.internal;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.security_groups !== null) {
      ih['security_groups'] = this.security_groups;
    }
    if (this.source_security_group !== null) {
      ih['source_security_group'] = this.source_security_group;
    }
    if (this.source_security_group_id !== null) {
      ih['source_security_group_id'] = this.source_security_group_id;
    }
    if (this.subnets !== null) {
      ih['subnets'] = this.subnets;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.zone_id !== null) {
      ih['zone_id'] = this.zone_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Elb';
  }
}

export class Elb_attachment implements PcoreValue {
  readonly elb: string;
  readonly instance: string;
  readonly elb_attachment_id: string|null;

  constructor({
    elb,
    instance,
    elb_attachment_id = null
  }: {
    elb: string,
    instance: string,
    elb_attachment_id?: string|null
  }) {
    this.elb = elb;
    this.instance = instance;
    this.elb_attachment_id = elb_attachment_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['elb'] = this.elb;
    ih['instance'] = this.instance;
    if (this.elb_attachment_id !== null) {
      ih['elb_attachment_id'] = this.elb_attachment_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Elb_attachment';
  }
}

export class Emr_cluster implements PcoreValue {
  readonly name: string;
  readonly release_label: string;
  readonly service_role: string;
  readonly emr_cluster_id: string|null;
  readonly additional_info: string|null;
  readonly applications: string[]|null;
  readonly autoscaling_role: string|null;
  readonly bootstrap_action: Anon213[]|null;
  readonly cluster_state: string|null;
  readonly configurations: string|null;
  readonly configurations_json: string|null;
  readonly core_instance_count: number|null;
  readonly core_instance_type: string|null;
  readonly custom_ami_id: string|null;
  readonly ebs_root_volume_size: number|null;
  readonly ec2_attributes: Anon214|null;
  readonly instance_group: Anon216[]|null;
  readonly keep_job_flow_alive_when_no_steps: boolean|null;
  readonly kerberos_attributes: Anon217|null;
  readonly log_uri: string|null;
  readonly master_instance_type: string|null;
  readonly master_public_dns: string|null;
  readonly scale_down_behavior: string|null;
  readonly security_configuration: string|null;
  readonly step: Anon219[]|null;
  readonly tags: {[s: string]: string}|null;
  readonly termination_protection: boolean|null;
  readonly visible_to_all_users: boolean;

  constructor({
    name,
    release_label,
    service_role,
    emr_cluster_id = null,
    additional_info = null,
    applications = null,
    autoscaling_role = null,
    bootstrap_action = null,
    cluster_state = null,
    configurations = null,
    configurations_json = null,
    core_instance_count = null,
    core_instance_type = null,
    custom_ami_id = null,
    ebs_root_volume_size = null,
    ec2_attributes = null,
    instance_group = null,
    keep_job_flow_alive_when_no_steps = null,
    kerberos_attributes = null,
    log_uri = null,
    master_instance_type = null,
    master_public_dns = null,
    scale_down_behavior = null,
    security_configuration = null,
    step = null,
    tags = null,
    termination_protection = null,
    visible_to_all_users = true
  }: {
    name: string,
    release_label: string,
    service_role: string,
    emr_cluster_id?: string|null,
    additional_info?: string|null,
    applications?: string[]|null,
    autoscaling_role?: string|null,
    bootstrap_action?: Anon213[]|null,
    cluster_state?: string|null,
    configurations?: string|null,
    configurations_json?: string|null,
    core_instance_count?: number|null,
    core_instance_type?: string|null,
    custom_ami_id?: string|null,
    ebs_root_volume_size?: number|null,
    ec2_attributes?: Anon214|null,
    instance_group?: Anon216[]|null,
    keep_job_flow_alive_when_no_steps?: boolean|null,
    kerberos_attributes?: Anon217|null,
    log_uri?: string|null,
    master_instance_type?: string|null,
    master_public_dns?: string|null,
    scale_down_behavior?: string|null,
    security_configuration?: string|null,
    step?: Anon219[]|null,
    tags?: {[s: string]: string}|null,
    termination_protection?: boolean|null,
    visible_to_all_users?: boolean
  }) {
    this.name = name;
    this.release_label = release_label;
    this.service_role = service_role;
    this.emr_cluster_id = emr_cluster_id;
    this.additional_info = additional_info;
    this.applications = applications;
    this.autoscaling_role = autoscaling_role;
    this.bootstrap_action = bootstrap_action;
    this.cluster_state = cluster_state;
    this.configurations = configurations;
    this.configurations_json = configurations_json;
    this.core_instance_count = core_instance_count;
    this.core_instance_type = core_instance_type;
    this.custom_ami_id = custom_ami_id;
    this.ebs_root_volume_size = ebs_root_volume_size;
    this.ec2_attributes = ec2_attributes;
    this.instance_group = instance_group;
    this.keep_job_flow_alive_when_no_steps = keep_job_flow_alive_when_no_steps;
    this.kerberos_attributes = kerberos_attributes;
    this.log_uri = log_uri;
    this.master_instance_type = master_instance_type;
    this.master_public_dns = master_public_dns;
    this.scale_down_behavior = scale_down_behavior;
    this.security_configuration = security_configuration;
    this.step = step;
    this.tags = tags;
    this.termination_protection = termination_protection;
    this.visible_to_all_users = visible_to_all_users;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['release_label'] = this.release_label;
    ih['service_role'] = this.service_role;
    if (this.emr_cluster_id !== null) {
      ih['emr_cluster_id'] = this.emr_cluster_id;
    }
    if (this.additional_info !== null) {
      ih['additional_info'] = this.additional_info;
    }
    if (this.applications !== null) {
      ih['applications'] = this.applications;
    }
    if (this.autoscaling_role !== null) {
      ih['autoscaling_role'] = this.autoscaling_role;
    }
    if (this.bootstrap_action !== null) {
      ih['bootstrap_action'] = this.bootstrap_action;
    }
    if (this.cluster_state !== null) {
      ih['cluster_state'] = this.cluster_state;
    }
    if (this.configurations !== null) {
      ih['configurations'] = this.configurations;
    }
    if (this.configurations_json !== null) {
      ih['configurations_json'] = this.configurations_json;
    }
    if (this.core_instance_count !== null) {
      ih['core_instance_count'] = this.core_instance_count;
    }
    if (this.core_instance_type !== null) {
      ih['core_instance_type'] = this.core_instance_type;
    }
    if (this.custom_ami_id !== null) {
      ih['custom_ami_id'] = this.custom_ami_id;
    }
    if (this.ebs_root_volume_size !== null) {
      ih['ebs_root_volume_size'] = this.ebs_root_volume_size;
    }
    if (this.ec2_attributes !== null) {
      ih['ec2_attributes'] = this.ec2_attributes;
    }
    if (this.instance_group !== null) {
      ih['instance_group'] = this.instance_group;
    }
    if (this.keep_job_flow_alive_when_no_steps !== null) {
      ih['keep_job_flow_alive_when_no_steps'] = this.keep_job_flow_alive_when_no_steps;
    }
    if (this.kerberos_attributes !== null) {
      ih['kerberos_attributes'] = this.kerberos_attributes;
    }
    if (this.log_uri !== null) {
      ih['log_uri'] = this.log_uri;
    }
    if (this.master_instance_type !== null) {
      ih['master_instance_type'] = this.master_instance_type;
    }
    if (this.master_public_dns !== null) {
      ih['master_public_dns'] = this.master_public_dns;
    }
    if (this.scale_down_behavior !== null) {
      ih['scale_down_behavior'] = this.scale_down_behavior;
    }
    if (this.security_configuration !== null) {
      ih['security_configuration'] = this.security_configuration;
    }
    if (this.step !== null) {
      ih['step'] = this.step;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.termination_protection !== null) {
      ih['termination_protection'] = this.termination_protection;
    }
    if (this.visible_to_all_users !== true) {
      ih['visible_to_all_users'] = this.visible_to_all_users;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Emr_cluster';
  }
}

export class Emr_instance_group implements PcoreValue {
  readonly cluster_id: string;
  readonly instance_type: string;
  readonly emr_instance_group_id: string|null;
  readonly ebs_config: Anon220[]|null;
  readonly ebs_optimized: boolean|null;
  readonly instance_count: number;
  readonly name: string|null;
  readonly running_instance_count: number|null;
  readonly status: string|null;

  constructor({
    cluster_id,
    instance_type,
    emr_instance_group_id = null,
    ebs_config = null,
    ebs_optimized = null,
    instance_count = 0,
    name = null,
    running_instance_count = null,
    status = null
  }: {
    cluster_id: string,
    instance_type: string,
    emr_instance_group_id?: string|null,
    ebs_config?: Anon220[]|null,
    ebs_optimized?: boolean|null,
    instance_count?: number,
    name?: string|null,
    running_instance_count?: number|null,
    status?: string|null
  }) {
    this.cluster_id = cluster_id;
    this.instance_type = instance_type;
    this.emr_instance_group_id = emr_instance_group_id;
    this.ebs_config = ebs_config;
    this.ebs_optimized = ebs_optimized;
    this.instance_count = instance_count;
    this.name = name;
    this.running_instance_count = running_instance_count;
    this.status = status;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['cluster_id'] = this.cluster_id;
    ih['instance_type'] = this.instance_type;
    if (this.emr_instance_group_id !== null) {
      ih['emr_instance_group_id'] = this.emr_instance_group_id;
    }
    if (this.ebs_config !== null) {
      ih['ebs_config'] = this.ebs_config;
    }
    if (this.ebs_optimized !== null) {
      ih['ebs_optimized'] = this.ebs_optimized;
    }
    if (this.instance_count !== 0) {
      ih['instance_count'] = this.instance_count;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.running_instance_count !== null) {
      ih['running_instance_count'] = this.running_instance_count;
    }
    if (this.status !== null) {
      ih['status'] = this.status;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Emr_instance_group';
  }
}

export class Emr_security_configuration implements PcoreValue {
  readonly configuration: string;
  readonly emr_security_configuration_id: string|null;
  readonly creation_date: string|null;
  readonly name: string|null;
  readonly name_prefix: string|null;

  constructor({
    configuration,
    emr_security_configuration_id = null,
    creation_date = null,
    name = null,
    name_prefix = null
  }: {
    configuration: string,
    emr_security_configuration_id?: string|null,
    creation_date?: string|null,
    name?: string|null,
    name_prefix?: string|null
  }) {
    this.configuration = configuration;
    this.emr_security_configuration_id = emr_security_configuration_id;
    this.creation_date = creation_date;
    this.name = name;
    this.name_prefix = name_prefix;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['configuration'] = this.configuration;
    if (this.emr_security_configuration_id !== null) {
      ih['emr_security_configuration_id'] = this.emr_security_configuration_id;
    }
    if (this.creation_date !== null) {
      ih['creation_date'] = this.creation_date;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Emr_security_configuration';
  }
}

export class Flow_log implements PcoreValue {
  readonly traffic_type: string;
  readonly flow_log_id: string|null;
  readonly eni_id: string|null;
  readonly iam_role_arn: string|null;
  readonly log_destination: string|null;
  readonly log_destination_type: string;
  readonly subnet_id: string|null;
  readonly vpc_id: string|null;

  constructor({
    traffic_type,
    flow_log_id = null,
    eni_id = null,
    iam_role_arn = null,
    log_destination = null,
    log_destination_type = 'cloud-watch-logs',
    subnet_id = null,
    vpc_id = null
  }: {
    traffic_type: string,
    flow_log_id?: string|null,
    eni_id?: string|null,
    iam_role_arn?: string|null,
    log_destination?: string|null,
    log_destination_type?: string,
    subnet_id?: string|null,
    vpc_id?: string|null
  }) {
    this.traffic_type = traffic_type;
    this.flow_log_id = flow_log_id;
    this.eni_id = eni_id;
    this.iam_role_arn = iam_role_arn;
    this.log_destination = log_destination;
    this.log_destination_type = log_destination_type;
    this.subnet_id = subnet_id;
    this.vpc_id = vpc_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['traffic_type'] = this.traffic_type;
    if (this.flow_log_id !== null) {
      ih['flow_log_id'] = this.flow_log_id;
    }
    if (this.eni_id !== null) {
      ih['eni_id'] = this.eni_id;
    }
    if (this.iam_role_arn !== null) {
      ih['iam_role_arn'] = this.iam_role_arn;
    }
    if (this.log_destination !== null) {
      ih['log_destination'] = this.log_destination;
    }
    if (this.log_destination_type !== 'cloud-watch-logs') {
      ih['log_destination_type'] = this.log_destination_type;
    }
    if (this.subnet_id !== null) {
      ih['subnet_id'] = this.subnet_id;
    }
    if (this.vpc_id !== null) {
      ih['vpc_id'] = this.vpc_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Flow_log';
  }
}

export class Gamelift_alias implements PcoreValue {
  readonly name: string;
  readonly gamelift_alias_id: string|null;
  readonly arn: string|null;
  readonly description: string|null;
  readonly routing_strategy: Anon221|null;

  constructor({
    name,
    gamelift_alias_id = null,
    arn = null,
    description = null,
    routing_strategy = null
  }: {
    name: string,
    gamelift_alias_id?: string|null,
    arn?: string|null,
    description?: string|null,
    routing_strategy?: Anon221|null
  }) {
    this.name = name;
    this.gamelift_alias_id = gamelift_alias_id;
    this.arn = arn;
    this.description = description;
    this.routing_strategy = routing_strategy;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.gamelift_alias_id !== null) {
      ih['gamelift_alias_id'] = this.gamelift_alias_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.routing_strategy !== null) {
      ih['routing_strategy'] = this.routing_strategy;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Gamelift_alias';
  }
}

export class Gamelift_build implements PcoreValue {
  readonly name: string;
  readonly operating_system: string;
  readonly gamelift_build_id: string|null;
  readonly storage_location: Anon222|null;
  readonly version: string|null;

  constructor({
    name,
    operating_system,
    gamelift_build_id = null,
    storage_location = null,
    version = null
  }: {
    name: string,
    operating_system: string,
    gamelift_build_id?: string|null,
    storage_location?: Anon222|null,
    version?: string|null
  }) {
    this.name = name;
    this.operating_system = operating_system;
    this.gamelift_build_id = gamelift_build_id;
    this.storage_location = storage_location;
    this.version = version;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['operating_system'] = this.operating_system;
    if (this.gamelift_build_id !== null) {
      ih['gamelift_build_id'] = this.gamelift_build_id;
    }
    if (this.storage_location !== null) {
      ih['storage_location'] = this.storage_location;
    }
    if (this.version !== null) {
      ih['version'] = this.version;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Gamelift_build';
  }
}

export class Gamelift_fleet implements PcoreValue {
  readonly build_id: string;
  readonly ec2_instance_type: string;
  readonly name: string;
  readonly gamelift_fleet_id: string|null;
  readonly arn: string|null;
  readonly description: string|null;
  readonly ec2_inbound_permission: Anon223[]|null;
  readonly log_paths: string[]|null;
  readonly metric_groups: string[]|null;
  readonly new_game_session_protection_policy: string;
  readonly operating_system: string|null;
  readonly resource_creation_limit_policy: Anon224|null;
  readonly runtime_configuration: Anon226|null;

  constructor({
    build_id,
    ec2_instance_type,
    name,
    gamelift_fleet_id = null,
    arn = null,
    description = null,
    ec2_inbound_permission = null,
    log_paths = null,
    metric_groups = null,
    new_game_session_protection_policy = 'NoProtection',
    operating_system = null,
    resource_creation_limit_policy = null,
    runtime_configuration = null
  }: {
    build_id: string,
    ec2_instance_type: string,
    name: string,
    gamelift_fleet_id?: string|null,
    arn?: string|null,
    description?: string|null,
    ec2_inbound_permission?: Anon223[]|null,
    log_paths?: string[]|null,
    metric_groups?: string[]|null,
    new_game_session_protection_policy?: string,
    operating_system?: string|null,
    resource_creation_limit_policy?: Anon224|null,
    runtime_configuration?: Anon226|null
  }) {
    this.build_id = build_id;
    this.ec2_instance_type = ec2_instance_type;
    this.name = name;
    this.gamelift_fleet_id = gamelift_fleet_id;
    this.arn = arn;
    this.description = description;
    this.ec2_inbound_permission = ec2_inbound_permission;
    this.log_paths = log_paths;
    this.metric_groups = metric_groups;
    this.new_game_session_protection_policy = new_game_session_protection_policy;
    this.operating_system = operating_system;
    this.resource_creation_limit_policy = resource_creation_limit_policy;
    this.runtime_configuration = runtime_configuration;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['build_id'] = this.build_id;
    ih['ec2_instance_type'] = this.ec2_instance_type;
    ih['name'] = this.name;
    if (this.gamelift_fleet_id !== null) {
      ih['gamelift_fleet_id'] = this.gamelift_fleet_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.ec2_inbound_permission !== null) {
      ih['ec2_inbound_permission'] = this.ec2_inbound_permission;
    }
    if (this.log_paths !== null) {
      ih['log_paths'] = this.log_paths;
    }
    if (this.metric_groups !== null) {
      ih['metric_groups'] = this.metric_groups;
    }
    if (this.new_game_session_protection_policy !== 'NoProtection') {
      ih['new_game_session_protection_policy'] = this.new_game_session_protection_policy;
    }
    if (this.operating_system !== null) {
      ih['operating_system'] = this.operating_system;
    }
    if (this.resource_creation_limit_policy !== null) {
      ih['resource_creation_limit_policy'] = this.resource_creation_limit_policy;
    }
    if (this.runtime_configuration !== null) {
      ih['runtime_configuration'] = this.runtime_configuration;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Gamelift_fleet';
  }
}

export class Gamelift_game_session_queue implements PcoreValue {
  readonly name: string;
  readonly gamelift_game_session_queue_id: string|null;
  readonly arn: string|null;
  readonly destinations: string[]|null;
  readonly player_latency_policy: Anon227[]|null;
  readonly timeout_in_seconds: number|null;

  constructor({
    name,
    gamelift_game_session_queue_id = null,
    arn = null,
    destinations = null,
    player_latency_policy = null,
    timeout_in_seconds = null
  }: {
    name: string,
    gamelift_game_session_queue_id?: string|null,
    arn?: string|null,
    destinations?: string[]|null,
    player_latency_policy?: Anon227[]|null,
    timeout_in_seconds?: number|null
  }) {
    this.name = name;
    this.gamelift_game_session_queue_id = gamelift_game_session_queue_id;
    this.arn = arn;
    this.destinations = destinations;
    this.player_latency_policy = player_latency_policy;
    this.timeout_in_seconds = timeout_in_seconds;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.gamelift_game_session_queue_id !== null) {
      ih['gamelift_game_session_queue_id'] = this.gamelift_game_session_queue_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.destinations !== null) {
      ih['destinations'] = this.destinations;
    }
    if (this.player_latency_policy !== null) {
      ih['player_latency_policy'] = this.player_latency_policy;
    }
    if (this.timeout_in_seconds !== null) {
      ih['timeout_in_seconds'] = this.timeout_in_seconds;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Gamelift_game_session_queue';
  }
}

export class GenericHandler implements PcoreValue {
  __pvalue(): {[s: string]: Value} {
    return {};
  }

  __ptype(): string {
    return 'Aws::GenericHandler';
  }
}

export class Glacier_vault implements PcoreValue {
  readonly name: string;
  readonly glacier_vault_id: string|null;
  readonly access_policy: string|null;
  readonly arn: string|null;
  readonly location: string|null;
  readonly notification: Anon228[]|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    name,
    glacier_vault_id = null,
    access_policy = null,
    arn = null,
    location = null,
    notification = null,
    tags = null
  }: {
    name: string,
    glacier_vault_id?: string|null,
    access_policy?: string|null,
    arn?: string|null,
    location?: string|null,
    notification?: Anon228[]|null,
    tags?: {[s: string]: string}|null
  }) {
    this.name = name;
    this.glacier_vault_id = glacier_vault_id;
    this.access_policy = access_policy;
    this.arn = arn;
    this.location = location;
    this.notification = notification;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.glacier_vault_id !== null) {
      ih['glacier_vault_id'] = this.glacier_vault_id;
    }
    if (this.access_policy !== null) {
      ih['access_policy'] = this.access_policy;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.location !== null) {
      ih['location'] = this.location;
    }
    if (this.notification !== null) {
      ih['notification'] = this.notification;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Glacier_vault';
  }
}

export class Glacier_vault_lock implements PcoreValue {
  readonly complete_lock: boolean;
  readonly policy: string;
  readonly vault_name: string;
  readonly glacier_vault_lock_id: string|null;
  readonly ignore_deletion_error: boolean;

  constructor({
    complete_lock,
    policy,
    vault_name,
    glacier_vault_lock_id = null,
    ignore_deletion_error = false
  }: {
    complete_lock: boolean,
    policy: string,
    vault_name: string,
    glacier_vault_lock_id?: string|null,
    ignore_deletion_error?: boolean
  }) {
    this.complete_lock = complete_lock;
    this.policy = policy;
    this.vault_name = vault_name;
    this.glacier_vault_lock_id = glacier_vault_lock_id;
    this.ignore_deletion_error = ignore_deletion_error;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['complete_lock'] = this.complete_lock;
    ih['policy'] = this.policy;
    ih['vault_name'] = this.vault_name;
    if (this.glacier_vault_lock_id !== null) {
      ih['glacier_vault_lock_id'] = this.glacier_vault_lock_id;
    }
    if (this.ignore_deletion_error !== false) {
      ih['ignore_deletion_error'] = this.ignore_deletion_error;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Glacier_vault_lock';
  }
}

export class Globalaccelerator_accelerator implements PcoreValue {
  readonly name: string;
  readonly globalaccelerator_accelerator_id: string|null;
  readonly attributes: Anon229|null;
  readonly enabled: boolean;
  readonly ip_address_type: string;
  readonly ip_sets: Anon230[]|null;

  constructor({
    name,
    globalaccelerator_accelerator_id = null,
    attributes = null,
    enabled = true,
    ip_address_type = 'IPV4',
    ip_sets = null
  }: {
    name: string,
    globalaccelerator_accelerator_id?: string|null,
    attributes?: Anon229|null,
    enabled?: boolean,
    ip_address_type?: string,
    ip_sets?: Anon230[]|null
  }) {
    this.name = name;
    this.globalaccelerator_accelerator_id = globalaccelerator_accelerator_id;
    this.attributes = attributes;
    this.enabled = enabled;
    this.ip_address_type = ip_address_type;
    this.ip_sets = ip_sets;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.globalaccelerator_accelerator_id !== null) {
      ih['globalaccelerator_accelerator_id'] = this.globalaccelerator_accelerator_id;
    }
    if (this.attributes !== null) {
      ih['attributes'] = this.attributes;
    }
    if (this.enabled !== true) {
      ih['enabled'] = this.enabled;
    }
    if (this.ip_address_type !== 'IPV4') {
      ih['ip_address_type'] = this.ip_address_type;
    }
    if (this.ip_sets !== null) {
      ih['ip_sets'] = this.ip_sets;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Globalaccelerator_accelerator';
  }
}

export class Glue_catalog_database implements PcoreValue {
  readonly name: string;
  readonly glue_catalog_database_id: string|null;
  readonly catalog_id: string|null;
  readonly description: string|null;
  readonly location_uri: string|null;
  readonly parameters: {[s: string]: string}|null;

  constructor({
    name,
    glue_catalog_database_id = null,
    catalog_id = null,
    description = null,
    location_uri = null,
    parameters = null
  }: {
    name: string,
    glue_catalog_database_id?: string|null,
    catalog_id?: string|null,
    description?: string|null,
    location_uri?: string|null,
    parameters?: {[s: string]: string}|null
  }) {
    this.name = name;
    this.glue_catalog_database_id = glue_catalog_database_id;
    this.catalog_id = catalog_id;
    this.description = description;
    this.location_uri = location_uri;
    this.parameters = parameters;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.glue_catalog_database_id !== null) {
      ih['glue_catalog_database_id'] = this.glue_catalog_database_id;
    }
    if (this.catalog_id !== null) {
      ih['catalog_id'] = this.catalog_id;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.location_uri !== null) {
      ih['location_uri'] = this.location_uri;
    }
    if (this.parameters !== null) {
      ih['parameters'] = this.parameters;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Glue_catalog_database';
  }
}

export class Glue_catalog_table implements PcoreValue {
  readonly database_name: string;
  readonly name: string;
  readonly glue_catalog_table_id: string|null;
  readonly catalog_id: string|null;
  readonly description: string|null;
  readonly owner: string|null;
  readonly parameters: {[s: string]: string}|null;
  readonly partition_keys: Anon231[]|null;
  readonly retention: number|null;
  readonly storage_descriptor: Anon235|null;
  readonly table_type: string|null;
  readonly view_expanded_text: string|null;
  readonly view_original_text: string|null;

  constructor({
    database_name,
    name,
    glue_catalog_table_id = null,
    catalog_id = null,
    description = null,
    owner = null,
    parameters = null,
    partition_keys = null,
    retention = null,
    storage_descriptor = null,
    table_type = null,
    view_expanded_text = null,
    view_original_text = null
  }: {
    database_name: string,
    name: string,
    glue_catalog_table_id?: string|null,
    catalog_id?: string|null,
    description?: string|null,
    owner?: string|null,
    parameters?: {[s: string]: string}|null,
    partition_keys?: Anon231[]|null,
    retention?: number|null,
    storage_descriptor?: Anon235|null,
    table_type?: string|null,
    view_expanded_text?: string|null,
    view_original_text?: string|null
  }) {
    this.database_name = database_name;
    this.name = name;
    this.glue_catalog_table_id = glue_catalog_table_id;
    this.catalog_id = catalog_id;
    this.description = description;
    this.owner = owner;
    this.parameters = parameters;
    this.partition_keys = partition_keys;
    this.retention = retention;
    this.storage_descriptor = storage_descriptor;
    this.table_type = table_type;
    this.view_expanded_text = view_expanded_text;
    this.view_original_text = view_original_text;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['database_name'] = this.database_name;
    ih['name'] = this.name;
    if (this.glue_catalog_table_id !== null) {
      ih['glue_catalog_table_id'] = this.glue_catalog_table_id;
    }
    if (this.catalog_id !== null) {
      ih['catalog_id'] = this.catalog_id;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.owner !== null) {
      ih['owner'] = this.owner;
    }
    if (this.parameters !== null) {
      ih['parameters'] = this.parameters;
    }
    if (this.partition_keys !== null) {
      ih['partition_keys'] = this.partition_keys;
    }
    if (this.retention !== null) {
      ih['retention'] = this.retention;
    }
    if (this.storage_descriptor !== null) {
      ih['storage_descriptor'] = this.storage_descriptor;
    }
    if (this.table_type !== null) {
      ih['table_type'] = this.table_type;
    }
    if (this.view_expanded_text !== null) {
      ih['view_expanded_text'] = this.view_expanded_text;
    }
    if (this.view_original_text !== null) {
      ih['view_original_text'] = this.view_original_text;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Glue_catalog_table';
  }
}

export class Glue_classifier implements PcoreValue {
  readonly name: string;
  readonly glue_classifier_id: string|null;
  readonly grok_classifier: Anon236|null;
  readonly json_classifier: Anon237|null;
  readonly xml_classifier: Anon238|null;

  constructor({
    name,
    glue_classifier_id = null,
    grok_classifier = null,
    json_classifier = null,
    xml_classifier = null
  }: {
    name: string,
    glue_classifier_id?: string|null,
    grok_classifier?: Anon236|null,
    json_classifier?: Anon237|null,
    xml_classifier?: Anon238|null
  }) {
    this.name = name;
    this.glue_classifier_id = glue_classifier_id;
    this.grok_classifier = grok_classifier;
    this.json_classifier = json_classifier;
    this.xml_classifier = xml_classifier;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.glue_classifier_id !== null) {
      ih['glue_classifier_id'] = this.glue_classifier_id;
    }
    if (this.grok_classifier !== null) {
      ih['grok_classifier'] = this.grok_classifier;
    }
    if (this.json_classifier !== null) {
      ih['json_classifier'] = this.json_classifier;
    }
    if (this.xml_classifier !== null) {
      ih['xml_classifier'] = this.xml_classifier;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Glue_classifier';
  }
}

export class Glue_connection implements PcoreValue {
  readonly connection_properties: {[s: string]: string};
  readonly name: string;
  readonly glue_connection_id: string|null;
  readonly catalog_id: string|null;
  readonly connection_type: string;
  readonly description: string|null;
  readonly match_criteria: string[]|null;
  readonly physical_connection_requirements: Anon239|null;

  constructor({
    connection_properties,
    name,
    glue_connection_id = null,
    catalog_id = null,
    connection_type = 'JDBC',
    description = null,
    match_criteria = null,
    physical_connection_requirements = null
  }: {
    connection_properties: {[s: string]: string},
    name: string,
    glue_connection_id?: string|null,
    catalog_id?: string|null,
    connection_type?: string,
    description?: string|null,
    match_criteria?: string[]|null,
    physical_connection_requirements?: Anon239|null
  }) {
    this.connection_properties = connection_properties;
    this.name = name;
    this.glue_connection_id = glue_connection_id;
    this.catalog_id = catalog_id;
    this.connection_type = connection_type;
    this.description = description;
    this.match_criteria = match_criteria;
    this.physical_connection_requirements = physical_connection_requirements;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['connection_properties'] = this.connection_properties;
    ih['name'] = this.name;
    if (this.glue_connection_id !== null) {
      ih['glue_connection_id'] = this.glue_connection_id;
    }
    if (this.catalog_id !== null) {
      ih['catalog_id'] = this.catalog_id;
    }
    if (this.connection_type !== 'JDBC') {
      ih['connection_type'] = this.connection_type;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.match_criteria !== null) {
      ih['match_criteria'] = this.match_criteria;
    }
    if (this.physical_connection_requirements !== null) {
      ih['physical_connection_requirements'] = this.physical_connection_requirements;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Glue_connection';
  }
}

export class Glue_crawler implements PcoreValue {
  readonly database_name: string;
  readonly name: string;
  readonly role: string;
  readonly glue_crawler_id: string|null;
  readonly classifiers: string[]|null;
  readonly configuration: string|null;
  readonly description: string|null;
  readonly dynamodb_target: Anon240[]|null;
  readonly jdbc_target: Anon241[]|null;
  readonly s3_target: Anon242[]|null;
  readonly schedule: string|null;
  readonly schema_change_policy: Anon243|null;
  readonly security_configuration: string|null;
  readonly table_prefix: string|null;

  constructor({
    database_name,
    name,
    role,
    glue_crawler_id = null,
    classifiers = null,
    configuration = null,
    description = null,
    dynamodb_target = null,
    jdbc_target = null,
    s3_target = null,
    schedule = null,
    schema_change_policy = null,
    security_configuration = null,
    table_prefix = null
  }: {
    database_name: string,
    name: string,
    role: string,
    glue_crawler_id?: string|null,
    classifiers?: string[]|null,
    configuration?: string|null,
    description?: string|null,
    dynamodb_target?: Anon240[]|null,
    jdbc_target?: Anon241[]|null,
    s3_target?: Anon242[]|null,
    schedule?: string|null,
    schema_change_policy?: Anon243|null,
    security_configuration?: string|null,
    table_prefix?: string|null
  }) {
    this.database_name = database_name;
    this.name = name;
    this.role = role;
    this.glue_crawler_id = glue_crawler_id;
    this.classifiers = classifiers;
    this.configuration = configuration;
    this.description = description;
    this.dynamodb_target = dynamodb_target;
    this.jdbc_target = jdbc_target;
    this.s3_target = s3_target;
    this.schedule = schedule;
    this.schema_change_policy = schema_change_policy;
    this.security_configuration = security_configuration;
    this.table_prefix = table_prefix;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['database_name'] = this.database_name;
    ih['name'] = this.name;
    ih['role'] = this.role;
    if (this.glue_crawler_id !== null) {
      ih['glue_crawler_id'] = this.glue_crawler_id;
    }
    if (this.classifiers !== null) {
      ih['classifiers'] = this.classifiers;
    }
    if (this.configuration !== null) {
      ih['configuration'] = this.configuration;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.dynamodb_target !== null) {
      ih['dynamodb_target'] = this.dynamodb_target;
    }
    if (this.jdbc_target !== null) {
      ih['jdbc_target'] = this.jdbc_target;
    }
    if (this.s3_target !== null) {
      ih['s3_target'] = this.s3_target;
    }
    if (this.schedule !== null) {
      ih['schedule'] = this.schedule;
    }
    if (this.schema_change_policy !== null) {
      ih['schema_change_policy'] = this.schema_change_policy;
    }
    if (this.security_configuration !== null) {
      ih['security_configuration'] = this.security_configuration;
    }
    if (this.table_prefix !== null) {
      ih['table_prefix'] = this.table_prefix;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Glue_crawler';
  }
}

export class Glue_job implements PcoreValue {
  readonly name: string;
  readonly role_arn: string;
  readonly glue_job_id: string|null;
  readonly allocated_capacity: number;
  readonly command: Anon244|null;
  readonly connections: string[]|null;
  readonly default_arguments: {[s: string]: string}|null;
  readonly description: string|null;
  readonly execution_property: Anon245|null;
  readonly max_retries: number|null;
  readonly security_configuration: string|null;
  readonly timeout: number;

  constructor({
    name,
    role_arn,
    glue_job_id = null,
    allocated_capacity = 10,
    command = null,
    connections = null,
    default_arguments = null,
    description = null,
    execution_property = null,
    max_retries = null,
    security_configuration = null,
    timeout = 2880
  }: {
    name: string,
    role_arn: string,
    glue_job_id?: string|null,
    allocated_capacity?: number,
    command?: Anon244|null,
    connections?: string[]|null,
    default_arguments?: {[s: string]: string}|null,
    description?: string|null,
    execution_property?: Anon245|null,
    max_retries?: number|null,
    security_configuration?: string|null,
    timeout?: number
  }) {
    this.name = name;
    this.role_arn = role_arn;
    this.glue_job_id = glue_job_id;
    this.allocated_capacity = allocated_capacity;
    this.command = command;
    this.connections = connections;
    this.default_arguments = default_arguments;
    this.description = description;
    this.execution_property = execution_property;
    this.max_retries = max_retries;
    this.security_configuration = security_configuration;
    this.timeout = timeout;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['role_arn'] = this.role_arn;
    if (this.glue_job_id !== null) {
      ih['glue_job_id'] = this.glue_job_id;
    }
    if (this.allocated_capacity !== 10) {
      ih['allocated_capacity'] = this.allocated_capacity;
    }
    if (this.command !== null) {
      ih['command'] = this.command;
    }
    if (this.connections !== null) {
      ih['connections'] = this.connections;
    }
    if (this.default_arguments !== null) {
      ih['default_arguments'] = this.default_arguments;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.execution_property !== null) {
      ih['execution_property'] = this.execution_property;
    }
    if (this.max_retries !== null) {
      ih['max_retries'] = this.max_retries;
    }
    if (this.security_configuration !== null) {
      ih['security_configuration'] = this.security_configuration;
    }
    if (this.timeout !== 2880) {
      ih['timeout'] = this.timeout;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Glue_job';
  }
}

export class Glue_security_configuration implements PcoreValue {
  readonly name: string;
  readonly glue_security_configuration_id: string|null;
  readonly encryption_configuration: Anon249|null;

  constructor({
    name,
    glue_security_configuration_id = null,
    encryption_configuration = null
  }: {
    name: string,
    glue_security_configuration_id?: string|null,
    encryption_configuration?: Anon249|null
  }) {
    this.name = name;
    this.glue_security_configuration_id = glue_security_configuration_id;
    this.encryption_configuration = encryption_configuration;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.glue_security_configuration_id !== null) {
      ih['glue_security_configuration_id'] = this.glue_security_configuration_id;
    }
    if (this.encryption_configuration !== null) {
      ih['encryption_configuration'] = this.encryption_configuration;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Glue_security_configuration';
  }
}

export class Glue_trigger implements PcoreValue {
  readonly actions: Anon250[];
  readonly name: string;
  readonly type: string;
  readonly glue_trigger_id: string|null;
  readonly description: string|null;
  readonly enabled: boolean;
  readonly predicate: Anon252|null;
  readonly schedule: string|null;

  constructor({
    actions,
    name,
    type,
    glue_trigger_id = null,
    description = null,
    enabled = true,
    predicate = null,
    schedule = null
  }: {
    actions: Anon250[],
    name: string,
    type: string,
    glue_trigger_id?: string|null,
    description?: string|null,
    enabled?: boolean,
    predicate?: Anon252|null,
    schedule?: string|null
  }) {
    this.actions = actions;
    this.name = name;
    this.type = type;
    this.glue_trigger_id = glue_trigger_id;
    this.description = description;
    this.enabled = enabled;
    this.predicate = predicate;
    this.schedule = schedule;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['actions'] = this.actions;
    ih['name'] = this.name;
    ih['type'] = this.type;
    if (this.glue_trigger_id !== null) {
      ih['glue_trigger_id'] = this.glue_trigger_id;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.enabled !== true) {
      ih['enabled'] = this.enabled;
    }
    if (this.predicate !== null) {
      ih['predicate'] = this.predicate;
    }
    if (this.schedule !== null) {
      ih['schedule'] = this.schedule;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Glue_trigger';
  }
}

export class Guardduty_detector implements PcoreValue {
  readonly guardduty_detector_id: string|null;
  readonly account_id: string|null;
  readonly enable: boolean;
  readonly finding_publishing_frequency: string;

  constructor({
    guardduty_detector_id = null,
    account_id = null,
    enable = true,
    finding_publishing_frequency = 'SIX_HOURS'
  }: {
    guardduty_detector_id?: string|null,
    account_id?: string|null,
    enable?: boolean,
    finding_publishing_frequency?: string
  }) {
    this.guardduty_detector_id = guardduty_detector_id;
    this.account_id = account_id;
    this.enable = enable;
    this.finding_publishing_frequency = finding_publishing_frequency;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.guardduty_detector_id !== null) {
      ih['guardduty_detector_id'] = this.guardduty_detector_id;
    }
    if (this.account_id !== null) {
      ih['account_id'] = this.account_id;
    }
    if (this.enable !== true) {
      ih['enable'] = this.enable;
    }
    if (this.finding_publishing_frequency !== 'SIX_HOURS') {
      ih['finding_publishing_frequency'] = this.finding_publishing_frequency;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Guardduty_detector';
  }
}

export class Guardduty_ipset implements PcoreValue {
  readonly activate: boolean;
  readonly detector_id: string;
  readonly format: string;
  readonly location: string;
  readonly name: string;
  readonly guardduty_ipset_id: string|null;

  constructor({
    activate,
    detector_id,
    format,
    location,
    name,
    guardduty_ipset_id = null
  }: {
    activate: boolean,
    detector_id: string,
    format: string,
    location: string,
    name: string,
    guardduty_ipset_id?: string|null
  }) {
    this.activate = activate;
    this.detector_id = detector_id;
    this.format = format;
    this.location = location;
    this.name = name;
    this.guardduty_ipset_id = guardduty_ipset_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['activate'] = this.activate;
    ih['detector_id'] = this.detector_id;
    ih['format'] = this.format;
    ih['location'] = this.location;
    ih['name'] = this.name;
    if (this.guardduty_ipset_id !== null) {
      ih['guardduty_ipset_id'] = this.guardduty_ipset_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Guardduty_ipset';
  }
}

export class Guardduty_member implements PcoreValue {
  readonly account_id: string;
  readonly detector_id: string;
  readonly email: string;
  readonly guardduty_member_id: string|null;
  readonly disable_email_notification: boolean|null;
  readonly invitation_message: string|null;
  readonly invite: boolean|null;
  readonly relationship_status: string|null;

  constructor({
    account_id,
    detector_id,
    email,
    guardduty_member_id = null,
    disable_email_notification = null,
    invitation_message = null,
    invite = null,
    relationship_status = null
  }: {
    account_id: string,
    detector_id: string,
    email: string,
    guardduty_member_id?: string|null,
    disable_email_notification?: boolean|null,
    invitation_message?: string|null,
    invite?: boolean|null,
    relationship_status?: string|null
  }) {
    this.account_id = account_id;
    this.detector_id = detector_id;
    this.email = email;
    this.guardduty_member_id = guardduty_member_id;
    this.disable_email_notification = disable_email_notification;
    this.invitation_message = invitation_message;
    this.invite = invite;
    this.relationship_status = relationship_status;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['account_id'] = this.account_id;
    ih['detector_id'] = this.detector_id;
    ih['email'] = this.email;
    if (this.guardduty_member_id !== null) {
      ih['guardduty_member_id'] = this.guardduty_member_id;
    }
    if (this.disable_email_notification !== null) {
      ih['disable_email_notification'] = this.disable_email_notification;
    }
    if (this.invitation_message !== null) {
      ih['invitation_message'] = this.invitation_message;
    }
    if (this.invite !== null) {
      ih['invite'] = this.invite;
    }
    if (this.relationship_status !== null) {
      ih['relationship_status'] = this.relationship_status;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Guardduty_member';
  }
}

export class Guardduty_threatintelset implements PcoreValue {
  readonly activate: boolean;
  readonly detector_id: string;
  readonly format: string;
  readonly location: string;
  readonly name: string;
  readonly guardduty_threatintelset_id: string|null;

  constructor({
    activate,
    detector_id,
    format,
    location,
    name,
    guardduty_threatintelset_id = null
  }: {
    activate: boolean,
    detector_id: string,
    format: string,
    location: string,
    name: string,
    guardduty_threatintelset_id?: string|null
  }) {
    this.activate = activate;
    this.detector_id = detector_id;
    this.format = format;
    this.location = location;
    this.name = name;
    this.guardduty_threatintelset_id = guardduty_threatintelset_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['activate'] = this.activate;
    ih['detector_id'] = this.detector_id;
    ih['format'] = this.format;
    ih['location'] = this.location;
    ih['name'] = this.name;
    if (this.guardduty_threatintelset_id !== null) {
      ih['guardduty_threatintelset_id'] = this.guardduty_threatintelset_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Guardduty_threatintelset';
  }
}

export class Iam_access_key implements PcoreValue {
  readonly user: string;
  readonly iam_access_key_id: string|null;
  readonly encrypted_secret: string|null;
  readonly key_fingerprint: string|null;
  readonly pgp_key: string|null;
  readonly ses_smtp_password: string|null;
  readonly status: string|null;

  constructor({
    user,
    iam_access_key_id = null,
    encrypted_secret = null,
    key_fingerprint = null,
    pgp_key = null,
    ses_smtp_password = null,
    status = null
  }: {
    user: string,
    iam_access_key_id?: string|null,
    encrypted_secret?: string|null,
    key_fingerprint?: string|null,
    pgp_key?: string|null,
    ses_smtp_password?: string|null,
    status?: string|null
  }) {
    this.user = user;
    this.iam_access_key_id = iam_access_key_id;
    this.encrypted_secret = encrypted_secret;
    this.key_fingerprint = key_fingerprint;
    this.pgp_key = pgp_key;
    this.ses_smtp_password = ses_smtp_password;
    this.status = status;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['user'] = this.user;
    if (this.iam_access_key_id !== null) {
      ih['iam_access_key_id'] = this.iam_access_key_id;
    }
    if (this.encrypted_secret !== null) {
      ih['encrypted_secret'] = this.encrypted_secret;
    }
    if (this.key_fingerprint !== null) {
      ih['key_fingerprint'] = this.key_fingerprint;
    }
    if (this.pgp_key !== null) {
      ih['pgp_key'] = this.pgp_key;
    }
    if (this.ses_smtp_password !== null) {
      ih['ses_smtp_password'] = this.ses_smtp_password;
    }
    if (this.status !== null) {
      ih['status'] = this.status;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iam_access_key';
  }
}

export class Iam_account_alias implements PcoreValue {
  readonly account_alias: string;
  readonly iam_account_alias_id: string|null;

  constructor({
    account_alias,
    iam_account_alias_id = null
  }: {
    account_alias: string,
    iam_account_alias_id?: string|null
  }) {
    this.account_alias = account_alias;
    this.iam_account_alias_id = iam_account_alias_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['account_alias'] = this.account_alias;
    if (this.iam_account_alias_id !== null) {
      ih['iam_account_alias_id'] = this.iam_account_alias_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iam_account_alias';
  }
}

export class Iam_account_password_policy implements PcoreValue {
  readonly iam_account_password_policy_id: string|null;
  readonly allow_users_to_change_password: boolean;
  readonly expire_passwords: boolean|null;
  readonly hard_expiry: boolean|null;
  readonly max_password_age: number|null;
  readonly minimum_password_length: number;
  readonly password_reuse_prevention: number|null;
  readonly require_lowercase_characters: boolean|null;
  readonly require_numbers: boolean|null;
  readonly require_symbols: boolean|null;
  readonly require_uppercase_characters: boolean|null;

  constructor({
    iam_account_password_policy_id = null,
    allow_users_to_change_password = true,
    expire_passwords = null,
    hard_expiry = null,
    max_password_age = null,
    minimum_password_length = 6,
    password_reuse_prevention = null,
    require_lowercase_characters = null,
    require_numbers = null,
    require_symbols = null,
    require_uppercase_characters = null
  }: {
    iam_account_password_policy_id?: string|null,
    allow_users_to_change_password?: boolean,
    expire_passwords?: boolean|null,
    hard_expiry?: boolean|null,
    max_password_age?: number|null,
    minimum_password_length?: number,
    password_reuse_prevention?: number|null,
    require_lowercase_characters?: boolean|null,
    require_numbers?: boolean|null,
    require_symbols?: boolean|null,
    require_uppercase_characters?: boolean|null
  }) {
    this.iam_account_password_policy_id = iam_account_password_policy_id;
    this.allow_users_to_change_password = allow_users_to_change_password;
    this.expire_passwords = expire_passwords;
    this.hard_expiry = hard_expiry;
    this.max_password_age = max_password_age;
    this.minimum_password_length = minimum_password_length;
    this.password_reuse_prevention = password_reuse_prevention;
    this.require_lowercase_characters = require_lowercase_characters;
    this.require_numbers = require_numbers;
    this.require_symbols = require_symbols;
    this.require_uppercase_characters = require_uppercase_characters;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.iam_account_password_policy_id !== null) {
      ih['iam_account_password_policy_id'] = this.iam_account_password_policy_id;
    }
    if (this.allow_users_to_change_password !== true) {
      ih['allow_users_to_change_password'] = this.allow_users_to_change_password;
    }
    if (this.expire_passwords !== null) {
      ih['expire_passwords'] = this.expire_passwords;
    }
    if (this.hard_expiry !== null) {
      ih['hard_expiry'] = this.hard_expiry;
    }
    if (this.max_password_age !== null) {
      ih['max_password_age'] = this.max_password_age;
    }
    if (this.minimum_password_length !== 6) {
      ih['minimum_password_length'] = this.minimum_password_length;
    }
    if (this.password_reuse_prevention !== null) {
      ih['password_reuse_prevention'] = this.password_reuse_prevention;
    }
    if (this.require_lowercase_characters !== null) {
      ih['require_lowercase_characters'] = this.require_lowercase_characters;
    }
    if (this.require_numbers !== null) {
      ih['require_numbers'] = this.require_numbers;
    }
    if (this.require_symbols !== null) {
      ih['require_symbols'] = this.require_symbols;
    }
    if (this.require_uppercase_characters !== null) {
      ih['require_uppercase_characters'] = this.require_uppercase_characters;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iam_account_password_policy';
  }
}

export class Iam_group implements PcoreValue {
  readonly name: string;
  readonly iam_group_id: string|null;
  readonly arn: string|null;
  readonly path: string;
  readonly unique_id: string|null;

  constructor({
    name,
    iam_group_id = null,
    arn = null,
    path = '/',
    unique_id = null
  }: {
    name: string,
    iam_group_id?: string|null,
    arn?: string|null,
    path?: string,
    unique_id?: string|null
  }) {
    this.name = name;
    this.iam_group_id = iam_group_id;
    this.arn = arn;
    this.path = path;
    this.unique_id = unique_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.iam_group_id !== null) {
      ih['iam_group_id'] = this.iam_group_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.path !== '/') {
      ih['path'] = this.path;
    }
    if (this.unique_id !== null) {
      ih['unique_id'] = this.unique_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iam_group';
  }
}

export class Iam_group_membership implements PcoreValue {
  readonly group: string;
  readonly name: string;
  readonly users: string[];
  readonly iam_group_membership_id: string|null;

  constructor({
    group,
    name,
    users,
    iam_group_membership_id = null
  }: {
    group: string,
    name: string,
    users: string[],
    iam_group_membership_id?: string|null
  }) {
    this.group = group;
    this.name = name;
    this.users = users;
    this.iam_group_membership_id = iam_group_membership_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['group'] = this.group;
    ih['name'] = this.name;
    ih['users'] = this.users;
    if (this.iam_group_membership_id !== null) {
      ih['iam_group_membership_id'] = this.iam_group_membership_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iam_group_membership';
  }
}

export class Iam_group_policy implements PcoreValue {
  readonly group: string;
  readonly policy: string;
  readonly iam_group_policy_id: string|null;
  readonly name: string|null;
  readonly name_prefix: string|null;

  constructor({
    group,
    policy,
    iam_group_policy_id = null,
    name = null,
    name_prefix = null
  }: {
    group: string,
    policy: string,
    iam_group_policy_id?: string|null,
    name?: string|null,
    name_prefix?: string|null
  }) {
    this.group = group;
    this.policy = policy;
    this.iam_group_policy_id = iam_group_policy_id;
    this.name = name;
    this.name_prefix = name_prefix;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['group'] = this.group;
    ih['policy'] = this.policy;
    if (this.iam_group_policy_id !== null) {
      ih['iam_group_policy_id'] = this.iam_group_policy_id;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iam_group_policy';
  }
}

export class Iam_group_policy_attachment implements PcoreValue {
  readonly group: string;
  readonly policy_arn: string;
  readonly iam_group_policy_attachment_id: string|null;

  constructor({
    group,
    policy_arn,
    iam_group_policy_attachment_id = null
  }: {
    group: string,
    policy_arn: string,
    iam_group_policy_attachment_id?: string|null
  }) {
    this.group = group;
    this.policy_arn = policy_arn;
    this.iam_group_policy_attachment_id = iam_group_policy_attachment_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['group'] = this.group;
    ih['policy_arn'] = this.policy_arn;
    if (this.iam_group_policy_attachment_id !== null) {
      ih['iam_group_policy_attachment_id'] = this.iam_group_policy_attachment_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iam_group_policy_attachment';
  }
}

export class Iam_instance_profile implements PcoreValue {
  readonly iam_instance_profile_id: string|null;
  readonly arn: string|null;
  readonly create_date: string|null;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly path: string;
  readonly role: string|null;
  readonly unique_id: string|null;

  constructor({
    iam_instance_profile_id = null,
    arn = null,
    create_date = null,
    name = null,
    name_prefix = null,
    path = '/',
    role = null,
    unique_id = null
  }: {
    iam_instance_profile_id?: string|null,
    arn?: string|null,
    create_date?: string|null,
    name?: string|null,
    name_prefix?: string|null,
    path?: string,
    role?: string|null,
    unique_id?: string|null
  }) {
    this.iam_instance_profile_id = iam_instance_profile_id;
    this.arn = arn;
    this.create_date = create_date;
    this.name = name;
    this.name_prefix = name_prefix;
    this.path = path;
    this.role = role;
    this.unique_id = unique_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.iam_instance_profile_id !== null) {
      ih['iam_instance_profile_id'] = this.iam_instance_profile_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.create_date !== null) {
      ih['create_date'] = this.create_date;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.path !== '/') {
      ih['path'] = this.path;
    }
    if (this.role !== null) {
      ih['role'] = this.role;
    }
    if (this.unique_id !== null) {
      ih['unique_id'] = this.unique_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iam_instance_profile';
  }
}

export class Iam_openid_connect_provider implements PcoreValue {
  readonly client_id_list: string[];
  readonly thumbprint_list: string[];
  readonly url: string;
  readonly iam_openid_connect_provider_id: string|null;
  readonly arn: string|null;

  constructor({
    client_id_list,
    thumbprint_list,
    url,
    iam_openid_connect_provider_id = null,
    arn = null
  }: {
    client_id_list: string[],
    thumbprint_list: string[],
    url: string,
    iam_openid_connect_provider_id?: string|null,
    arn?: string|null
  }) {
    this.client_id_list = client_id_list;
    this.thumbprint_list = thumbprint_list;
    this.url = url;
    this.iam_openid_connect_provider_id = iam_openid_connect_provider_id;
    this.arn = arn;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['client_id_list'] = this.client_id_list;
    ih['thumbprint_list'] = this.thumbprint_list;
    ih['url'] = this.url;
    if (this.iam_openid_connect_provider_id !== null) {
      ih['iam_openid_connect_provider_id'] = this.iam_openid_connect_provider_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iam_openid_connect_provider';
  }
}

export class Iam_policy implements PcoreValue {
  readonly policy: string;
  readonly iam_policy_id: string|null;
  readonly arn: string|null;
  readonly description: string|null;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly path: string;

  constructor({
    policy,
    iam_policy_id = null,
    arn = null,
    description = null,
    name = null,
    name_prefix = null,
    path = '/'
  }: {
    policy: string,
    iam_policy_id?: string|null,
    arn?: string|null,
    description?: string|null,
    name?: string|null,
    name_prefix?: string|null,
    path?: string
  }) {
    this.policy = policy;
    this.iam_policy_id = iam_policy_id;
    this.arn = arn;
    this.description = description;
    this.name = name;
    this.name_prefix = name_prefix;
    this.path = path;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['policy'] = this.policy;
    if (this.iam_policy_id !== null) {
      ih['iam_policy_id'] = this.iam_policy_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.path !== '/') {
      ih['path'] = this.path;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iam_policy';
  }
}

export class Iam_policy_attachment implements PcoreValue {
  readonly name: string;
  readonly policy_arn: string;
  readonly iam_policy_attachment_id: string|null;
  readonly groups: string[]|null;
  readonly roles: string[]|null;
  readonly users: string[]|null;

  constructor({
    name,
    policy_arn,
    iam_policy_attachment_id = null,
    groups = null,
    roles = null,
    users = null
  }: {
    name: string,
    policy_arn: string,
    iam_policy_attachment_id?: string|null,
    groups?: string[]|null,
    roles?: string[]|null,
    users?: string[]|null
  }) {
    this.name = name;
    this.policy_arn = policy_arn;
    this.iam_policy_attachment_id = iam_policy_attachment_id;
    this.groups = groups;
    this.roles = roles;
    this.users = users;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['policy_arn'] = this.policy_arn;
    if (this.iam_policy_attachment_id !== null) {
      ih['iam_policy_attachment_id'] = this.iam_policy_attachment_id;
    }
    if (this.groups !== null) {
      ih['groups'] = this.groups;
    }
    if (this.roles !== null) {
      ih['roles'] = this.roles;
    }
    if (this.users !== null) {
      ih['users'] = this.users;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iam_policy_attachment';
  }
}

export class Iam_role implements PcoreValue {
  readonly assume_role_policy: string;
  readonly iam_role_id: string|null;
  readonly arn: string|null;
  readonly create_date: string|null;
  readonly description: string|null;
  readonly force_detach_policies: boolean;
  readonly max_session_duration: number;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly path: string;
  readonly permissions_boundary: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly unique_id: string|null;

  constructor({
    assume_role_policy,
    iam_role_id = null,
    arn = null,
    create_date = null,
    description = null,
    force_detach_policies = false,
    max_session_duration = 3600,
    name = null,
    name_prefix = null,
    path = '/',
    permissions_boundary = null,
    tags = null,
    unique_id = null
  }: {
    assume_role_policy: string,
    iam_role_id?: string|null,
    arn?: string|null,
    create_date?: string|null,
    description?: string|null,
    force_detach_policies?: boolean,
    max_session_duration?: number,
    name?: string|null,
    name_prefix?: string|null,
    path?: string,
    permissions_boundary?: string|null,
    tags?: {[s: string]: string}|null,
    unique_id?: string|null
  }) {
    this.assume_role_policy = assume_role_policy;
    this.iam_role_id = iam_role_id;
    this.arn = arn;
    this.create_date = create_date;
    this.description = description;
    this.force_detach_policies = force_detach_policies;
    this.max_session_duration = max_session_duration;
    this.name = name;
    this.name_prefix = name_prefix;
    this.path = path;
    this.permissions_boundary = permissions_boundary;
    this.tags = tags;
    this.unique_id = unique_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['assume_role_policy'] = this.assume_role_policy;
    if (this.iam_role_id !== null) {
      ih['iam_role_id'] = this.iam_role_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.create_date !== null) {
      ih['create_date'] = this.create_date;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.force_detach_policies !== false) {
      ih['force_detach_policies'] = this.force_detach_policies;
    }
    if (this.max_session_duration !== 3600) {
      ih['max_session_duration'] = this.max_session_duration;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.path !== '/') {
      ih['path'] = this.path;
    }
    if (this.permissions_boundary !== null) {
      ih['permissions_boundary'] = this.permissions_boundary;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.unique_id !== null) {
      ih['unique_id'] = this.unique_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iam_role';
  }
}

export class Iam_role_policy implements PcoreValue {
  readonly policy: string;
  readonly role: string;
  readonly iam_role_policy_id: string|null;
  readonly name: string|null;
  readonly name_prefix: string|null;

  constructor({
    policy,
    role,
    iam_role_policy_id = null,
    name = null,
    name_prefix = null
  }: {
    policy: string,
    role: string,
    iam_role_policy_id?: string|null,
    name?: string|null,
    name_prefix?: string|null
  }) {
    this.policy = policy;
    this.role = role;
    this.iam_role_policy_id = iam_role_policy_id;
    this.name = name;
    this.name_prefix = name_prefix;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['policy'] = this.policy;
    ih['role'] = this.role;
    if (this.iam_role_policy_id !== null) {
      ih['iam_role_policy_id'] = this.iam_role_policy_id;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iam_role_policy';
  }
}

export class Iam_role_policy_attachment implements PcoreValue {
  readonly policy_arn: string;
  readonly role: string;
  readonly iam_role_policy_attachment_id: string|null;

  constructor({
    policy_arn,
    role,
    iam_role_policy_attachment_id = null
  }: {
    policy_arn: string,
    role: string,
    iam_role_policy_attachment_id?: string|null
  }) {
    this.policy_arn = policy_arn;
    this.role = role;
    this.iam_role_policy_attachment_id = iam_role_policy_attachment_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['policy_arn'] = this.policy_arn;
    ih['role'] = this.role;
    if (this.iam_role_policy_attachment_id !== null) {
      ih['iam_role_policy_attachment_id'] = this.iam_role_policy_attachment_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iam_role_policy_attachment';
  }
}

export class Iam_saml_provider implements PcoreValue {
  readonly name: string;
  readonly saml_metadata_document: string;
  readonly iam_saml_provider_id: string|null;
  readonly arn: string|null;
  readonly valid_until: string|null;

  constructor({
    name,
    saml_metadata_document,
    iam_saml_provider_id = null,
    arn = null,
    valid_until = null
  }: {
    name: string,
    saml_metadata_document: string,
    iam_saml_provider_id?: string|null,
    arn?: string|null,
    valid_until?: string|null
  }) {
    this.name = name;
    this.saml_metadata_document = saml_metadata_document;
    this.iam_saml_provider_id = iam_saml_provider_id;
    this.arn = arn;
    this.valid_until = valid_until;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['saml_metadata_document'] = this.saml_metadata_document;
    if (this.iam_saml_provider_id !== null) {
      ih['iam_saml_provider_id'] = this.iam_saml_provider_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.valid_until !== null) {
      ih['valid_until'] = this.valid_until;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iam_saml_provider';
  }
}

export class Iam_server_certificate implements PcoreValue {
  readonly certificate_body: string;
  readonly private_key: string;
  readonly iam_server_certificate_id: string|null;
  readonly arn: string|null;
  readonly certificate_chain: string|null;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly path: string;

  constructor({
    certificate_body,
    private_key,
    iam_server_certificate_id = null,
    arn = null,
    certificate_chain = null,
    name = null,
    name_prefix = null,
    path = '/'
  }: {
    certificate_body: string,
    private_key: string,
    iam_server_certificate_id?: string|null,
    arn?: string|null,
    certificate_chain?: string|null,
    name?: string|null,
    name_prefix?: string|null,
    path?: string
  }) {
    this.certificate_body = certificate_body;
    this.private_key = private_key;
    this.iam_server_certificate_id = iam_server_certificate_id;
    this.arn = arn;
    this.certificate_chain = certificate_chain;
    this.name = name;
    this.name_prefix = name_prefix;
    this.path = path;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['certificate_body'] = this.certificate_body;
    ih['private_key'] = this.private_key;
    if (this.iam_server_certificate_id !== null) {
      ih['iam_server_certificate_id'] = this.iam_server_certificate_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.certificate_chain !== null) {
      ih['certificate_chain'] = this.certificate_chain;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.path !== '/') {
      ih['path'] = this.path;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iam_server_certificate';
  }
}

export class Iam_service_linked_role implements PcoreValue {
  readonly aws_service_name: string;
  readonly iam_service_linked_role_id: string|null;
  readonly arn: string|null;
  readonly create_date: string|null;
  readonly custom_suffix: string|null;
  readonly description: string|null;
  readonly name: string|null;
  readonly path: string|null;
  readonly unique_id: string|null;

  constructor({
    aws_service_name,
    iam_service_linked_role_id = null,
    arn = null,
    create_date = null,
    custom_suffix = null,
    description = null,
    name = null,
    path = null,
    unique_id = null
  }: {
    aws_service_name: string,
    iam_service_linked_role_id?: string|null,
    arn?: string|null,
    create_date?: string|null,
    custom_suffix?: string|null,
    description?: string|null,
    name?: string|null,
    path?: string|null,
    unique_id?: string|null
  }) {
    this.aws_service_name = aws_service_name;
    this.iam_service_linked_role_id = iam_service_linked_role_id;
    this.arn = arn;
    this.create_date = create_date;
    this.custom_suffix = custom_suffix;
    this.description = description;
    this.name = name;
    this.path = path;
    this.unique_id = unique_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['aws_service_name'] = this.aws_service_name;
    if (this.iam_service_linked_role_id !== null) {
      ih['iam_service_linked_role_id'] = this.iam_service_linked_role_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.create_date !== null) {
      ih['create_date'] = this.create_date;
    }
    if (this.custom_suffix !== null) {
      ih['custom_suffix'] = this.custom_suffix;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.path !== null) {
      ih['path'] = this.path;
    }
    if (this.unique_id !== null) {
      ih['unique_id'] = this.unique_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iam_service_linked_role';
  }
}

export class Iam_user implements PcoreValue {
  readonly name: string;
  readonly iam_user_id: string|null;
  readonly arn: string|null;
  readonly force_destroy: boolean;
  readonly path: string;
  readonly permissions_boundary: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly unique_id: string|null;

  constructor({
    name,
    iam_user_id = null,
    arn = null,
    force_destroy = false,
    path = '/',
    permissions_boundary = null,
    tags = null,
    unique_id = null
  }: {
    name: string,
    iam_user_id?: string|null,
    arn?: string|null,
    force_destroy?: boolean,
    path?: string,
    permissions_boundary?: string|null,
    tags?: {[s: string]: string}|null,
    unique_id?: string|null
  }) {
    this.name = name;
    this.iam_user_id = iam_user_id;
    this.arn = arn;
    this.force_destroy = force_destroy;
    this.path = path;
    this.permissions_boundary = permissions_boundary;
    this.tags = tags;
    this.unique_id = unique_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.iam_user_id !== null) {
      ih['iam_user_id'] = this.iam_user_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.force_destroy !== false) {
      ih['force_destroy'] = this.force_destroy;
    }
    if (this.path !== '/') {
      ih['path'] = this.path;
    }
    if (this.permissions_boundary !== null) {
      ih['permissions_boundary'] = this.permissions_boundary;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.unique_id !== null) {
      ih['unique_id'] = this.unique_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iam_user';
  }
}

export class Iam_user_group_membership implements PcoreValue {
  readonly groups: string[];
  readonly user: string;
  readonly iam_user_group_membership_id: string|null;

  constructor({
    groups,
    user,
    iam_user_group_membership_id = null
  }: {
    groups: string[],
    user: string,
    iam_user_group_membership_id?: string|null
  }) {
    this.groups = groups;
    this.user = user;
    this.iam_user_group_membership_id = iam_user_group_membership_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['groups'] = this.groups;
    ih['user'] = this.user;
    if (this.iam_user_group_membership_id !== null) {
      ih['iam_user_group_membership_id'] = this.iam_user_group_membership_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iam_user_group_membership';
  }
}

export class Iam_user_login_profile implements PcoreValue {
  readonly pgp_key: string;
  readonly user: string;
  readonly iam_user_login_profile_id: string|null;
  readonly encrypted_password: string|null;
  readonly key_fingerprint: string|null;
  readonly password_length: number;
  readonly password_reset_required: boolean;

  constructor({
    pgp_key,
    user,
    iam_user_login_profile_id = null,
    encrypted_password = null,
    key_fingerprint = null,
    password_length = 20,
    password_reset_required = true
  }: {
    pgp_key: string,
    user: string,
    iam_user_login_profile_id?: string|null,
    encrypted_password?: string|null,
    key_fingerprint?: string|null,
    password_length?: number,
    password_reset_required?: boolean
  }) {
    this.pgp_key = pgp_key;
    this.user = user;
    this.iam_user_login_profile_id = iam_user_login_profile_id;
    this.encrypted_password = encrypted_password;
    this.key_fingerprint = key_fingerprint;
    this.password_length = password_length;
    this.password_reset_required = password_reset_required;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['pgp_key'] = this.pgp_key;
    ih['user'] = this.user;
    if (this.iam_user_login_profile_id !== null) {
      ih['iam_user_login_profile_id'] = this.iam_user_login_profile_id;
    }
    if (this.encrypted_password !== null) {
      ih['encrypted_password'] = this.encrypted_password;
    }
    if (this.key_fingerprint !== null) {
      ih['key_fingerprint'] = this.key_fingerprint;
    }
    if (this.password_length !== 20) {
      ih['password_length'] = this.password_length;
    }
    if (this.password_reset_required !== true) {
      ih['password_reset_required'] = this.password_reset_required;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iam_user_login_profile';
  }
}

export class Iam_user_policy implements PcoreValue {
  readonly policy: string;
  readonly user: string;
  readonly iam_user_policy_id: string|null;
  readonly name: string|null;
  readonly name_prefix: string|null;

  constructor({
    policy,
    user,
    iam_user_policy_id = null,
    name = null,
    name_prefix = null
  }: {
    policy: string,
    user: string,
    iam_user_policy_id?: string|null,
    name?: string|null,
    name_prefix?: string|null
  }) {
    this.policy = policy;
    this.user = user;
    this.iam_user_policy_id = iam_user_policy_id;
    this.name = name;
    this.name_prefix = name_prefix;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['policy'] = this.policy;
    ih['user'] = this.user;
    if (this.iam_user_policy_id !== null) {
      ih['iam_user_policy_id'] = this.iam_user_policy_id;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iam_user_policy';
  }
}

export class Iam_user_policy_attachment implements PcoreValue {
  readonly policy_arn: string;
  readonly user: string;
  readonly iam_user_policy_attachment_id: string|null;

  constructor({
    policy_arn,
    user,
    iam_user_policy_attachment_id = null
  }: {
    policy_arn: string,
    user: string,
    iam_user_policy_attachment_id?: string|null
  }) {
    this.policy_arn = policy_arn;
    this.user = user;
    this.iam_user_policy_attachment_id = iam_user_policy_attachment_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['policy_arn'] = this.policy_arn;
    ih['user'] = this.user;
    if (this.iam_user_policy_attachment_id !== null) {
      ih['iam_user_policy_attachment_id'] = this.iam_user_policy_attachment_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iam_user_policy_attachment';
  }
}

export class Iam_user_ssh_key implements PcoreValue {
  readonly encoding: string;
  readonly public_key: string;
  readonly username: string;
  readonly iam_user_ssh_key_id: string|null;
  readonly fingerprint: string|null;
  readonly ssh_public_key_id: string|null;
  readonly status: string|null;

  constructor({
    encoding,
    public_key,
    username,
    iam_user_ssh_key_id = null,
    fingerprint = null,
    ssh_public_key_id = null,
    status = null
  }: {
    encoding: string,
    public_key: string,
    username: string,
    iam_user_ssh_key_id?: string|null,
    fingerprint?: string|null,
    ssh_public_key_id?: string|null,
    status?: string|null
  }) {
    this.encoding = encoding;
    this.public_key = public_key;
    this.username = username;
    this.iam_user_ssh_key_id = iam_user_ssh_key_id;
    this.fingerprint = fingerprint;
    this.ssh_public_key_id = ssh_public_key_id;
    this.status = status;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['encoding'] = this.encoding;
    ih['public_key'] = this.public_key;
    ih['username'] = this.username;
    if (this.iam_user_ssh_key_id !== null) {
      ih['iam_user_ssh_key_id'] = this.iam_user_ssh_key_id;
    }
    if (this.fingerprint !== null) {
      ih['fingerprint'] = this.fingerprint;
    }
    if (this.ssh_public_key_id !== null) {
      ih['ssh_public_key_id'] = this.ssh_public_key_id;
    }
    if (this.status !== null) {
      ih['status'] = this.status;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iam_user_ssh_key';
  }
}

export class Inspector_assessment_target implements PcoreValue {
  readonly name: string;
  readonly inspector_assessment_target_id: string|null;
  readonly arn: string|null;
  readonly resource_group_arn: string|null;

  constructor({
    name,
    inspector_assessment_target_id = null,
    arn = null,
    resource_group_arn = null
  }: {
    name: string,
    inspector_assessment_target_id?: string|null,
    arn?: string|null,
    resource_group_arn?: string|null
  }) {
    this.name = name;
    this.inspector_assessment_target_id = inspector_assessment_target_id;
    this.arn = arn;
    this.resource_group_arn = resource_group_arn;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.inspector_assessment_target_id !== null) {
      ih['inspector_assessment_target_id'] = this.inspector_assessment_target_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.resource_group_arn !== null) {
      ih['resource_group_arn'] = this.resource_group_arn;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Inspector_assessment_target';
  }
}

export class Inspector_assessment_template implements PcoreValue {
  readonly duration: number;
  readonly name: string;
  readonly rules_package_arns: string[];
  readonly target_arn: string;
  readonly inspector_assessment_template_id: string|null;
  readonly arn: string|null;

  constructor({
    duration,
    name,
    rules_package_arns,
    target_arn,
    inspector_assessment_template_id = null,
    arn = null
  }: {
    duration: number,
    name: string,
    rules_package_arns: string[],
    target_arn: string,
    inspector_assessment_template_id?: string|null,
    arn?: string|null
  }) {
    this.duration = duration;
    this.name = name;
    this.rules_package_arns = rules_package_arns;
    this.target_arn = target_arn;
    this.inspector_assessment_template_id = inspector_assessment_template_id;
    this.arn = arn;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['duration'] = this.duration;
    ih['name'] = this.name;
    ih['rules_package_arns'] = this.rules_package_arns;
    ih['target_arn'] = this.target_arn;
    if (this.inspector_assessment_template_id !== null) {
      ih['inspector_assessment_template_id'] = this.inspector_assessment_template_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Inspector_assessment_template';
  }
}

export class Inspector_resource_group implements PcoreValue {
  readonly tags: {[s: string]: string};
  readonly inspector_resource_group_id: string|null;
  readonly arn: string|null;

  constructor({
    tags,
    inspector_resource_group_id = null,
    arn = null
  }: {
    tags: {[s: string]: string},
    inspector_resource_group_id?: string|null,
    arn?: string|null
  }) {
    this.tags = tags;
    this.inspector_resource_group_id = inspector_resource_group_id;
    this.arn = arn;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['tags'] = this.tags;
    if (this.inspector_resource_group_id !== null) {
      ih['inspector_resource_group_id'] = this.inspector_resource_group_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Inspector_resource_group';
  }
}

export class Instance implements PcoreValue {
  readonly ami: string;
  readonly instance_type: string;
  readonly instance_id: string|null;
  readonly arn: string|null;
  readonly associate_public_ip_address: boolean|null;
  readonly availability_zone: string|null;
  readonly cpu_core_count: number|null;
  readonly cpu_threads_per_core: number|null;
  readonly credit_specification: Anon253|null;
  readonly disable_api_termination: boolean|null;
  readonly ebs_block_device: Anon254[]|null;
  readonly ebs_optimized: boolean|null;
  readonly ephemeral_block_device: Anon255[]|null;
  readonly get_password_data: boolean;
  readonly host_id: string|null;
  readonly iam_instance_profile: string|null;
  readonly instance_initiated_shutdown_behavior: string|null;
  readonly instance_state: string|null;
  readonly ipv6_address_count: number|null;
  readonly ipv6_addresses: string[]|null;
  readonly key_name: string|null;
  readonly monitoring: boolean|null;
  readonly network_interface: Anon256[]|null;
  readonly password_data: string|null;
  readonly placement_group: string|null;
  readonly primary_network_interface_id: string|null;
  readonly private_dns: string|null;
  readonly private_ip: string|null;
  readonly public_dns: string|null;
  readonly public_ip: string|null;
  readonly root_block_device: Anon257|null;
  readonly security_groups: string[]|null;
  readonly source_dest_check: boolean;
  readonly subnet_id: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly tenancy: string|null;
  readonly user_data: string|null;
  readonly user_data_base64: string|null;
  readonly volume_tags: {[s: string]: string}|null;
  readonly vpc_security_group_ids: string[]|null;

  constructor({
    ami,
    instance_type,
    instance_id = null,
    arn = null,
    associate_public_ip_address = null,
    availability_zone = null,
    cpu_core_count = null,
    cpu_threads_per_core = null,
    credit_specification = null,
    disable_api_termination = null,
    ebs_block_device = null,
    ebs_optimized = null,
    ephemeral_block_device = null,
    get_password_data = false,
    host_id = null,
    iam_instance_profile = null,
    instance_initiated_shutdown_behavior = null,
    instance_state = null,
    ipv6_address_count = null,
    ipv6_addresses = null,
    key_name = null,
    monitoring = null,
    network_interface = null,
    password_data = null,
    placement_group = null,
    primary_network_interface_id = null,
    private_dns = null,
    private_ip = null,
    public_dns = null,
    public_ip = null,
    root_block_device = null,
    security_groups = null,
    source_dest_check = true,
    subnet_id = null,
    tags = null,
    tenancy = null,
    user_data = null,
    user_data_base64 = null,
    volume_tags = null,
    vpc_security_group_ids = null
  }: {
    ami: string,
    instance_type: string,
    instance_id?: string|null,
    arn?: string|null,
    associate_public_ip_address?: boolean|null,
    availability_zone?: string|null,
    cpu_core_count?: number|null,
    cpu_threads_per_core?: number|null,
    credit_specification?: Anon253|null,
    disable_api_termination?: boolean|null,
    ebs_block_device?: Anon254[]|null,
    ebs_optimized?: boolean|null,
    ephemeral_block_device?: Anon255[]|null,
    get_password_data?: boolean,
    host_id?: string|null,
    iam_instance_profile?: string|null,
    instance_initiated_shutdown_behavior?: string|null,
    instance_state?: string|null,
    ipv6_address_count?: number|null,
    ipv6_addresses?: string[]|null,
    key_name?: string|null,
    monitoring?: boolean|null,
    network_interface?: Anon256[]|null,
    password_data?: string|null,
    placement_group?: string|null,
    primary_network_interface_id?: string|null,
    private_dns?: string|null,
    private_ip?: string|null,
    public_dns?: string|null,
    public_ip?: string|null,
    root_block_device?: Anon257|null,
    security_groups?: string[]|null,
    source_dest_check?: boolean,
    subnet_id?: string|null,
    tags?: {[s: string]: string}|null,
    tenancy?: string|null,
    user_data?: string|null,
    user_data_base64?: string|null,
    volume_tags?: {[s: string]: string}|null,
    vpc_security_group_ids?: string[]|null
  }) {
    this.ami = ami;
    this.instance_type = instance_type;
    this.instance_id = instance_id;
    this.arn = arn;
    this.associate_public_ip_address = associate_public_ip_address;
    this.availability_zone = availability_zone;
    this.cpu_core_count = cpu_core_count;
    this.cpu_threads_per_core = cpu_threads_per_core;
    this.credit_specification = credit_specification;
    this.disable_api_termination = disable_api_termination;
    this.ebs_block_device = ebs_block_device;
    this.ebs_optimized = ebs_optimized;
    this.ephemeral_block_device = ephemeral_block_device;
    this.get_password_data = get_password_data;
    this.host_id = host_id;
    this.iam_instance_profile = iam_instance_profile;
    this.instance_initiated_shutdown_behavior = instance_initiated_shutdown_behavior;
    this.instance_state = instance_state;
    this.ipv6_address_count = ipv6_address_count;
    this.ipv6_addresses = ipv6_addresses;
    this.key_name = key_name;
    this.monitoring = monitoring;
    this.network_interface = network_interface;
    this.password_data = password_data;
    this.placement_group = placement_group;
    this.primary_network_interface_id = primary_network_interface_id;
    this.private_dns = private_dns;
    this.private_ip = private_ip;
    this.public_dns = public_dns;
    this.public_ip = public_ip;
    this.root_block_device = root_block_device;
    this.security_groups = security_groups;
    this.source_dest_check = source_dest_check;
    this.subnet_id = subnet_id;
    this.tags = tags;
    this.tenancy = tenancy;
    this.user_data = user_data;
    this.user_data_base64 = user_data_base64;
    this.volume_tags = volume_tags;
    this.vpc_security_group_ids = vpc_security_group_ids;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['ami'] = this.ami;
    ih['instance_type'] = this.instance_type;
    if (this.instance_id !== null) {
      ih['instance_id'] = this.instance_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.associate_public_ip_address !== null) {
      ih['associate_public_ip_address'] = this.associate_public_ip_address;
    }
    if (this.availability_zone !== null) {
      ih['availability_zone'] = this.availability_zone;
    }
    if (this.cpu_core_count !== null) {
      ih['cpu_core_count'] = this.cpu_core_count;
    }
    if (this.cpu_threads_per_core !== null) {
      ih['cpu_threads_per_core'] = this.cpu_threads_per_core;
    }
    if (this.credit_specification !== null) {
      ih['credit_specification'] = this.credit_specification;
    }
    if (this.disable_api_termination !== null) {
      ih['disable_api_termination'] = this.disable_api_termination;
    }
    if (this.ebs_block_device !== null) {
      ih['ebs_block_device'] = this.ebs_block_device;
    }
    if (this.ebs_optimized !== null) {
      ih['ebs_optimized'] = this.ebs_optimized;
    }
    if (this.ephemeral_block_device !== null) {
      ih['ephemeral_block_device'] = this.ephemeral_block_device;
    }
    if (this.get_password_data !== false) {
      ih['get_password_data'] = this.get_password_data;
    }
    if (this.host_id !== null) {
      ih['host_id'] = this.host_id;
    }
    if (this.iam_instance_profile !== null) {
      ih['iam_instance_profile'] = this.iam_instance_profile;
    }
    if (this.instance_initiated_shutdown_behavior !== null) {
      ih['instance_initiated_shutdown_behavior'] = this.instance_initiated_shutdown_behavior;
    }
    if (this.instance_state !== null) {
      ih['instance_state'] = this.instance_state;
    }
    if (this.ipv6_address_count !== null) {
      ih['ipv6_address_count'] = this.ipv6_address_count;
    }
    if (this.ipv6_addresses !== null) {
      ih['ipv6_addresses'] = this.ipv6_addresses;
    }
    if (this.key_name !== null) {
      ih['key_name'] = this.key_name;
    }
    if (this.monitoring !== null) {
      ih['monitoring'] = this.monitoring;
    }
    if (this.network_interface !== null) {
      ih['network_interface'] = this.network_interface;
    }
    if (this.password_data !== null) {
      ih['password_data'] = this.password_data;
    }
    if (this.placement_group !== null) {
      ih['placement_group'] = this.placement_group;
    }
    if (this.primary_network_interface_id !== null) {
      ih['primary_network_interface_id'] = this.primary_network_interface_id;
    }
    if (this.private_dns !== null) {
      ih['private_dns'] = this.private_dns;
    }
    if (this.private_ip !== null) {
      ih['private_ip'] = this.private_ip;
    }
    if (this.public_dns !== null) {
      ih['public_dns'] = this.public_dns;
    }
    if (this.public_ip !== null) {
      ih['public_ip'] = this.public_ip;
    }
    if (this.root_block_device !== null) {
      ih['root_block_device'] = this.root_block_device;
    }
    if (this.security_groups !== null) {
      ih['security_groups'] = this.security_groups;
    }
    if (this.source_dest_check !== true) {
      ih['source_dest_check'] = this.source_dest_check;
    }
    if (this.subnet_id !== null) {
      ih['subnet_id'] = this.subnet_id;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.tenancy !== null) {
      ih['tenancy'] = this.tenancy;
    }
    if (this.user_data !== null) {
      ih['user_data'] = this.user_data;
    }
    if (this.user_data_base64 !== null) {
      ih['user_data_base64'] = this.user_data_base64;
    }
    if (this.volume_tags !== null) {
      ih['volume_tags'] = this.volume_tags;
    }
    if (this.vpc_security_group_ids !== null) {
      ih['vpc_security_group_ids'] = this.vpc_security_group_ids;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Instance';
  }
}

export class Internet_gateway implements PcoreValue {
  readonly internet_gateway_id: string|null;
  readonly owner_id: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly vpc_id: string|null;

  constructor({
    internet_gateway_id = null,
    owner_id = null,
    tags = null,
    vpc_id = null
  }: {
    internet_gateway_id?: string|null,
    owner_id?: string|null,
    tags?: {[s: string]: string}|null,
    vpc_id?: string|null
  }) {
    this.internet_gateway_id = internet_gateway_id;
    this.owner_id = owner_id;
    this.tags = tags;
    this.vpc_id = vpc_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.internet_gateway_id !== null) {
      ih['internet_gateway_id'] = this.internet_gateway_id;
    }
    if (this.owner_id !== null) {
      ih['owner_id'] = this.owner_id;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpc_id !== null) {
      ih['vpc_id'] = this.vpc_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Internet_gateway';
  }
}

export class Iot_certificate implements PcoreValue {
  readonly active: boolean;
  readonly csr: string;
  readonly iot_certificate_id: string|null;
  readonly arn: string|null;

  constructor({
    active,
    csr,
    iot_certificate_id = null,
    arn = null
  }: {
    active: boolean,
    csr: string,
    iot_certificate_id?: string|null,
    arn?: string|null
  }) {
    this.active = active;
    this.csr = csr;
    this.iot_certificate_id = iot_certificate_id;
    this.arn = arn;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['active'] = this.active;
    ih['csr'] = this.csr;
    if (this.iot_certificate_id !== null) {
      ih['iot_certificate_id'] = this.iot_certificate_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iot_certificate';
  }
}

export class Iot_policy implements PcoreValue {
  readonly name: string;
  readonly policy: string;
  readonly iot_policy_id: string|null;
  readonly arn: string|null;
  readonly default_version_id: string|null;

  constructor({
    name,
    policy,
    iot_policy_id = null,
    arn = null,
    default_version_id = null
  }: {
    name: string,
    policy: string,
    iot_policy_id?: string|null,
    arn?: string|null,
    default_version_id?: string|null
  }) {
    this.name = name;
    this.policy = policy;
    this.iot_policy_id = iot_policy_id;
    this.arn = arn;
    this.default_version_id = default_version_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['policy'] = this.policy;
    if (this.iot_policy_id !== null) {
      ih['iot_policy_id'] = this.iot_policy_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.default_version_id !== null) {
      ih['default_version_id'] = this.default_version_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iot_policy';
  }
}

export class Iot_policy_attachment implements PcoreValue {
  readonly policy: string;
  readonly target: string;
  readonly iot_policy_attachment_id: string|null;

  constructor({
    policy,
    target,
    iot_policy_attachment_id = null
  }: {
    policy: string,
    target: string,
    iot_policy_attachment_id?: string|null
  }) {
    this.policy = policy;
    this.target = target;
    this.iot_policy_attachment_id = iot_policy_attachment_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['policy'] = this.policy;
    ih['target'] = this.target;
    if (this.iot_policy_attachment_id !== null) {
      ih['iot_policy_attachment_id'] = this.iot_policy_attachment_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iot_policy_attachment';
  }
}

export class Iot_thing implements PcoreValue {
  readonly name: string;
  readonly iot_thing_id: string|null;
  readonly arn: string|null;
  readonly attributes: {[s: string]: string}|null;
  readonly default_client_id: string|null;
  readonly thing_type_name: string|null;
  readonly version: number|null;

  constructor({
    name,
    iot_thing_id = null,
    arn = null,
    attributes = null,
    default_client_id = null,
    thing_type_name = null,
    version = null
  }: {
    name: string,
    iot_thing_id?: string|null,
    arn?: string|null,
    attributes?: {[s: string]: string}|null,
    default_client_id?: string|null,
    thing_type_name?: string|null,
    version?: number|null
  }) {
    this.name = name;
    this.iot_thing_id = iot_thing_id;
    this.arn = arn;
    this.attributes = attributes;
    this.default_client_id = default_client_id;
    this.thing_type_name = thing_type_name;
    this.version = version;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.iot_thing_id !== null) {
      ih['iot_thing_id'] = this.iot_thing_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.attributes !== null) {
      ih['attributes'] = this.attributes;
    }
    if (this.default_client_id !== null) {
      ih['default_client_id'] = this.default_client_id;
    }
    if (this.thing_type_name !== null) {
      ih['thing_type_name'] = this.thing_type_name;
    }
    if (this.version !== null) {
      ih['version'] = this.version;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iot_thing';
  }
}

export class Iot_thing_principal_attachment implements PcoreValue {
  readonly principal: string;
  readonly thing: string;
  readonly iot_thing_principal_attachment_id: string|null;

  constructor({
    principal,
    thing,
    iot_thing_principal_attachment_id = null
  }: {
    principal: string,
    thing: string,
    iot_thing_principal_attachment_id?: string|null
  }) {
    this.principal = principal;
    this.thing = thing;
    this.iot_thing_principal_attachment_id = iot_thing_principal_attachment_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['principal'] = this.principal;
    ih['thing'] = this.thing;
    if (this.iot_thing_principal_attachment_id !== null) {
      ih['iot_thing_principal_attachment_id'] = this.iot_thing_principal_attachment_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iot_thing_principal_attachment';
  }
}

export class Iot_thing_type implements PcoreValue {
  readonly name: string;
  readonly iot_thing_type_id: string|null;
  readonly arn: string|null;
  readonly deprecated: boolean;
  readonly properties: Anon258|null;

  constructor({
    name,
    iot_thing_type_id = null,
    arn = null,
    deprecated = false,
    properties = null
  }: {
    name: string,
    iot_thing_type_id?: string|null,
    arn?: string|null,
    deprecated?: boolean,
    properties?: Anon258|null
  }) {
    this.name = name;
    this.iot_thing_type_id = iot_thing_type_id;
    this.arn = arn;
    this.deprecated = deprecated;
    this.properties = properties;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.iot_thing_type_id !== null) {
      ih['iot_thing_type_id'] = this.iot_thing_type_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.deprecated !== false) {
      ih['deprecated'] = this.deprecated;
    }
    if (this.properties !== null) {
      ih['properties'] = this.properties;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iot_thing_type';
  }
}

export class Iot_topic_rule implements PcoreValue {
  readonly enabled: boolean;
  readonly name: string;
  readonly sql: string;
  readonly sql_version: string;
  readonly iot_topic_rule_id: string|null;
  readonly arn: string|null;
  readonly cloudwatch_alarm: Anon259[]|null;
  readonly cloudwatch_metric: Anon260[]|null;
  readonly description: string|null;
  readonly dynamodb: Anon261[]|null;
  readonly elasticsearch: Anon262[]|null;
  readonly firehose: Anon263[]|null;
  readonly kinesis: Anon264[]|null;
  readonly lambda: Anon48[]|null;
  readonly republish: Anon265[]|null;
  readonly s3: Anon266[]|null;
  readonly sns: Anon267[]|null;
  readonly sqs: Anon268[]|null;

  constructor({
    enabled,
    name,
    sql,
    sql_version,
    iot_topic_rule_id = null,
    arn = null,
    cloudwatch_alarm = null,
    cloudwatch_metric = null,
    description = null,
    dynamodb = null,
    elasticsearch = null,
    firehose = null,
    kinesis = null,
    lambda = null,
    republish = null,
    s3 = null,
    sns = null,
    sqs = null
  }: {
    enabled: boolean,
    name: string,
    sql: string,
    sql_version: string,
    iot_topic_rule_id?: string|null,
    arn?: string|null,
    cloudwatch_alarm?: Anon259[]|null,
    cloudwatch_metric?: Anon260[]|null,
    description?: string|null,
    dynamodb?: Anon261[]|null,
    elasticsearch?: Anon262[]|null,
    firehose?: Anon263[]|null,
    kinesis?: Anon264[]|null,
    lambda?: Anon48[]|null,
    republish?: Anon265[]|null,
    s3?: Anon266[]|null,
    sns?: Anon267[]|null,
    sqs?: Anon268[]|null
  }) {
    this.enabled = enabled;
    this.name = name;
    this.sql = sql;
    this.sql_version = sql_version;
    this.iot_topic_rule_id = iot_topic_rule_id;
    this.arn = arn;
    this.cloudwatch_alarm = cloudwatch_alarm;
    this.cloudwatch_metric = cloudwatch_metric;
    this.description = description;
    this.dynamodb = dynamodb;
    this.elasticsearch = elasticsearch;
    this.firehose = firehose;
    this.kinesis = kinesis;
    this.lambda = lambda;
    this.republish = republish;
    this.s3 = s3;
    this.sns = sns;
    this.sqs = sqs;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['enabled'] = this.enabled;
    ih['name'] = this.name;
    ih['sql'] = this.sql;
    ih['sql_version'] = this.sql_version;
    if (this.iot_topic_rule_id !== null) {
      ih['iot_topic_rule_id'] = this.iot_topic_rule_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.cloudwatch_alarm !== null) {
      ih['cloudwatch_alarm'] = this.cloudwatch_alarm;
    }
    if (this.cloudwatch_metric !== null) {
      ih['cloudwatch_metric'] = this.cloudwatch_metric;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.dynamodb !== null) {
      ih['dynamodb'] = this.dynamodb;
    }
    if (this.elasticsearch !== null) {
      ih['elasticsearch'] = this.elasticsearch;
    }
    if (this.firehose !== null) {
      ih['firehose'] = this.firehose;
    }
    if (this.kinesis !== null) {
      ih['kinesis'] = this.kinesis;
    }
    if (this.lambda !== null) {
      ih['lambda'] = this.lambda;
    }
    if (this.republish !== null) {
      ih['republish'] = this.republish;
    }
    if (this.s3 !== null) {
      ih['s3'] = this.s3;
    }
    if (this.sns !== null) {
      ih['sns'] = this.sns;
    }
    if (this.sqs !== null) {
      ih['sqs'] = this.sqs;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Iot_topic_rule';
  }
}

export class Key_pair implements PcoreValue {
  readonly public_key: string;
  readonly key_pair_id: string|null;
  readonly fingerprint: string|null;
  readonly key_name: string|null;
  readonly key_name_prefix: string|null;

  constructor({
    public_key,
    key_pair_id = null,
    fingerprint = null,
    key_name = null,
    key_name_prefix = null
  }: {
    public_key: string,
    key_pair_id?: string|null,
    fingerprint?: string|null,
    key_name?: string|null,
    key_name_prefix?: string|null
  }) {
    this.public_key = public_key;
    this.key_pair_id = key_pair_id;
    this.fingerprint = fingerprint;
    this.key_name = key_name;
    this.key_name_prefix = key_name_prefix;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['public_key'] = this.public_key;
    if (this.key_pair_id !== null) {
      ih['key_pair_id'] = this.key_pair_id;
    }
    if (this.fingerprint !== null) {
      ih['fingerprint'] = this.fingerprint;
    }
    if (this.key_name !== null) {
      ih['key_name'] = this.key_name;
    }
    if (this.key_name_prefix !== null) {
      ih['key_name_prefix'] = this.key_name_prefix;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Key_pair';
  }
}

export class Kinesis_analytics_application implements PcoreValue {
  readonly name: string;
  readonly kinesis_analytics_application_id: string|null;
  readonly arn: string|null;
  readonly cloudwatch_logging_options: Anon269|null;
  readonly code: string|null;
  readonly create_timestamp: string|null;
  readonly description: string|null;
  readonly inputs: Anon279|null;
  readonly last_update_timestamp: string|null;
  readonly outputs: Anon281[]|null;
  readonly reference_data_sources: Anon283|null;
  readonly status: string|null;
  readonly version: number|null;

  constructor({
    name,
    kinesis_analytics_application_id = null,
    arn = null,
    cloudwatch_logging_options = null,
    code = null,
    create_timestamp = null,
    description = null,
    inputs = null,
    last_update_timestamp = null,
    outputs = null,
    reference_data_sources = null,
    status = null,
    version = null
  }: {
    name: string,
    kinesis_analytics_application_id?: string|null,
    arn?: string|null,
    cloudwatch_logging_options?: Anon269|null,
    code?: string|null,
    create_timestamp?: string|null,
    description?: string|null,
    inputs?: Anon279|null,
    last_update_timestamp?: string|null,
    outputs?: Anon281[]|null,
    reference_data_sources?: Anon283|null,
    status?: string|null,
    version?: number|null
  }) {
    this.name = name;
    this.kinesis_analytics_application_id = kinesis_analytics_application_id;
    this.arn = arn;
    this.cloudwatch_logging_options = cloudwatch_logging_options;
    this.code = code;
    this.create_timestamp = create_timestamp;
    this.description = description;
    this.inputs = inputs;
    this.last_update_timestamp = last_update_timestamp;
    this.outputs = outputs;
    this.reference_data_sources = reference_data_sources;
    this.status = status;
    this.version = version;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.kinesis_analytics_application_id !== null) {
      ih['kinesis_analytics_application_id'] = this.kinesis_analytics_application_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.cloudwatch_logging_options !== null) {
      ih['cloudwatch_logging_options'] = this.cloudwatch_logging_options;
    }
    if (this.code !== null) {
      ih['code'] = this.code;
    }
    if (this.create_timestamp !== null) {
      ih['create_timestamp'] = this.create_timestamp;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.inputs !== null) {
      ih['inputs'] = this.inputs;
    }
    if (this.last_update_timestamp !== null) {
      ih['last_update_timestamp'] = this.last_update_timestamp;
    }
    if (this.outputs !== null) {
      ih['outputs'] = this.outputs;
    }
    if (this.reference_data_sources !== null) {
      ih['reference_data_sources'] = this.reference_data_sources;
    }
    if (this.status !== null) {
      ih['status'] = this.status;
    }
    if (this.version !== null) {
      ih['version'] = this.version;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Kinesis_analytics_application';
  }
}

export class Kinesis_firehose_delivery_stream implements PcoreValue {
  readonly destination: string;
  readonly name: string;
  readonly kinesis_firehose_delivery_stream_id: string|null;
  readonly arn: string|null;
  readonly destination_id: string|null;
  readonly elasticsearch_configuration: Anon288|null;
  readonly extended_s3_configuration: Anon300|null;
  readonly kinesis_source_configuration: Anon301|null;
  readonly redshift_configuration: Anon302|null;
  readonly s3_configuration: Anon299|null;
  readonly splunk_configuration: Anon303|null;
  readonly tags: {[s: string]: string}|null;
  readonly version_id: string|null;

  constructor({
    destination,
    name,
    kinesis_firehose_delivery_stream_id = null,
    arn = null,
    destination_id = null,
    elasticsearch_configuration = null,
    extended_s3_configuration = null,
    kinesis_source_configuration = null,
    redshift_configuration = null,
    s3_configuration = null,
    splunk_configuration = null,
    tags = null,
    version_id = null
  }: {
    destination: string,
    name: string,
    kinesis_firehose_delivery_stream_id?: string|null,
    arn?: string|null,
    destination_id?: string|null,
    elasticsearch_configuration?: Anon288|null,
    extended_s3_configuration?: Anon300|null,
    kinesis_source_configuration?: Anon301|null,
    redshift_configuration?: Anon302|null,
    s3_configuration?: Anon299|null,
    splunk_configuration?: Anon303|null,
    tags?: {[s: string]: string}|null,
    version_id?: string|null
  }) {
    this.destination = destination;
    this.name = name;
    this.kinesis_firehose_delivery_stream_id = kinesis_firehose_delivery_stream_id;
    this.arn = arn;
    this.destination_id = destination_id;
    this.elasticsearch_configuration = elasticsearch_configuration;
    this.extended_s3_configuration = extended_s3_configuration;
    this.kinesis_source_configuration = kinesis_source_configuration;
    this.redshift_configuration = redshift_configuration;
    this.s3_configuration = s3_configuration;
    this.splunk_configuration = splunk_configuration;
    this.tags = tags;
    this.version_id = version_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['destination'] = this.destination;
    ih['name'] = this.name;
    if (this.kinesis_firehose_delivery_stream_id !== null) {
      ih['kinesis_firehose_delivery_stream_id'] = this.kinesis_firehose_delivery_stream_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.destination_id !== null) {
      ih['destination_id'] = this.destination_id;
    }
    if (this.elasticsearch_configuration !== null) {
      ih['elasticsearch_configuration'] = this.elasticsearch_configuration;
    }
    if (this.extended_s3_configuration !== null) {
      ih['extended_s3_configuration'] = this.extended_s3_configuration;
    }
    if (this.kinesis_source_configuration !== null) {
      ih['kinesis_source_configuration'] = this.kinesis_source_configuration;
    }
    if (this.redshift_configuration !== null) {
      ih['redshift_configuration'] = this.redshift_configuration;
    }
    if (this.s3_configuration !== null) {
      ih['s3_configuration'] = this.s3_configuration;
    }
    if (this.splunk_configuration !== null) {
      ih['splunk_configuration'] = this.splunk_configuration;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.version_id !== null) {
      ih['version_id'] = this.version_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Kinesis_firehose_delivery_stream';
  }
}

export class Kinesis_stream implements PcoreValue {
  readonly name: string;
  readonly shard_count: number;
  readonly kinesis_stream_id: string|null;
  readonly arn: string|null;
  readonly encryption_type: string;
  readonly kms_key_id: string|null;
  readonly retention_period: number;
  readonly shard_level_metrics: string[]|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    name,
    shard_count,
    kinesis_stream_id = null,
    arn = null,
    encryption_type = 'NONE',
    kms_key_id = null,
    retention_period = 24,
    shard_level_metrics = null,
    tags = null
  }: {
    name: string,
    shard_count: number,
    kinesis_stream_id?: string|null,
    arn?: string|null,
    encryption_type?: string,
    kms_key_id?: string|null,
    retention_period?: number,
    shard_level_metrics?: string[]|null,
    tags?: {[s: string]: string}|null
  }) {
    this.name = name;
    this.shard_count = shard_count;
    this.kinesis_stream_id = kinesis_stream_id;
    this.arn = arn;
    this.encryption_type = encryption_type;
    this.kms_key_id = kms_key_id;
    this.retention_period = retention_period;
    this.shard_level_metrics = shard_level_metrics;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['shard_count'] = this.shard_count;
    if (this.kinesis_stream_id !== null) {
      ih['kinesis_stream_id'] = this.kinesis_stream_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.encryption_type !== 'NONE') {
      ih['encryption_type'] = this.encryption_type;
    }
    if (this.kms_key_id !== null) {
      ih['kms_key_id'] = this.kms_key_id;
    }
    if (this.retention_period !== 24) {
      ih['retention_period'] = this.retention_period;
    }
    if (this.shard_level_metrics !== null) {
      ih['shard_level_metrics'] = this.shard_level_metrics;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Kinesis_stream';
  }
}

export class Kms_alias implements PcoreValue {
  readonly target_key_id: string;
  readonly kms_alias_id: string|null;
  readonly arn: string|null;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly target_key_arn: string|null;

  constructor({
    target_key_id,
    kms_alias_id = null,
    arn = null,
    name = null,
    name_prefix = null,
    target_key_arn = null
  }: {
    target_key_id: string,
    kms_alias_id?: string|null,
    arn?: string|null,
    name?: string|null,
    name_prefix?: string|null,
    target_key_arn?: string|null
  }) {
    this.target_key_id = target_key_id;
    this.kms_alias_id = kms_alias_id;
    this.arn = arn;
    this.name = name;
    this.name_prefix = name_prefix;
    this.target_key_arn = target_key_arn;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['target_key_id'] = this.target_key_id;
    if (this.kms_alias_id !== null) {
      ih['kms_alias_id'] = this.kms_alias_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.target_key_arn !== null) {
      ih['target_key_arn'] = this.target_key_arn;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Kms_alias';
  }
}

export class Kms_grant implements PcoreValue {
  readonly grantee_principal: string;
  readonly key_id: string;
  readonly operations: string[];
  readonly kms_grant_id: string|null;
  readonly constraints: Anon304[]|null;
  readonly grant_creation_tokens: string[]|null;
  readonly grant_id: string|null;
  readonly grant_token: string|null;
  readonly name: string|null;
  readonly retire_on_delete: boolean;
  readonly retiring_principal: string|null;

  constructor({
    grantee_principal,
    key_id,
    operations,
    kms_grant_id = null,
    constraints = null,
    grant_creation_tokens = null,
    grant_id = null,
    grant_token = null,
    name = null,
    retire_on_delete = false,
    retiring_principal = null
  }: {
    grantee_principal: string,
    key_id: string,
    operations: string[],
    kms_grant_id?: string|null,
    constraints?: Anon304[]|null,
    grant_creation_tokens?: string[]|null,
    grant_id?: string|null,
    grant_token?: string|null,
    name?: string|null,
    retire_on_delete?: boolean,
    retiring_principal?: string|null
  }) {
    this.grantee_principal = grantee_principal;
    this.key_id = key_id;
    this.operations = operations;
    this.kms_grant_id = kms_grant_id;
    this.constraints = constraints;
    this.grant_creation_tokens = grant_creation_tokens;
    this.grant_id = grant_id;
    this.grant_token = grant_token;
    this.name = name;
    this.retire_on_delete = retire_on_delete;
    this.retiring_principal = retiring_principal;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['grantee_principal'] = this.grantee_principal;
    ih['key_id'] = this.key_id;
    ih['operations'] = this.operations;
    if (this.kms_grant_id !== null) {
      ih['kms_grant_id'] = this.kms_grant_id;
    }
    if (this.constraints !== null) {
      ih['constraints'] = this.constraints;
    }
    if (this.grant_creation_tokens !== null) {
      ih['grant_creation_tokens'] = this.grant_creation_tokens;
    }
    if (this.grant_id !== null) {
      ih['grant_id'] = this.grant_id;
    }
    if (this.grant_token !== null) {
      ih['grant_token'] = this.grant_token;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.retire_on_delete !== false) {
      ih['retire_on_delete'] = this.retire_on_delete;
    }
    if (this.retiring_principal !== null) {
      ih['retiring_principal'] = this.retiring_principal;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Kms_grant';
  }
}

export class Kms_key implements PcoreValue {
  readonly kms_key_id: string|null;
  readonly arn: string|null;
  readonly deletion_window_in_days: number|null;
  readonly description: string|null;
  readonly enable_key_rotation: boolean;
  readonly is_enabled: boolean;
  readonly key_id: string|null;
  readonly key_usage: string|null;
  readonly policy: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    kms_key_id = null,
    arn = null,
    deletion_window_in_days = null,
    description = null,
    enable_key_rotation = false,
    is_enabled = true,
    key_id = null,
    key_usage = null,
    policy = null,
    tags = null
  }: {
    kms_key_id?: string|null,
    arn?: string|null,
    deletion_window_in_days?: number|null,
    description?: string|null,
    enable_key_rotation?: boolean,
    is_enabled?: boolean,
    key_id?: string|null,
    key_usage?: string|null,
    policy?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.kms_key_id = kms_key_id;
    this.arn = arn;
    this.deletion_window_in_days = deletion_window_in_days;
    this.description = description;
    this.enable_key_rotation = enable_key_rotation;
    this.is_enabled = is_enabled;
    this.key_id = key_id;
    this.key_usage = key_usage;
    this.policy = policy;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.kms_key_id !== null) {
      ih['kms_key_id'] = this.kms_key_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.deletion_window_in_days !== null) {
      ih['deletion_window_in_days'] = this.deletion_window_in_days;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.enable_key_rotation !== false) {
      ih['enable_key_rotation'] = this.enable_key_rotation;
    }
    if (this.is_enabled !== true) {
      ih['is_enabled'] = this.is_enabled;
    }
    if (this.key_id !== null) {
      ih['key_id'] = this.key_id;
    }
    if (this.key_usage !== null) {
      ih['key_usage'] = this.key_usage;
    }
    if (this.policy !== null) {
      ih['policy'] = this.policy;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Kms_key';
  }
}

export class Lambda_alias implements PcoreValue {
  readonly function_name: string;
  readonly function_version: string;
  readonly name: string;
  readonly lambda_alias_id: string|null;
  readonly arn: string|null;
  readonly description: string|null;
  readonly invoke_arn: string|null;
  readonly routing_config: Anon305|null;

  constructor({
    function_name,
    function_version,
    name,
    lambda_alias_id = null,
    arn = null,
    description = null,
    invoke_arn = null,
    routing_config = null
  }: {
    function_name: string,
    function_version: string,
    name: string,
    lambda_alias_id?: string|null,
    arn?: string|null,
    description?: string|null,
    invoke_arn?: string|null,
    routing_config?: Anon305|null
  }) {
    this.function_name = function_name;
    this.function_version = function_version;
    this.name = name;
    this.lambda_alias_id = lambda_alias_id;
    this.arn = arn;
    this.description = description;
    this.invoke_arn = invoke_arn;
    this.routing_config = routing_config;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['function_name'] = this.function_name;
    ih['function_version'] = this.function_version;
    ih['name'] = this.name;
    if (this.lambda_alias_id !== null) {
      ih['lambda_alias_id'] = this.lambda_alias_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.invoke_arn !== null) {
      ih['invoke_arn'] = this.invoke_arn;
    }
    if (this.routing_config !== null) {
      ih['routing_config'] = this.routing_config;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Lambda_alias';
  }
}

export class Lambda_event_source_mapping implements PcoreValue {
  readonly event_source_arn: string;
  readonly function_name: string;
  readonly lambda_event_source_mapping_id: string|null;
  readonly batch_size: number|null;
  readonly enabled: boolean;
  readonly function_arn: string|null;
  readonly last_modified: string|null;
  readonly last_processing_result: string|null;
  readonly starting_position: string|null;
  readonly starting_position_timestamp: |null;
  readonly state: string|null;
  readonly state_transition_reason: string|null;
  readonly uuid: string|null;

  constructor({
    event_source_arn,
    function_name,
    lambda_event_source_mapping_id = null,
    batch_size = null,
    enabled = true,
    function_arn = null,
    last_modified = null,
    last_processing_result = null,
    starting_position = null,
    starting_position_timestamp = null,
    state = null,
    state_transition_reason = null,
    uuid = null
  }: {
    event_source_arn: string,
    function_name: string,
    lambda_event_source_mapping_id?: string|null,
    batch_size?: number|null,
    enabled?: boolean,
    function_arn?: string|null,
    last_modified?: string|null,
    last_processing_result?: string|null,
    starting_position?: string|null,
    starting_position_timestamp?: |null,
    state?: string|null,
    state_transition_reason?: string|null,
    uuid?: string|null
  }) {
    this.event_source_arn = event_source_arn;
    this.function_name = function_name;
    this.lambda_event_source_mapping_id = lambda_event_source_mapping_id;
    this.batch_size = batch_size;
    this.enabled = enabled;
    this.function_arn = function_arn;
    this.last_modified = last_modified;
    this.last_processing_result = last_processing_result;
    this.starting_position = starting_position;
    this.starting_position_timestamp = starting_position_timestamp;
    this.state = state;
    this.state_transition_reason = state_transition_reason;
    this.uuid = uuid;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['event_source_arn'] = this.event_source_arn;
    ih['function_name'] = this.function_name;
    if (this.lambda_event_source_mapping_id !== null) {
      ih['lambda_event_source_mapping_id'] = this.lambda_event_source_mapping_id;
    }
    if (this.batch_size !== null) {
      ih['batch_size'] = this.batch_size;
    }
    if (this.enabled !== true) {
      ih['enabled'] = this.enabled;
    }
    if (this.function_arn !== null) {
      ih['function_arn'] = this.function_arn;
    }
    if (this.last_modified !== null) {
      ih['last_modified'] = this.last_modified;
    }
    if (this.last_processing_result !== null) {
      ih['last_processing_result'] = this.last_processing_result;
    }
    if (this.starting_position !== null) {
      ih['starting_position'] = this.starting_position;
    }
    if (this.starting_position_timestamp !== null) {
      ih['starting_position_timestamp'] = this.starting_position_timestamp;
    }
    if (this.state !== null) {
      ih['state'] = this.state;
    }
    if (this.state_transition_reason !== null) {
      ih['state_transition_reason'] = this.state_transition_reason;
    }
    if (this.uuid !== null) {
      ih['uuid'] = this.uuid;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Lambda_event_source_mapping';
  }
}

export class Lambda_function implements PcoreValue {
  readonly function_name: string;
  readonly handler: string;
  readonly role: string;
  readonly runtime: string;
  readonly lambda_function_id: string|null;
  readonly arn: string|null;
  readonly dead_letter_config: Anon306|null;
  readonly description: string|null;
  readonly environment: Anon307|null;
  readonly filename: string|null;
  readonly invoke_arn: string|null;
  readonly kms_key_arn: string|null;
  readonly last_modified: string|null;
  readonly layers: string[]|null;
  readonly memory_size: number;
  readonly publish: boolean;
  readonly qualified_arn: string|null;
  readonly reserved_concurrent_executions: number|null;
  readonly s3_bucket: string|null;
  readonly s3_key: string|null;
  readonly s3_object_version: string|null;
  readonly source_code_hash: string|null;
  readonly source_code_size: number|null;
  readonly tags: {[s: string]: string}|null;
  readonly timeout: number;
  readonly tracing_config: Anon308|null;
  readonly version: string|null;
  readonly vpc_config: Anon309|null;

  constructor({
    function_name,
    handler,
    role,
    runtime,
    lambda_function_id = null,
    arn = null,
    dead_letter_config = null,
    description = null,
    environment = null,
    filename = null,
    invoke_arn = null,
    kms_key_arn = null,
    last_modified = null,
    layers = null,
    memory_size = 128,
    publish = false,
    qualified_arn = null,
    reserved_concurrent_executions = null,
    s3_bucket = null,
    s3_key = null,
    s3_object_version = null,
    source_code_hash = null,
    source_code_size = null,
    tags = null,
    timeout = 3,
    tracing_config = null,
    version = null,
    vpc_config = null
  }: {
    function_name: string,
    handler: string,
    role: string,
    runtime: string,
    lambda_function_id?: string|null,
    arn?: string|null,
    dead_letter_config?: Anon306|null,
    description?: string|null,
    environment?: Anon307|null,
    filename?: string|null,
    invoke_arn?: string|null,
    kms_key_arn?: string|null,
    last_modified?: string|null,
    layers?: string[]|null,
    memory_size?: number,
    publish?: boolean,
    qualified_arn?: string|null,
    reserved_concurrent_executions?: number|null,
    s3_bucket?: string|null,
    s3_key?: string|null,
    s3_object_version?: string|null,
    source_code_hash?: string|null,
    source_code_size?: number|null,
    tags?: {[s: string]: string}|null,
    timeout?: number,
    tracing_config?: Anon308|null,
    version?: string|null,
    vpc_config?: Anon309|null
  }) {
    this.function_name = function_name;
    this.handler = handler;
    this.role = role;
    this.runtime = runtime;
    this.lambda_function_id = lambda_function_id;
    this.arn = arn;
    this.dead_letter_config = dead_letter_config;
    this.description = description;
    this.environment = environment;
    this.filename = filename;
    this.invoke_arn = invoke_arn;
    this.kms_key_arn = kms_key_arn;
    this.last_modified = last_modified;
    this.layers = layers;
    this.memory_size = memory_size;
    this.publish = publish;
    this.qualified_arn = qualified_arn;
    this.reserved_concurrent_executions = reserved_concurrent_executions;
    this.s3_bucket = s3_bucket;
    this.s3_key = s3_key;
    this.s3_object_version = s3_object_version;
    this.source_code_hash = source_code_hash;
    this.source_code_size = source_code_size;
    this.tags = tags;
    this.timeout = timeout;
    this.tracing_config = tracing_config;
    this.version = version;
    this.vpc_config = vpc_config;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['function_name'] = this.function_name;
    ih['handler'] = this.handler;
    ih['role'] = this.role;
    ih['runtime'] = this.runtime;
    if (this.lambda_function_id !== null) {
      ih['lambda_function_id'] = this.lambda_function_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.dead_letter_config !== null) {
      ih['dead_letter_config'] = this.dead_letter_config;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.environment !== null) {
      ih['environment'] = this.environment;
    }
    if (this.filename !== null) {
      ih['filename'] = this.filename;
    }
    if (this.invoke_arn !== null) {
      ih['invoke_arn'] = this.invoke_arn;
    }
    if (this.kms_key_arn !== null) {
      ih['kms_key_arn'] = this.kms_key_arn;
    }
    if (this.last_modified !== null) {
      ih['last_modified'] = this.last_modified;
    }
    if (this.layers !== null) {
      ih['layers'] = this.layers;
    }
    if (this.memory_size !== 128) {
      ih['memory_size'] = this.memory_size;
    }
    if (this.publish !== false) {
      ih['publish'] = this.publish;
    }
    if (this.qualified_arn !== null) {
      ih['qualified_arn'] = this.qualified_arn;
    }
    if (this.reserved_concurrent_executions !== null) {
      ih['reserved_concurrent_executions'] = this.reserved_concurrent_executions;
    }
    if (this.s3_bucket !== null) {
      ih['s3_bucket'] = this.s3_bucket;
    }
    if (this.s3_key !== null) {
      ih['s3_key'] = this.s3_key;
    }
    if (this.s3_object_version !== null) {
      ih['s3_object_version'] = this.s3_object_version;
    }
    if (this.source_code_hash !== null) {
      ih['source_code_hash'] = this.source_code_hash;
    }
    if (this.source_code_size !== null) {
      ih['source_code_size'] = this.source_code_size;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.timeout !== 3) {
      ih['timeout'] = this.timeout;
    }
    if (this.tracing_config !== null) {
      ih['tracing_config'] = this.tracing_config;
    }
    if (this.version !== null) {
      ih['version'] = this.version;
    }
    if (this.vpc_config !== null) {
      ih['vpc_config'] = this.vpc_config;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Lambda_function';
  }
}

export class Lambda_layer_version implements PcoreValue {
  readonly layer_name: string;
  readonly lambda_layer_version_id: string|null;
  readonly arn: string|null;
  readonly compatible_runtimes: string[]|null;
  readonly created_date: string|null;
  readonly description: string|null;
  readonly filename: string|null;
  readonly layer_arn: string|null;
  readonly license_info: string|null;
  readonly s3_bucket: string|null;
  readonly s3_key: string|null;
  readonly s3_object_version: string|null;
  readonly source_code_hash: string|null;
  readonly source_code_size: number|null;
  readonly version: string|null;

  constructor({
    layer_name,
    lambda_layer_version_id = null,
    arn = null,
    compatible_runtimes = null,
    created_date = null,
    description = null,
    filename = null,
    layer_arn = null,
    license_info = null,
    s3_bucket = null,
    s3_key = null,
    s3_object_version = null,
    source_code_hash = null,
    source_code_size = null,
    version = null
  }: {
    layer_name: string,
    lambda_layer_version_id?: string|null,
    arn?: string|null,
    compatible_runtimes?: string[]|null,
    created_date?: string|null,
    description?: string|null,
    filename?: string|null,
    layer_arn?: string|null,
    license_info?: string|null,
    s3_bucket?: string|null,
    s3_key?: string|null,
    s3_object_version?: string|null,
    source_code_hash?: string|null,
    source_code_size?: number|null,
    version?: string|null
  }) {
    this.layer_name = layer_name;
    this.lambda_layer_version_id = lambda_layer_version_id;
    this.arn = arn;
    this.compatible_runtimes = compatible_runtimes;
    this.created_date = created_date;
    this.description = description;
    this.filename = filename;
    this.layer_arn = layer_arn;
    this.license_info = license_info;
    this.s3_bucket = s3_bucket;
    this.s3_key = s3_key;
    this.s3_object_version = s3_object_version;
    this.source_code_hash = source_code_hash;
    this.source_code_size = source_code_size;
    this.version = version;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['layer_name'] = this.layer_name;
    if (this.lambda_layer_version_id !== null) {
      ih['lambda_layer_version_id'] = this.lambda_layer_version_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.compatible_runtimes !== null) {
      ih['compatible_runtimes'] = this.compatible_runtimes;
    }
    if (this.created_date !== null) {
      ih['created_date'] = this.created_date;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.filename !== null) {
      ih['filename'] = this.filename;
    }
    if (this.layer_arn !== null) {
      ih['layer_arn'] = this.layer_arn;
    }
    if (this.license_info !== null) {
      ih['license_info'] = this.license_info;
    }
    if (this.s3_bucket !== null) {
      ih['s3_bucket'] = this.s3_bucket;
    }
    if (this.s3_key !== null) {
      ih['s3_key'] = this.s3_key;
    }
    if (this.s3_object_version !== null) {
      ih['s3_object_version'] = this.s3_object_version;
    }
    if (this.source_code_hash !== null) {
      ih['source_code_hash'] = this.source_code_hash;
    }
    if (this.source_code_size !== null) {
      ih['source_code_size'] = this.source_code_size;
    }
    if (this.version !== null) {
      ih['version'] = this.version;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Lambda_layer_version';
  }
}

export class Lambda_permission implements PcoreValue {
  readonly action: string;
  readonly function_name: string;
  readonly principal: string;
  readonly lambda_permission_id: string|null;
  readonly event_source_token: string|null;
  readonly qualifier: string|null;
  readonly source_account: string|null;
  readonly source_arn: string|null;
  readonly statement_id: string|null;
  readonly statement_id_prefix: string|null;

  constructor({
    action,
    function_name,
    principal,
    lambda_permission_id = null,
    event_source_token = null,
    qualifier = null,
    source_account = null,
    source_arn = null,
    statement_id = null,
    statement_id_prefix = null
  }: {
    action: string,
    function_name: string,
    principal: string,
    lambda_permission_id?: string|null,
    event_source_token?: string|null,
    qualifier?: string|null,
    source_account?: string|null,
    source_arn?: string|null,
    statement_id?: string|null,
    statement_id_prefix?: string|null
  }) {
    this.action = action;
    this.function_name = function_name;
    this.principal = principal;
    this.lambda_permission_id = lambda_permission_id;
    this.event_source_token = event_source_token;
    this.qualifier = qualifier;
    this.source_account = source_account;
    this.source_arn = source_arn;
    this.statement_id = statement_id;
    this.statement_id_prefix = statement_id_prefix;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['action'] = this.action;
    ih['function_name'] = this.function_name;
    ih['principal'] = this.principal;
    if (this.lambda_permission_id !== null) {
      ih['lambda_permission_id'] = this.lambda_permission_id;
    }
    if (this.event_source_token !== null) {
      ih['event_source_token'] = this.event_source_token;
    }
    if (this.qualifier !== null) {
      ih['qualifier'] = this.qualifier;
    }
    if (this.source_account !== null) {
      ih['source_account'] = this.source_account;
    }
    if (this.source_arn !== null) {
      ih['source_arn'] = this.source_arn;
    }
    if (this.statement_id !== null) {
      ih['statement_id'] = this.statement_id;
    }
    if (this.statement_id_prefix !== null) {
      ih['statement_id_prefix'] = this.statement_id_prefix;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Lambda_permission';
  }
}

export class Launch_configuration implements PcoreValue {
  readonly image_id: string;
  readonly instance_type: string;
  readonly launch_configuration_id: string|null;
  readonly associate_public_ip_address: boolean;
  readonly ebs_block_device: Anon310[]|null;
  readonly ebs_optimized: boolean|null;
  readonly enable_monitoring: boolean;
  readonly ephemeral_block_device: Anon16[]|null;
  readonly iam_instance_profile: string|null;
  readonly key_name: string|null;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly placement_tenancy: string|null;
  readonly root_block_device: Anon311|null;
  readonly security_groups: string[]|null;
  readonly spot_price: string|null;
  readonly user_data: string|null;
  readonly user_data_base64: string|null;
  readonly vpc_classic_link_id: string|null;
  readonly vpc_classic_link_security_groups: string[]|null;

  constructor({
    image_id,
    instance_type,
    launch_configuration_id = null,
    associate_public_ip_address = false,
    ebs_block_device = null,
    ebs_optimized = null,
    enable_monitoring = true,
    ephemeral_block_device = null,
    iam_instance_profile = null,
    key_name = null,
    name = null,
    name_prefix = null,
    placement_tenancy = null,
    root_block_device = null,
    security_groups = null,
    spot_price = null,
    user_data = null,
    user_data_base64 = null,
    vpc_classic_link_id = null,
    vpc_classic_link_security_groups = null
  }: {
    image_id: string,
    instance_type: string,
    launch_configuration_id?: string|null,
    associate_public_ip_address?: boolean,
    ebs_block_device?: Anon310[]|null,
    ebs_optimized?: boolean|null,
    enable_monitoring?: boolean,
    ephemeral_block_device?: Anon16[]|null,
    iam_instance_profile?: string|null,
    key_name?: string|null,
    name?: string|null,
    name_prefix?: string|null,
    placement_tenancy?: string|null,
    root_block_device?: Anon311|null,
    security_groups?: string[]|null,
    spot_price?: string|null,
    user_data?: string|null,
    user_data_base64?: string|null,
    vpc_classic_link_id?: string|null,
    vpc_classic_link_security_groups?: string[]|null
  }) {
    this.image_id = image_id;
    this.instance_type = instance_type;
    this.launch_configuration_id = launch_configuration_id;
    this.associate_public_ip_address = associate_public_ip_address;
    this.ebs_block_device = ebs_block_device;
    this.ebs_optimized = ebs_optimized;
    this.enable_monitoring = enable_monitoring;
    this.ephemeral_block_device = ephemeral_block_device;
    this.iam_instance_profile = iam_instance_profile;
    this.key_name = key_name;
    this.name = name;
    this.name_prefix = name_prefix;
    this.placement_tenancy = placement_tenancy;
    this.root_block_device = root_block_device;
    this.security_groups = security_groups;
    this.spot_price = spot_price;
    this.user_data = user_data;
    this.user_data_base64 = user_data_base64;
    this.vpc_classic_link_id = vpc_classic_link_id;
    this.vpc_classic_link_security_groups = vpc_classic_link_security_groups;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['image_id'] = this.image_id;
    ih['instance_type'] = this.instance_type;
    if (this.launch_configuration_id !== null) {
      ih['launch_configuration_id'] = this.launch_configuration_id;
    }
    if (this.associate_public_ip_address !== false) {
      ih['associate_public_ip_address'] = this.associate_public_ip_address;
    }
    if (this.ebs_block_device !== null) {
      ih['ebs_block_device'] = this.ebs_block_device;
    }
    if (this.ebs_optimized !== null) {
      ih['ebs_optimized'] = this.ebs_optimized;
    }
    if (this.enable_monitoring !== true) {
      ih['enable_monitoring'] = this.enable_monitoring;
    }
    if (this.ephemeral_block_device !== null) {
      ih['ephemeral_block_device'] = this.ephemeral_block_device;
    }
    if (this.iam_instance_profile !== null) {
      ih['iam_instance_profile'] = this.iam_instance_profile;
    }
    if (this.key_name !== null) {
      ih['key_name'] = this.key_name;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.placement_tenancy !== null) {
      ih['placement_tenancy'] = this.placement_tenancy;
    }
    if (this.root_block_device !== null) {
      ih['root_block_device'] = this.root_block_device;
    }
    if (this.security_groups !== null) {
      ih['security_groups'] = this.security_groups;
    }
    if (this.spot_price !== null) {
      ih['spot_price'] = this.spot_price;
    }
    if (this.user_data !== null) {
      ih['user_data'] = this.user_data;
    }
    if (this.user_data_base64 !== null) {
      ih['user_data_base64'] = this.user_data_base64;
    }
    if (this.vpc_classic_link_id !== null) {
      ih['vpc_classic_link_id'] = this.vpc_classic_link_id;
    }
    if (this.vpc_classic_link_security_groups !== null) {
      ih['vpc_classic_link_security_groups'] = this.vpc_classic_link_security_groups;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Launch_configuration';
  }
}

export class Launch_template implements PcoreValue {
  readonly launch_template_id: string|null;
  readonly arn: string|null;
  readonly block_device_mappings: Anon313[]|null;
  readonly capacity_reservation_specification: Anon315|null;
  readonly credit_specification: Anon253|null;
  readonly default_version: number|null;
  readonly description: string|null;
  readonly disable_api_termination: boolean|null;
  readonly ebs_optimized: string|null;
  readonly elastic_gpu_specifications: Anon316[]|null;
  readonly iam_instance_profile: Anon317|null;
  readonly image_id: string|null;
  readonly instance_initiated_shutdown_behavior: string|null;
  readonly instance_market_options: Anon319|null;
  readonly instance_type: string|null;
  readonly kernel_id: string|null;
  readonly key_name: string|null;
  readonly latest_version: number|null;
  readonly license_specification: Anon320[]|null;
  readonly monitoring: Anon321|null;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly network_interfaces: Anon322[]|null;
  readonly placement: Anon323|null;
  readonly ram_disk_id: string|null;
  readonly security_group_names: string[]|null;
  readonly tag_specifications: Anon324[]|null;
  readonly tags: {[s: string]: string}|null;
  readonly user_data: string|null;
  readonly vpc_security_group_ids: string[]|null;

  constructor({
    launch_template_id = null,
    arn = null,
    block_device_mappings = null,
    capacity_reservation_specification = null,
    credit_specification = null,
    default_version = null,
    description = null,
    disable_api_termination = null,
    ebs_optimized = null,
    elastic_gpu_specifications = null,
    iam_instance_profile = null,
    image_id = null,
    instance_initiated_shutdown_behavior = null,
    instance_market_options = null,
    instance_type = null,
    kernel_id = null,
    key_name = null,
    latest_version = null,
    license_specification = null,
    monitoring = null,
    name = null,
    name_prefix = null,
    network_interfaces = null,
    placement = null,
    ram_disk_id = null,
    security_group_names = null,
    tag_specifications = null,
    tags = null,
    user_data = null,
    vpc_security_group_ids = null
  }: {
    launch_template_id?: string|null,
    arn?: string|null,
    block_device_mappings?: Anon313[]|null,
    capacity_reservation_specification?: Anon315|null,
    credit_specification?: Anon253|null,
    default_version?: number|null,
    description?: string|null,
    disable_api_termination?: boolean|null,
    ebs_optimized?: string|null,
    elastic_gpu_specifications?: Anon316[]|null,
    iam_instance_profile?: Anon317|null,
    image_id?: string|null,
    instance_initiated_shutdown_behavior?: string|null,
    instance_market_options?: Anon319|null,
    instance_type?: string|null,
    kernel_id?: string|null,
    key_name?: string|null,
    latest_version?: number|null,
    license_specification?: Anon320[]|null,
    monitoring?: Anon321|null,
    name?: string|null,
    name_prefix?: string|null,
    network_interfaces?: Anon322[]|null,
    placement?: Anon323|null,
    ram_disk_id?: string|null,
    security_group_names?: string[]|null,
    tag_specifications?: Anon324[]|null,
    tags?: {[s: string]: string}|null,
    user_data?: string|null,
    vpc_security_group_ids?: string[]|null
  }) {
    this.launch_template_id = launch_template_id;
    this.arn = arn;
    this.block_device_mappings = block_device_mappings;
    this.capacity_reservation_specification = capacity_reservation_specification;
    this.credit_specification = credit_specification;
    this.default_version = default_version;
    this.description = description;
    this.disable_api_termination = disable_api_termination;
    this.ebs_optimized = ebs_optimized;
    this.elastic_gpu_specifications = elastic_gpu_specifications;
    this.iam_instance_profile = iam_instance_profile;
    this.image_id = image_id;
    this.instance_initiated_shutdown_behavior = instance_initiated_shutdown_behavior;
    this.instance_market_options = instance_market_options;
    this.instance_type = instance_type;
    this.kernel_id = kernel_id;
    this.key_name = key_name;
    this.latest_version = latest_version;
    this.license_specification = license_specification;
    this.monitoring = monitoring;
    this.name = name;
    this.name_prefix = name_prefix;
    this.network_interfaces = network_interfaces;
    this.placement = placement;
    this.ram_disk_id = ram_disk_id;
    this.security_group_names = security_group_names;
    this.tag_specifications = tag_specifications;
    this.tags = tags;
    this.user_data = user_data;
    this.vpc_security_group_ids = vpc_security_group_ids;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.launch_template_id !== null) {
      ih['launch_template_id'] = this.launch_template_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.block_device_mappings !== null) {
      ih['block_device_mappings'] = this.block_device_mappings;
    }
    if (this.capacity_reservation_specification !== null) {
      ih['capacity_reservation_specification'] = this.capacity_reservation_specification;
    }
    if (this.credit_specification !== null) {
      ih['credit_specification'] = this.credit_specification;
    }
    if (this.default_version !== null) {
      ih['default_version'] = this.default_version;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.disable_api_termination !== null) {
      ih['disable_api_termination'] = this.disable_api_termination;
    }
    if (this.ebs_optimized !== null) {
      ih['ebs_optimized'] = this.ebs_optimized;
    }
    if (this.elastic_gpu_specifications !== null) {
      ih['elastic_gpu_specifications'] = this.elastic_gpu_specifications;
    }
    if (this.iam_instance_profile !== null) {
      ih['iam_instance_profile'] = this.iam_instance_profile;
    }
    if (this.image_id !== null) {
      ih['image_id'] = this.image_id;
    }
    if (this.instance_initiated_shutdown_behavior !== null) {
      ih['instance_initiated_shutdown_behavior'] = this.instance_initiated_shutdown_behavior;
    }
    if (this.instance_market_options !== null) {
      ih['instance_market_options'] = this.instance_market_options;
    }
    if (this.instance_type !== null) {
      ih['instance_type'] = this.instance_type;
    }
    if (this.kernel_id !== null) {
      ih['kernel_id'] = this.kernel_id;
    }
    if (this.key_name !== null) {
      ih['key_name'] = this.key_name;
    }
    if (this.latest_version !== null) {
      ih['latest_version'] = this.latest_version;
    }
    if (this.license_specification !== null) {
      ih['license_specification'] = this.license_specification;
    }
    if (this.monitoring !== null) {
      ih['monitoring'] = this.monitoring;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.network_interfaces !== null) {
      ih['network_interfaces'] = this.network_interfaces;
    }
    if (this.placement !== null) {
      ih['placement'] = this.placement;
    }
    if (this.ram_disk_id !== null) {
      ih['ram_disk_id'] = this.ram_disk_id;
    }
    if (this.security_group_names !== null) {
      ih['security_group_names'] = this.security_group_names;
    }
    if (this.tag_specifications !== null) {
      ih['tag_specifications'] = this.tag_specifications;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.user_data !== null) {
      ih['user_data'] = this.user_data;
    }
    if (this.vpc_security_group_ids !== null) {
      ih['vpc_security_group_ids'] = this.vpc_security_group_ids;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Launch_template';
  }
}

export class Lb implements PcoreValue {
  readonly lb_id: string|null;
  readonly access_logs: Anon5|null;
  readonly arn: string|null;
  readonly arn_suffix: string|null;
  readonly dns_name: string|null;
  readonly enable_cross_zone_load_balancing: boolean;
  readonly enable_deletion_protection: boolean;
  readonly enable_http2: boolean;
  readonly idle_timeout: number;
  readonly internal: boolean|null;
  readonly ip_address_type: string|null;
  readonly load_balancer_type: string;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly security_groups: string[]|null;
  readonly subnet_mapping: Anon6[]|null;
  readonly subnets: string[]|null;
  readonly tags: {[s: string]: string}|null;
  readonly vpc_id: string|null;
  readonly zone_id: string|null;

  constructor({
    lb_id = null,
    access_logs = null,
    arn = null,
    arn_suffix = null,
    dns_name = null,
    enable_cross_zone_load_balancing = false,
    enable_deletion_protection = false,
    enable_http2 = true,
    idle_timeout = 60,
    internal = null,
    ip_address_type = null,
    load_balancer_type = 'application',
    name = null,
    name_prefix = null,
    security_groups = null,
    subnet_mapping = null,
    subnets = null,
    tags = null,
    vpc_id = null,
    zone_id = null
  }: {
    lb_id?: string|null,
    access_logs?: Anon5|null,
    arn?: string|null,
    arn_suffix?: string|null,
    dns_name?: string|null,
    enable_cross_zone_load_balancing?: boolean,
    enable_deletion_protection?: boolean,
    enable_http2?: boolean,
    idle_timeout?: number,
    internal?: boolean|null,
    ip_address_type?: string|null,
    load_balancer_type?: string,
    name?: string|null,
    name_prefix?: string|null,
    security_groups?: string[]|null,
    subnet_mapping?: Anon6[]|null,
    subnets?: string[]|null,
    tags?: {[s: string]: string}|null,
    vpc_id?: string|null,
    zone_id?: string|null
  }) {
    this.lb_id = lb_id;
    this.access_logs = access_logs;
    this.arn = arn;
    this.arn_suffix = arn_suffix;
    this.dns_name = dns_name;
    this.enable_cross_zone_load_balancing = enable_cross_zone_load_balancing;
    this.enable_deletion_protection = enable_deletion_protection;
    this.enable_http2 = enable_http2;
    this.idle_timeout = idle_timeout;
    this.internal = internal;
    this.ip_address_type = ip_address_type;
    this.load_balancer_type = load_balancer_type;
    this.name = name;
    this.name_prefix = name_prefix;
    this.security_groups = security_groups;
    this.subnet_mapping = subnet_mapping;
    this.subnets = subnets;
    this.tags = tags;
    this.vpc_id = vpc_id;
    this.zone_id = zone_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.lb_id !== null) {
      ih['lb_id'] = this.lb_id;
    }
    if (this.access_logs !== null) {
      ih['access_logs'] = this.access_logs;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.arn_suffix !== null) {
      ih['arn_suffix'] = this.arn_suffix;
    }
    if (this.dns_name !== null) {
      ih['dns_name'] = this.dns_name;
    }
    if (this.enable_cross_zone_load_balancing !== false) {
      ih['enable_cross_zone_load_balancing'] = this.enable_cross_zone_load_balancing;
    }
    if (this.enable_deletion_protection !== false) {
      ih['enable_deletion_protection'] = this.enable_deletion_protection;
    }
    if (this.enable_http2 !== true) {
      ih['enable_http2'] = this.enable_http2;
    }
    if (this.idle_timeout !== 60) {
      ih['idle_timeout'] = this.idle_timeout;
    }
    if (this.internal !== null) {
      ih['internal'] = this.internal;
    }
    if (this.ip_address_type !== null) {
      ih['ip_address_type'] = this.ip_address_type;
    }
    if (this.load_balancer_type !== 'application') {
      ih['load_balancer_type'] = this.load_balancer_type;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.security_groups !== null) {
      ih['security_groups'] = this.security_groups;
    }
    if (this.subnet_mapping !== null) {
      ih['subnet_mapping'] = this.subnet_mapping;
    }
    if (this.subnets !== null) {
      ih['subnets'] = this.subnets;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpc_id !== null) {
      ih['vpc_id'] = this.vpc_id;
    }
    if (this.zone_id !== null) {
      ih['zone_id'] = this.zone_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Lb';
  }
}

export class Lb_cookie_stickiness_policy implements PcoreValue {
  readonly lb_port: number;
  readonly load_balancer: string;
  readonly name: string;
  readonly lb_cookie_stickiness_policy_id: string|null;
  readonly cookie_expiration_period: number|null;

  constructor({
    lb_port,
    load_balancer,
    name,
    lb_cookie_stickiness_policy_id = null,
    cookie_expiration_period = null
  }: {
    lb_port: number,
    load_balancer: string,
    name: string,
    lb_cookie_stickiness_policy_id?: string|null,
    cookie_expiration_period?: number|null
  }) {
    this.lb_port = lb_port;
    this.load_balancer = load_balancer;
    this.name = name;
    this.lb_cookie_stickiness_policy_id = lb_cookie_stickiness_policy_id;
    this.cookie_expiration_period = cookie_expiration_period;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['lb_port'] = this.lb_port;
    ih['load_balancer'] = this.load_balancer;
    ih['name'] = this.name;
    if (this.lb_cookie_stickiness_policy_id !== null) {
      ih['lb_cookie_stickiness_policy_id'] = this.lb_cookie_stickiness_policy_id;
    }
    if (this.cookie_expiration_period !== null) {
      ih['cookie_expiration_period'] = this.cookie_expiration_period;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Lb_cookie_stickiness_policy';
  }
}

export class Lb_listener implements PcoreValue {
  readonly default_action: Anon11[];
  readonly load_balancer_arn: string;
  readonly port: number;
  readonly lb_listener_id: string|null;
  readonly arn: string|null;
  readonly certificate_arn: string|null;
  readonly protocol: string;
  readonly ssl_policy: string|null;

  constructor({
    default_action,
    load_balancer_arn,
    port,
    lb_listener_id = null,
    arn = null,
    certificate_arn = null,
    protocol = 'HTTP',
    ssl_policy = null
  }: {
    default_action: Anon11[],
    load_balancer_arn: string,
    port: number,
    lb_listener_id?: string|null,
    arn?: string|null,
    certificate_arn?: string|null,
    protocol?: string,
    ssl_policy?: string|null
  }) {
    this.default_action = default_action;
    this.load_balancer_arn = load_balancer_arn;
    this.port = port;
    this.lb_listener_id = lb_listener_id;
    this.arn = arn;
    this.certificate_arn = certificate_arn;
    this.protocol = protocol;
    this.ssl_policy = ssl_policy;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['default_action'] = this.default_action;
    ih['load_balancer_arn'] = this.load_balancer_arn;
    ih['port'] = this.port;
    if (this.lb_listener_id !== null) {
      ih['lb_listener_id'] = this.lb_listener_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.certificate_arn !== null) {
      ih['certificate_arn'] = this.certificate_arn;
    }
    if (this.protocol !== 'HTTP') {
      ih['protocol'] = this.protocol;
    }
    if (this.ssl_policy !== null) {
      ih['ssl_policy'] = this.ssl_policy;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Lb_listener';
  }
}

export class Lb_listener_certificate implements PcoreValue {
  readonly certificate_arn: string;
  readonly listener_arn: string;
  readonly lb_listener_certificate_id: string|null;

  constructor({
    certificate_arn,
    listener_arn,
    lb_listener_certificate_id = null
  }: {
    certificate_arn: string,
    listener_arn: string,
    lb_listener_certificate_id?: string|null
  }) {
    this.certificate_arn = certificate_arn;
    this.listener_arn = listener_arn;
    this.lb_listener_certificate_id = lb_listener_certificate_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['certificate_arn'] = this.certificate_arn;
    ih['listener_arn'] = this.listener_arn;
    if (this.lb_listener_certificate_id !== null) {
      ih['lb_listener_certificate_id'] = this.lb_listener_certificate_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Lb_listener_certificate';
  }
}

export class Lb_listener_rule implements PcoreValue {
  readonly action: Anon11[];
  readonly condition: Anon12[];
  readonly listener_arn: string;
  readonly lb_listener_rule_id: string|null;
  readonly arn: string|null;
  readonly priority: number|null;

  constructor({
    action,
    condition,
    listener_arn,
    lb_listener_rule_id = null,
    arn = null,
    priority = null
  }: {
    action: Anon11[],
    condition: Anon12[],
    listener_arn: string,
    lb_listener_rule_id?: string|null,
    arn?: string|null,
    priority?: number|null
  }) {
    this.action = action;
    this.condition = condition;
    this.listener_arn = listener_arn;
    this.lb_listener_rule_id = lb_listener_rule_id;
    this.arn = arn;
    this.priority = priority;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['action'] = this.action;
    ih['condition'] = this.condition;
    ih['listener_arn'] = this.listener_arn;
    if (this.lb_listener_rule_id !== null) {
      ih['lb_listener_rule_id'] = this.lb_listener_rule_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.priority !== null) {
      ih['priority'] = this.priority;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Lb_listener_rule';
  }
}

export class Lb_ssl_negotiation_policy implements PcoreValue {
  readonly lb_port: number;
  readonly load_balancer: string;
  readonly name: string;
  readonly lb_ssl_negotiation_policy_id: string|null;
  readonly attribute: Anon29[]|null;

  constructor({
    lb_port,
    load_balancer,
    name,
    lb_ssl_negotiation_policy_id = null,
    attribute = null
  }: {
    lb_port: number,
    load_balancer: string,
    name: string,
    lb_ssl_negotiation_policy_id?: string|null,
    attribute?: Anon29[]|null
  }) {
    this.lb_port = lb_port;
    this.load_balancer = load_balancer;
    this.name = name;
    this.lb_ssl_negotiation_policy_id = lb_ssl_negotiation_policy_id;
    this.attribute = attribute;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['lb_port'] = this.lb_port;
    ih['load_balancer'] = this.load_balancer;
    ih['name'] = this.name;
    if (this.lb_ssl_negotiation_policy_id !== null) {
      ih['lb_ssl_negotiation_policy_id'] = this.lb_ssl_negotiation_policy_id;
    }
    if (this.attribute !== null) {
      ih['attribute'] = this.attribute;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Lb_ssl_negotiation_policy';
  }
}

export class Lb_target_group implements PcoreValue {
  readonly lb_target_group_id: string|null;
  readonly arn: string|null;
  readonly arn_suffix: string|null;
  readonly deregistration_delay: number;
  readonly health_check: Anon13|null;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly port: number|null;
  readonly protocol: string|null;
  readonly proxy_protocol_v2: boolean;
  readonly slow_start: number;
  readonly stickiness: Anon14|null;
  readonly tags: {[s: string]: string}|null;
  readonly target_type: string;
  readonly vpc_id: string|null;

  constructor({
    lb_target_group_id = null,
    arn = null,
    arn_suffix = null,
    deregistration_delay = 300,
    health_check = null,
    name = null,
    name_prefix = null,
    port = null,
    protocol = null,
    proxy_protocol_v2 = false,
    slow_start = 0,
    stickiness = null,
    tags = null,
    target_type = 'instance',
    vpc_id = null
  }: {
    lb_target_group_id?: string|null,
    arn?: string|null,
    arn_suffix?: string|null,
    deregistration_delay?: number,
    health_check?: Anon13|null,
    name?: string|null,
    name_prefix?: string|null,
    port?: number|null,
    protocol?: string|null,
    proxy_protocol_v2?: boolean,
    slow_start?: number,
    stickiness?: Anon14|null,
    tags?: {[s: string]: string}|null,
    target_type?: string,
    vpc_id?: string|null
  }) {
    this.lb_target_group_id = lb_target_group_id;
    this.arn = arn;
    this.arn_suffix = arn_suffix;
    this.deregistration_delay = deregistration_delay;
    this.health_check = health_check;
    this.name = name;
    this.name_prefix = name_prefix;
    this.port = port;
    this.protocol = protocol;
    this.proxy_protocol_v2 = proxy_protocol_v2;
    this.slow_start = slow_start;
    this.stickiness = stickiness;
    this.tags = tags;
    this.target_type = target_type;
    this.vpc_id = vpc_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.lb_target_group_id !== null) {
      ih['lb_target_group_id'] = this.lb_target_group_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.arn_suffix !== null) {
      ih['arn_suffix'] = this.arn_suffix;
    }
    if (this.deregistration_delay !== 300) {
      ih['deregistration_delay'] = this.deregistration_delay;
    }
    if (this.health_check !== null) {
      ih['health_check'] = this.health_check;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.port !== null) {
      ih['port'] = this.port;
    }
    if (this.protocol !== null) {
      ih['protocol'] = this.protocol;
    }
    if (this.proxy_protocol_v2 !== false) {
      ih['proxy_protocol_v2'] = this.proxy_protocol_v2;
    }
    if (this.slow_start !== 0) {
      ih['slow_start'] = this.slow_start;
    }
    if (this.stickiness !== null) {
      ih['stickiness'] = this.stickiness;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.target_type !== 'instance') {
      ih['target_type'] = this.target_type;
    }
    if (this.vpc_id !== null) {
      ih['vpc_id'] = this.vpc_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Lb_target_group';
  }
}

export class Lb_target_group_attachment implements PcoreValue {
  readonly target_group_arn: string;
  readonly target_id: string;
  readonly lb_target_group_attachment_id: string|null;
  readonly availability_zone: string|null;
  readonly port: number|null;

  constructor({
    target_group_arn,
    target_id,
    lb_target_group_attachment_id = null,
    availability_zone = null,
    port = null
  }: {
    target_group_arn: string,
    target_id: string,
    lb_target_group_attachment_id?: string|null,
    availability_zone?: string|null,
    port?: number|null
  }) {
    this.target_group_arn = target_group_arn;
    this.target_id = target_id;
    this.lb_target_group_attachment_id = lb_target_group_attachment_id;
    this.availability_zone = availability_zone;
    this.port = port;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['target_group_arn'] = this.target_group_arn;
    ih['target_id'] = this.target_id;
    if (this.lb_target_group_attachment_id !== null) {
      ih['lb_target_group_attachment_id'] = this.lb_target_group_attachment_id;
    }
    if (this.availability_zone !== null) {
      ih['availability_zone'] = this.availability_zone;
    }
    if (this.port !== null) {
      ih['port'] = this.port;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Lb_target_group_attachment';
  }
}

export class Licensemanager_association implements PcoreValue {
  readonly license_configuration_arn: string;
  readonly resource_arn: string;
  readonly licensemanager_association_id: string|null;

  constructor({
    license_configuration_arn,
    resource_arn,
    licensemanager_association_id = null
  }: {
    license_configuration_arn: string,
    resource_arn: string,
    licensemanager_association_id?: string|null
  }) {
    this.license_configuration_arn = license_configuration_arn;
    this.resource_arn = resource_arn;
    this.licensemanager_association_id = licensemanager_association_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['license_configuration_arn'] = this.license_configuration_arn;
    ih['resource_arn'] = this.resource_arn;
    if (this.licensemanager_association_id !== null) {
      ih['licensemanager_association_id'] = this.licensemanager_association_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Licensemanager_association';
  }
}

export class Licensemanager_license_configuration implements PcoreValue {
  readonly license_counting_type: string;
  readonly name: string;
  readonly licensemanager_license_configuration_id: string|null;
  readonly description: string|null;
  readonly license_count: number|null;
  readonly license_count_hard_limit: boolean;
  readonly license_rules: string[]|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    license_counting_type,
    name,
    licensemanager_license_configuration_id = null,
    description = null,
    license_count = null,
    license_count_hard_limit = false,
    license_rules = null,
    tags = null
  }: {
    license_counting_type: string,
    name: string,
    licensemanager_license_configuration_id?: string|null,
    description?: string|null,
    license_count?: number|null,
    license_count_hard_limit?: boolean,
    license_rules?: string[]|null,
    tags?: {[s: string]: string}|null
  }) {
    this.license_counting_type = license_counting_type;
    this.name = name;
    this.licensemanager_license_configuration_id = licensemanager_license_configuration_id;
    this.description = description;
    this.license_count = license_count;
    this.license_count_hard_limit = license_count_hard_limit;
    this.license_rules = license_rules;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['license_counting_type'] = this.license_counting_type;
    ih['name'] = this.name;
    if (this.licensemanager_license_configuration_id !== null) {
      ih['licensemanager_license_configuration_id'] = this.licensemanager_license_configuration_id;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.license_count !== null) {
      ih['license_count'] = this.license_count;
    }
    if (this.license_count_hard_limit !== false) {
      ih['license_count_hard_limit'] = this.license_count_hard_limit;
    }
    if (this.license_rules !== null) {
      ih['license_rules'] = this.license_rules;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Licensemanager_license_configuration';
  }
}

export class Lightsail_domain implements PcoreValue {
  readonly domain_name: string;
  readonly lightsail_domain_id: string|null;
  readonly arn: string|null;

  constructor({
    domain_name,
    lightsail_domain_id = null,
    arn = null
  }: {
    domain_name: string,
    lightsail_domain_id?: string|null,
    arn?: string|null
  }) {
    this.domain_name = domain_name;
    this.lightsail_domain_id = lightsail_domain_id;
    this.arn = arn;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['domain_name'] = this.domain_name;
    if (this.lightsail_domain_id !== null) {
      ih['lightsail_domain_id'] = this.lightsail_domain_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Lightsail_domain';
  }
}

export class Lightsail_instance implements PcoreValue {
  readonly availability_zone: string;
  readonly blueprint_id: string;
  readonly bundle_id: string;
  readonly name: string;
  readonly lightsail_instance_id: string|null;
  readonly arn: string|null;
  readonly cpu_count: number|null;
  readonly created_at: string|null;
  readonly ipv6_address: string|null;
  readonly is_static_ip: boolean|null;
  readonly key_pair_name: string|null;
  readonly private_ip_address: string|null;
  readonly public_ip_address: string|null;
  readonly ram_size: number|null;
  readonly user_data: string|null;
  readonly username: string|null;

  constructor({
    availability_zone,
    blueprint_id,
    bundle_id,
    name,
    lightsail_instance_id = null,
    arn = null,
    cpu_count = null,
    created_at = null,
    ipv6_address = null,
    is_static_ip = null,
    key_pair_name = null,
    private_ip_address = null,
    public_ip_address = null,
    ram_size = null,
    user_data = null,
    username = null
  }: {
    availability_zone: string,
    blueprint_id: string,
    bundle_id: string,
    name: string,
    lightsail_instance_id?: string|null,
    arn?: string|null,
    cpu_count?: number|null,
    created_at?: string|null,
    ipv6_address?: string|null,
    is_static_ip?: boolean|null,
    key_pair_name?: string|null,
    private_ip_address?: string|null,
    public_ip_address?: string|null,
    ram_size?: number|null,
    user_data?: string|null,
    username?: string|null
  }) {
    this.availability_zone = availability_zone;
    this.blueprint_id = blueprint_id;
    this.bundle_id = bundle_id;
    this.name = name;
    this.lightsail_instance_id = lightsail_instance_id;
    this.arn = arn;
    this.cpu_count = cpu_count;
    this.created_at = created_at;
    this.ipv6_address = ipv6_address;
    this.is_static_ip = is_static_ip;
    this.key_pair_name = key_pair_name;
    this.private_ip_address = private_ip_address;
    this.public_ip_address = public_ip_address;
    this.ram_size = ram_size;
    this.user_data = user_data;
    this.username = username;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['availability_zone'] = this.availability_zone;
    ih['blueprint_id'] = this.blueprint_id;
    ih['bundle_id'] = this.bundle_id;
    ih['name'] = this.name;
    if (this.lightsail_instance_id !== null) {
      ih['lightsail_instance_id'] = this.lightsail_instance_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.cpu_count !== null) {
      ih['cpu_count'] = this.cpu_count;
    }
    if (this.created_at !== null) {
      ih['created_at'] = this.created_at;
    }
    if (this.ipv6_address !== null) {
      ih['ipv6_address'] = this.ipv6_address;
    }
    if (this.is_static_ip !== null) {
      ih['is_static_ip'] = this.is_static_ip;
    }
    if (this.key_pair_name !== null) {
      ih['key_pair_name'] = this.key_pair_name;
    }
    if (this.private_ip_address !== null) {
      ih['private_ip_address'] = this.private_ip_address;
    }
    if (this.public_ip_address !== null) {
      ih['public_ip_address'] = this.public_ip_address;
    }
    if (this.ram_size !== null) {
      ih['ram_size'] = this.ram_size;
    }
    if (this.user_data !== null) {
      ih['user_data'] = this.user_data;
    }
    if (this.username !== null) {
      ih['username'] = this.username;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Lightsail_instance';
  }
}

export class Lightsail_key_pair implements PcoreValue {
  readonly lightsail_key_pair_id: string|null;
  readonly arn: string|null;
  readonly encrypted_fingerprint: string|null;
  readonly encrypted_private_key: string|null;
  readonly fingerprint: string|null;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly pgp_key: string|null;
  readonly private_key: string|null;
  readonly public_key: string|null;

  constructor({
    lightsail_key_pair_id = null,
    arn = null,
    encrypted_fingerprint = null,
    encrypted_private_key = null,
    fingerprint = null,
    name = null,
    name_prefix = null,
    pgp_key = null,
    private_key = null,
    public_key = null
  }: {
    lightsail_key_pair_id?: string|null,
    arn?: string|null,
    encrypted_fingerprint?: string|null,
    encrypted_private_key?: string|null,
    fingerprint?: string|null,
    name?: string|null,
    name_prefix?: string|null,
    pgp_key?: string|null,
    private_key?: string|null,
    public_key?: string|null
  }) {
    this.lightsail_key_pair_id = lightsail_key_pair_id;
    this.arn = arn;
    this.encrypted_fingerprint = encrypted_fingerprint;
    this.encrypted_private_key = encrypted_private_key;
    this.fingerprint = fingerprint;
    this.name = name;
    this.name_prefix = name_prefix;
    this.pgp_key = pgp_key;
    this.private_key = private_key;
    this.public_key = public_key;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.lightsail_key_pair_id !== null) {
      ih['lightsail_key_pair_id'] = this.lightsail_key_pair_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.encrypted_fingerprint !== null) {
      ih['encrypted_fingerprint'] = this.encrypted_fingerprint;
    }
    if (this.encrypted_private_key !== null) {
      ih['encrypted_private_key'] = this.encrypted_private_key;
    }
    if (this.fingerprint !== null) {
      ih['fingerprint'] = this.fingerprint;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.pgp_key !== null) {
      ih['pgp_key'] = this.pgp_key;
    }
    if (this.private_key !== null) {
      ih['private_key'] = this.private_key;
    }
    if (this.public_key !== null) {
      ih['public_key'] = this.public_key;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Lightsail_key_pair';
  }
}

export class Lightsail_static_ip implements PcoreValue {
  readonly name: string;
  readonly lightsail_static_ip_id: string|null;
  readonly arn: string|null;
  readonly ip_address: string|null;
  readonly support_code: string|null;

  constructor({
    name,
    lightsail_static_ip_id = null,
    arn = null,
    ip_address = null,
    support_code = null
  }: {
    name: string,
    lightsail_static_ip_id?: string|null,
    arn?: string|null,
    ip_address?: string|null,
    support_code?: string|null
  }) {
    this.name = name;
    this.lightsail_static_ip_id = lightsail_static_ip_id;
    this.arn = arn;
    this.ip_address = ip_address;
    this.support_code = support_code;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.lightsail_static_ip_id !== null) {
      ih['lightsail_static_ip_id'] = this.lightsail_static_ip_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.ip_address !== null) {
      ih['ip_address'] = this.ip_address;
    }
    if (this.support_code !== null) {
      ih['support_code'] = this.support_code;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Lightsail_static_ip';
  }
}

export class Lightsail_static_ip_attachment implements PcoreValue {
  readonly instance_name: string;
  readonly static_ip_name: string;
  readonly lightsail_static_ip_attachment_id: string|null;

  constructor({
    instance_name,
    static_ip_name,
    lightsail_static_ip_attachment_id = null
  }: {
    instance_name: string,
    static_ip_name: string,
    lightsail_static_ip_attachment_id?: string|null
  }) {
    this.instance_name = instance_name;
    this.static_ip_name = static_ip_name;
    this.lightsail_static_ip_attachment_id = lightsail_static_ip_attachment_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['instance_name'] = this.instance_name;
    ih['static_ip_name'] = this.static_ip_name;
    if (this.lightsail_static_ip_attachment_id !== null) {
      ih['lightsail_static_ip_attachment_id'] = this.lightsail_static_ip_attachment_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Lightsail_static_ip_attachment';
  }
}

export class Load_balancer_backend_server_policy implements PcoreValue {
  readonly instance_port: number;
  readonly load_balancer_name: string;
  readonly load_balancer_backend_server_policy_id: string|null;
  readonly policy_names: string[]|null;

  constructor({
    instance_port,
    load_balancer_name,
    load_balancer_backend_server_policy_id = null,
    policy_names = null
  }: {
    instance_port: number,
    load_balancer_name: string,
    load_balancer_backend_server_policy_id?: string|null,
    policy_names?: string[]|null
  }) {
    this.instance_port = instance_port;
    this.load_balancer_name = load_balancer_name;
    this.load_balancer_backend_server_policy_id = load_balancer_backend_server_policy_id;
    this.policy_names = policy_names;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['instance_port'] = this.instance_port;
    ih['load_balancer_name'] = this.load_balancer_name;
    if (this.load_balancer_backend_server_policy_id !== null) {
      ih['load_balancer_backend_server_policy_id'] = this.load_balancer_backend_server_policy_id;
    }
    if (this.policy_names !== null) {
      ih['policy_names'] = this.policy_names;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Load_balancer_backend_server_policy';
  }
}

export class Load_balancer_listener_policy implements PcoreValue {
  readonly load_balancer_name: string;
  readonly load_balancer_port: number;
  readonly load_balancer_listener_policy_id: string|null;
  readonly policy_names: string[]|null;

  constructor({
    load_balancer_name,
    load_balancer_port,
    load_balancer_listener_policy_id = null,
    policy_names = null
  }: {
    load_balancer_name: string,
    load_balancer_port: number,
    load_balancer_listener_policy_id?: string|null,
    policy_names?: string[]|null
  }) {
    this.load_balancer_name = load_balancer_name;
    this.load_balancer_port = load_balancer_port;
    this.load_balancer_listener_policy_id = load_balancer_listener_policy_id;
    this.policy_names = policy_names;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['load_balancer_name'] = this.load_balancer_name;
    ih['load_balancer_port'] = this.load_balancer_port;
    if (this.load_balancer_listener_policy_id !== null) {
      ih['load_balancer_listener_policy_id'] = this.load_balancer_listener_policy_id;
    }
    if (this.policy_names !== null) {
      ih['policy_names'] = this.policy_names;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Load_balancer_listener_policy';
  }
}

export class Load_balancer_policy implements PcoreValue {
  readonly load_balancer_name: string;
  readonly policy_name: string;
  readonly policy_type_name: string;
  readonly load_balancer_policy_id: string|null;
  readonly policy_attribute: Anon325[]|null;

  constructor({
    load_balancer_name,
    policy_name,
    policy_type_name,
    load_balancer_policy_id = null,
    policy_attribute = null
  }: {
    load_balancer_name: string,
    policy_name: string,
    policy_type_name: string,
    load_balancer_policy_id?: string|null,
    policy_attribute?: Anon325[]|null
  }) {
    this.load_balancer_name = load_balancer_name;
    this.policy_name = policy_name;
    this.policy_type_name = policy_type_name;
    this.load_balancer_policy_id = load_balancer_policy_id;
    this.policy_attribute = policy_attribute;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['load_balancer_name'] = this.load_balancer_name;
    ih['policy_name'] = this.policy_name;
    ih['policy_type_name'] = this.policy_type_name;
    if (this.load_balancer_policy_id !== null) {
      ih['load_balancer_policy_id'] = this.load_balancer_policy_id;
    }
    if (this.policy_attribute !== null) {
      ih['policy_attribute'] = this.policy_attribute;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Load_balancer_policy';
  }
}

export class Macie_member_account_association implements PcoreValue {
  readonly member_account_id: string;
  readonly macie_member_account_association_id: string|null;

  constructor({
    member_account_id,
    macie_member_account_association_id = null
  }: {
    member_account_id: string,
    macie_member_account_association_id?: string|null
  }) {
    this.member_account_id = member_account_id;
    this.macie_member_account_association_id = macie_member_account_association_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['member_account_id'] = this.member_account_id;
    if (this.macie_member_account_association_id !== null) {
      ih['macie_member_account_association_id'] = this.macie_member_account_association_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Macie_member_account_association';
  }
}

export class Macie_s3_bucket_association implements PcoreValue {
  readonly bucket_name: string;
  readonly macie_s3_bucket_association_id: string|null;
  readonly classification_type: Anon326|null;
  readonly member_account_id: string|null;
  readonly prefix: string|null;

  constructor({
    bucket_name,
    macie_s3_bucket_association_id = null,
    classification_type = null,
    member_account_id = null,
    prefix = null
  }: {
    bucket_name: string,
    macie_s3_bucket_association_id?: string|null,
    classification_type?: Anon326|null,
    member_account_id?: string|null,
    prefix?: string|null
  }) {
    this.bucket_name = bucket_name;
    this.macie_s3_bucket_association_id = macie_s3_bucket_association_id;
    this.classification_type = classification_type;
    this.member_account_id = member_account_id;
    this.prefix = prefix;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['bucket_name'] = this.bucket_name;
    if (this.macie_s3_bucket_association_id !== null) {
      ih['macie_s3_bucket_association_id'] = this.macie_s3_bucket_association_id;
    }
    if (this.classification_type !== null) {
      ih['classification_type'] = this.classification_type;
    }
    if (this.member_account_id !== null) {
      ih['member_account_id'] = this.member_account_id;
    }
    if (this.prefix !== null) {
      ih['prefix'] = this.prefix;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Macie_s3_bucket_association';
  }
}

export class Main_route_table_association implements PcoreValue {
  readonly route_table_id: string;
  readonly vpc_id: string;
  readonly main_route_table_association_id: string|null;
  readonly original_route_table_id: string|null;

  constructor({
    route_table_id,
    vpc_id,
    main_route_table_association_id = null,
    original_route_table_id = null
  }: {
    route_table_id: string,
    vpc_id: string,
    main_route_table_association_id?: string|null,
    original_route_table_id?: string|null
  }) {
    this.route_table_id = route_table_id;
    this.vpc_id = vpc_id;
    this.main_route_table_association_id = main_route_table_association_id;
    this.original_route_table_id = original_route_table_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['route_table_id'] = this.route_table_id;
    ih['vpc_id'] = this.vpc_id;
    if (this.main_route_table_association_id !== null) {
      ih['main_route_table_association_id'] = this.main_route_table_association_id;
    }
    if (this.original_route_table_id !== null) {
      ih['original_route_table_id'] = this.original_route_table_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Main_route_table_association';
  }
}

export class Media_package_channel implements PcoreValue {
  readonly channel_id: string;
  readonly media_package_channel_id: string|null;
  readonly arn: string|null;
  readonly description: string;
  readonly hls_ingest: Anon328[]|null;

  constructor({
    channel_id,
    media_package_channel_id = null,
    arn = null,
    description = 'Managed by Terraform',
    hls_ingest = null
  }: {
    channel_id: string,
    media_package_channel_id?: string|null,
    arn?: string|null,
    description?: string,
    hls_ingest?: Anon328[]|null
  }) {
    this.channel_id = channel_id;
    this.media_package_channel_id = media_package_channel_id;
    this.arn = arn;
    this.description = description;
    this.hls_ingest = hls_ingest;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['channel_id'] = this.channel_id;
    if (this.media_package_channel_id !== null) {
      ih['media_package_channel_id'] = this.media_package_channel_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== 'Managed by Terraform') {
      ih['description'] = this.description;
    }
    if (this.hls_ingest !== null) {
      ih['hls_ingest'] = this.hls_ingest;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Media_package_channel';
  }
}

export class Media_store_container implements PcoreValue {
  readonly name: string;
  readonly media_store_container_id: string|null;
  readonly arn: string|null;
  readonly endpoint: string|null;

  constructor({
    name,
    media_store_container_id = null,
    arn = null,
    endpoint = null
  }: {
    name: string,
    media_store_container_id?: string|null,
    arn?: string|null,
    endpoint?: string|null
  }) {
    this.name = name;
    this.media_store_container_id = media_store_container_id;
    this.arn = arn;
    this.endpoint = endpoint;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.media_store_container_id !== null) {
      ih['media_store_container_id'] = this.media_store_container_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.endpoint !== null) {
      ih['endpoint'] = this.endpoint;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Media_store_container';
  }
}

export class Media_store_container_policy implements PcoreValue {
  readonly container_name: string;
  readonly policy: string;
  readonly media_store_container_policy_id: string|null;

  constructor({
    container_name,
    policy,
    media_store_container_policy_id = null
  }: {
    container_name: string,
    policy: string,
    media_store_container_policy_id?: string|null
  }) {
    this.container_name = container_name;
    this.policy = policy;
    this.media_store_container_policy_id = media_store_container_policy_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['container_name'] = this.container_name;
    ih['policy'] = this.policy;
    if (this.media_store_container_policy_id !== null) {
      ih['media_store_container_policy_id'] = this.media_store_container_policy_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Media_store_container_policy';
  }
}

export class Mq_broker implements PcoreValue {
  readonly broker_name: string;
  readonly engine_type: string;
  readonly engine_version: string;
  readonly host_instance_type: string;
  readonly security_groups: string[];
  readonly user: Anon329[];
  readonly mq_broker_id: string|null;
  readonly apply_immediately: boolean;
  readonly arn: string|null;
  readonly auto_minor_version_upgrade: boolean;
  readonly configuration: Anon330|null;
  readonly deployment_mode: string;
  readonly instances: Anon331[]|null;
  readonly logs: Anon332|null;
  readonly maintenance_window_start_time: Anon333|null;
  readonly publicly_accessible: boolean;
  readonly subnet_ids: string[]|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    broker_name,
    engine_type,
    engine_version,
    host_instance_type,
    security_groups,
    user,
    mq_broker_id = null,
    apply_immediately = false,
    arn = null,
    auto_minor_version_upgrade = false,
    configuration = null,
    deployment_mode = 'SINGLE_INSTANCE',
    instances = null,
    logs = null,
    maintenance_window_start_time = null,
    publicly_accessible = false,
    subnet_ids = null,
    tags = null
  }: {
    broker_name: string,
    engine_type: string,
    engine_version: string,
    host_instance_type: string,
    security_groups: string[],
    user: Anon329[],
    mq_broker_id?: string|null,
    apply_immediately?: boolean,
    arn?: string|null,
    auto_minor_version_upgrade?: boolean,
    configuration?: Anon330|null,
    deployment_mode?: string,
    instances?: Anon331[]|null,
    logs?: Anon332|null,
    maintenance_window_start_time?: Anon333|null,
    publicly_accessible?: boolean,
    subnet_ids?: string[]|null,
    tags?: {[s: string]: string}|null
  }) {
    this.broker_name = broker_name;
    this.engine_type = engine_type;
    this.engine_version = engine_version;
    this.host_instance_type = host_instance_type;
    this.security_groups = security_groups;
    this.user = user;
    this.mq_broker_id = mq_broker_id;
    this.apply_immediately = apply_immediately;
    this.arn = arn;
    this.auto_minor_version_upgrade = auto_minor_version_upgrade;
    this.configuration = configuration;
    this.deployment_mode = deployment_mode;
    this.instances = instances;
    this.logs = logs;
    this.maintenance_window_start_time = maintenance_window_start_time;
    this.publicly_accessible = publicly_accessible;
    this.subnet_ids = subnet_ids;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['broker_name'] = this.broker_name;
    ih['engine_type'] = this.engine_type;
    ih['engine_version'] = this.engine_version;
    ih['host_instance_type'] = this.host_instance_type;
    ih['security_groups'] = this.security_groups;
    ih['user'] = this.user;
    if (this.mq_broker_id !== null) {
      ih['mq_broker_id'] = this.mq_broker_id;
    }
    if (this.apply_immediately !== false) {
      ih['apply_immediately'] = this.apply_immediately;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.auto_minor_version_upgrade !== false) {
      ih['auto_minor_version_upgrade'] = this.auto_minor_version_upgrade;
    }
    if (this.configuration !== null) {
      ih['configuration'] = this.configuration;
    }
    if (this.deployment_mode !== 'SINGLE_INSTANCE') {
      ih['deployment_mode'] = this.deployment_mode;
    }
    if (this.instances !== null) {
      ih['instances'] = this.instances;
    }
    if (this.logs !== null) {
      ih['logs'] = this.logs;
    }
    if (this.maintenance_window_start_time !== null) {
      ih['maintenance_window_start_time'] = this.maintenance_window_start_time;
    }
    if (this.publicly_accessible !== false) {
      ih['publicly_accessible'] = this.publicly_accessible;
    }
    if (this.subnet_ids !== null) {
      ih['subnet_ids'] = this.subnet_ids;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Mq_broker';
  }
}

export class Mq_configuration implements PcoreValue {
  readonly data: string;
  readonly engine_type: string;
  readonly engine_version: string;
  readonly name: string;
  readonly mq_configuration_id: string|null;
  readonly arn: string|null;
  readonly description: string|null;
  readonly latest_revision: number|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    data,
    engine_type,
    engine_version,
    name,
    mq_configuration_id = null,
    arn = null,
    description = null,
    latest_revision = null,
    tags = null
  }: {
    data: string,
    engine_type: string,
    engine_version: string,
    name: string,
    mq_configuration_id?: string|null,
    arn?: string|null,
    description?: string|null,
    latest_revision?: number|null,
    tags?: {[s: string]: string}|null
  }) {
    this.data = data;
    this.engine_type = engine_type;
    this.engine_version = engine_version;
    this.name = name;
    this.mq_configuration_id = mq_configuration_id;
    this.arn = arn;
    this.description = description;
    this.latest_revision = latest_revision;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['data'] = this.data;
    ih['engine_type'] = this.engine_type;
    ih['engine_version'] = this.engine_version;
    ih['name'] = this.name;
    if (this.mq_configuration_id !== null) {
      ih['mq_configuration_id'] = this.mq_configuration_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.latest_revision !== null) {
      ih['latest_revision'] = this.latest_revision;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Mq_configuration';
  }
}

export class Nat_gateway implements PcoreValue {
  readonly allocation_id: string;
  readonly subnet_id: string;
  readonly nat_gateway_id: string|null;
  readonly network_interface_id: string|null;
  readonly private_ip: string|null;
  readonly public_ip: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    allocation_id,
    subnet_id,
    nat_gateway_id = null,
    network_interface_id = null,
    private_ip = null,
    public_ip = null,
    tags = null
  }: {
    allocation_id: string,
    subnet_id: string,
    nat_gateway_id?: string|null,
    network_interface_id?: string|null,
    private_ip?: string|null,
    public_ip?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.allocation_id = allocation_id;
    this.subnet_id = subnet_id;
    this.nat_gateway_id = nat_gateway_id;
    this.network_interface_id = network_interface_id;
    this.private_ip = private_ip;
    this.public_ip = public_ip;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['allocation_id'] = this.allocation_id;
    ih['subnet_id'] = this.subnet_id;
    if (this.nat_gateway_id !== null) {
      ih['nat_gateway_id'] = this.nat_gateway_id;
    }
    if (this.network_interface_id !== null) {
      ih['network_interface_id'] = this.network_interface_id;
    }
    if (this.private_ip !== null) {
      ih['private_ip'] = this.private_ip;
    }
    if (this.public_ip !== null) {
      ih['public_ip'] = this.public_ip;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Nat_gateway';
  }
}

export class Neptune_cluster implements PcoreValue {
  readonly neptune_cluster_id: string|null;
  readonly apply_immediately: boolean|null;
  readonly arn: string|null;
  readonly availability_zones: string[]|null;
  readonly backup_retention_period: number;
  readonly cluster_identifier: string|null;
  readonly cluster_identifier_prefix: string|null;
  readonly cluster_members: string[]|null;
  readonly cluster_resource_id: string|null;
  readonly endpoint: string|null;
  readonly engine: string;
  readonly engine_version: string|null;
  readonly final_snapshot_identifier: string|null;
  readonly hosted_zone_id: string|null;
  readonly iam_database_authentication_enabled: boolean|null;
  readonly iam_roles: string[]|null;
  readonly kms_key_arn: string|null;
  readonly neptune_cluster_parameter_group_name: string;
  readonly neptune_subnet_group_name: string|null;
  readonly port: number;
  readonly preferred_backup_window: string|null;
  readonly preferred_maintenance_window: string|null;
  readonly reader_endpoint: string|null;
  readonly replication_source_identifier: string|null;
  readonly skip_final_snapshot: boolean;
  readonly snapshot_identifier: string|null;
  readonly storage_encrypted: boolean;
  readonly tags: {[s: string]: string}|null;
  readonly vpc_security_group_ids: string[]|null;

  constructor({
    neptune_cluster_id = null,
    apply_immediately = null,
    arn = null,
    availability_zones = null,
    backup_retention_period = 1,
    cluster_identifier = null,
    cluster_identifier_prefix = null,
    cluster_members = null,
    cluster_resource_id = null,
    endpoint = null,
    engine = 'neptune',
    engine_version = null,
    final_snapshot_identifier = null,
    hosted_zone_id = null,
    iam_database_authentication_enabled = null,
    iam_roles = null,
    kms_key_arn = null,
    neptune_cluster_parameter_group_name = 'default.neptune1',
    neptune_subnet_group_name = null,
    port = 8182,
    preferred_backup_window = null,
    preferred_maintenance_window = null,
    reader_endpoint = null,
    replication_source_identifier = null,
    skip_final_snapshot = false,
    snapshot_identifier = null,
    storage_encrypted = false,
    tags = null,
    vpc_security_group_ids = null
  }: {
    neptune_cluster_id?: string|null,
    apply_immediately?: boolean|null,
    arn?: string|null,
    availability_zones?: string[]|null,
    backup_retention_period?: number,
    cluster_identifier?: string|null,
    cluster_identifier_prefix?: string|null,
    cluster_members?: string[]|null,
    cluster_resource_id?: string|null,
    endpoint?: string|null,
    engine?: string,
    engine_version?: string|null,
    final_snapshot_identifier?: string|null,
    hosted_zone_id?: string|null,
    iam_database_authentication_enabled?: boolean|null,
    iam_roles?: string[]|null,
    kms_key_arn?: string|null,
    neptune_cluster_parameter_group_name?: string,
    neptune_subnet_group_name?: string|null,
    port?: number,
    preferred_backup_window?: string|null,
    preferred_maintenance_window?: string|null,
    reader_endpoint?: string|null,
    replication_source_identifier?: string|null,
    skip_final_snapshot?: boolean,
    snapshot_identifier?: string|null,
    storage_encrypted?: boolean,
    tags?: {[s: string]: string}|null,
    vpc_security_group_ids?: string[]|null
  }) {
    this.neptune_cluster_id = neptune_cluster_id;
    this.apply_immediately = apply_immediately;
    this.arn = arn;
    this.availability_zones = availability_zones;
    this.backup_retention_period = backup_retention_period;
    this.cluster_identifier = cluster_identifier;
    this.cluster_identifier_prefix = cluster_identifier_prefix;
    this.cluster_members = cluster_members;
    this.cluster_resource_id = cluster_resource_id;
    this.endpoint = endpoint;
    this.engine = engine;
    this.engine_version = engine_version;
    this.final_snapshot_identifier = final_snapshot_identifier;
    this.hosted_zone_id = hosted_zone_id;
    this.iam_database_authentication_enabled = iam_database_authentication_enabled;
    this.iam_roles = iam_roles;
    this.kms_key_arn = kms_key_arn;
    this.neptune_cluster_parameter_group_name = neptune_cluster_parameter_group_name;
    this.neptune_subnet_group_name = neptune_subnet_group_name;
    this.port = port;
    this.preferred_backup_window = preferred_backup_window;
    this.preferred_maintenance_window = preferred_maintenance_window;
    this.reader_endpoint = reader_endpoint;
    this.replication_source_identifier = replication_source_identifier;
    this.skip_final_snapshot = skip_final_snapshot;
    this.snapshot_identifier = snapshot_identifier;
    this.storage_encrypted = storage_encrypted;
    this.tags = tags;
    this.vpc_security_group_ids = vpc_security_group_ids;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.neptune_cluster_id !== null) {
      ih['neptune_cluster_id'] = this.neptune_cluster_id;
    }
    if (this.apply_immediately !== null) {
      ih['apply_immediately'] = this.apply_immediately;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.availability_zones !== null) {
      ih['availability_zones'] = this.availability_zones;
    }
    if (this.backup_retention_period !== 1) {
      ih['backup_retention_period'] = this.backup_retention_period;
    }
    if (this.cluster_identifier !== null) {
      ih['cluster_identifier'] = this.cluster_identifier;
    }
    if (this.cluster_identifier_prefix !== null) {
      ih['cluster_identifier_prefix'] = this.cluster_identifier_prefix;
    }
    if (this.cluster_members !== null) {
      ih['cluster_members'] = this.cluster_members;
    }
    if (this.cluster_resource_id !== null) {
      ih['cluster_resource_id'] = this.cluster_resource_id;
    }
    if (this.endpoint !== null) {
      ih['endpoint'] = this.endpoint;
    }
    if (this.engine !== 'neptune') {
      ih['engine'] = this.engine;
    }
    if (this.engine_version !== null) {
      ih['engine_version'] = this.engine_version;
    }
    if (this.final_snapshot_identifier !== null) {
      ih['final_snapshot_identifier'] = this.final_snapshot_identifier;
    }
    if (this.hosted_zone_id !== null) {
      ih['hosted_zone_id'] = this.hosted_zone_id;
    }
    if (this.iam_database_authentication_enabled !== null) {
      ih['iam_database_authentication_enabled'] = this.iam_database_authentication_enabled;
    }
    if (this.iam_roles !== null) {
      ih['iam_roles'] = this.iam_roles;
    }
    if (this.kms_key_arn !== null) {
      ih['kms_key_arn'] = this.kms_key_arn;
    }
    if (this.neptune_cluster_parameter_group_name !== 'default.neptune1') {
      ih['neptune_cluster_parameter_group_name'] = this.neptune_cluster_parameter_group_name;
    }
    if (this.neptune_subnet_group_name !== null) {
      ih['neptune_subnet_group_name'] = this.neptune_subnet_group_name;
    }
    if (this.port !== 8182) {
      ih['port'] = this.port;
    }
    if (this.preferred_backup_window !== null) {
      ih['preferred_backup_window'] = this.preferred_backup_window;
    }
    if (this.preferred_maintenance_window !== null) {
      ih['preferred_maintenance_window'] = this.preferred_maintenance_window;
    }
    if (this.reader_endpoint !== null) {
      ih['reader_endpoint'] = this.reader_endpoint;
    }
    if (this.replication_source_identifier !== null) {
      ih['replication_source_identifier'] = this.replication_source_identifier;
    }
    if (this.skip_final_snapshot !== false) {
      ih['skip_final_snapshot'] = this.skip_final_snapshot;
    }
    if (this.snapshot_identifier !== null) {
      ih['snapshot_identifier'] = this.snapshot_identifier;
    }
    if (this.storage_encrypted !== false) {
      ih['storage_encrypted'] = this.storage_encrypted;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpc_security_group_ids !== null) {
      ih['vpc_security_group_ids'] = this.vpc_security_group_ids;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Neptune_cluster';
  }
}

export class Neptune_cluster_instance implements PcoreValue {
  readonly cluster_identifier: string;
  readonly instance_class: string;
  readonly neptune_cluster_instance_id: string|null;
  readonly address: string|null;
  readonly apply_immediately: boolean|null;
  readonly arn: string|null;
  readonly auto_minor_version_upgrade: boolean;
  readonly availability_zone: string|null;
  readonly dbi_resource_id: string|null;
  readonly endpoint: string|null;
  readonly engine: string;
  readonly engine_version: string|null;
  readonly identifier: string|null;
  readonly identifier_prefix: string|null;
  readonly kms_key_arn: string|null;
  readonly neptune_parameter_group_name: string;
  readonly neptune_subnet_group_name: string|null;
  readonly port: number;
  readonly preferred_backup_window: string|null;
  readonly preferred_maintenance_window: string|null;
  readonly promotion_tier: number;
  readonly publicly_accessible: boolean;
  readonly storage_encrypted: boolean|null;
  readonly tags: {[s: string]: string}|null;
  readonly writer: boolean|null;

  constructor({
    cluster_identifier,
    instance_class,
    neptune_cluster_instance_id = null,
    address = null,
    apply_immediately = null,
    arn = null,
    auto_minor_version_upgrade = true,
    availability_zone = null,
    dbi_resource_id = null,
    endpoint = null,
    engine = 'neptune',
    engine_version = null,
    identifier = null,
    identifier_prefix = null,
    kms_key_arn = null,
    neptune_parameter_group_name = 'default.neptune1',
    neptune_subnet_group_name = null,
    port = 8182,
    preferred_backup_window = null,
    preferred_maintenance_window = null,
    promotion_tier = 0,
    publicly_accessible = false,
    storage_encrypted = null,
    tags = null,
    writer = null
  }: {
    cluster_identifier: string,
    instance_class: string,
    neptune_cluster_instance_id?: string|null,
    address?: string|null,
    apply_immediately?: boolean|null,
    arn?: string|null,
    auto_minor_version_upgrade?: boolean,
    availability_zone?: string|null,
    dbi_resource_id?: string|null,
    endpoint?: string|null,
    engine?: string,
    engine_version?: string|null,
    identifier?: string|null,
    identifier_prefix?: string|null,
    kms_key_arn?: string|null,
    neptune_parameter_group_name?: string,
    neptune_subnet_group_name?: string|null,
    port?: number,
    preferred_backup_window?: string|null,
    preferred_maintenance_window?: string|null,
    promotion_tier?: number,
    publicly_accessible?: boolean,
    storage_encrypted?: boolean|null,
    tags?: {[s: string]: string}|null,
    writer?: boolean|null
  }) {
    this.cluster_identifier = cluster_identifier;
    this.instance_class = instance_class;
    this.neptune_cluster_instance_id = neptune_cluster_instance_id;
    this.address = address;
    this.apply_immediately = apply_immediately;
    this.arn = arn;
    this.auto_minor_version_upgrade = auto_minor_version_upgrade;
    this.availability_zone = availability_zone;
    this.dbi_resource_id = dbi_resource_id;
    this.endpoint = endpoint;
    this.engine = engine;
    this.engine_version = engine_version;
    this.identifier = identifier;
    this.identifier_prefix = identifier_prefix;
    this.kms_key_arn = kms_key_arn;
    this.neptune_parameter_group_name = neptune_parameter_group_name;
    this.neptune_subnet_group_name = neptune_subnet_group_name;
    this.port = port;
    this.preferred_backup_window = preferred_backup_window;
    this.preferred_maintenance_window = preferred_maintenance_window;
    this.promotion_tier = promotion_tier;
    this.publicly_accessible = publicly_accessible;
    this.storage_encrypted = storage_encrypted;
    this.tags = tags;
    this.writer = writer;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['cluster_identifier'] = this.cluster_identifier;
    ih['instance_class'] = this.instance_class;
    if (this.neptune_cluster_instance_id !== null) {
      ih['neptune_cluster_instance_id'] = this.neptune_cluster_instance_id;
    }
    if (this.address !== null) {
      ih['address'] = this.address;
    }
    if (this.apply_immediately !== null) {
      ih['apply_immediately'] = this.apply_immediately;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.auto_minor_version_upgrade !== true) {
      ih['auto_minor_version_upgrade'] = this.auto_minor_version_upgrade;
    }
    if (this.availability_zone !== null) {
      ih['availability_zone'] = this.availability_zone;
    }
    if (this.dbi_resource_id !== null) {
      ih['dbi_resource_id'] = this.dbi_resource_id;
    }
    if (this.endpoint !== null) {
      ih['endpoint'] = this.endpoint;
    }
    if (this.engine !== 'neptune') {
      ih['engine'] = this.engine;
    }
    if (this.engine_version !== null) {
      ih['engine_version'] = this.engine_version;
    }
    if (this.identifier !== null) {
      ih['identifier'] = this.identifier;
    }
    if (this.identifier_prefix !== null) {
      ih['identifier_prefix'] = this.identifier_prefix;
    }
    if (this.kms_key_arn !== null) {
      ih['kms_key_arn'] = this.kms_key_arn;
    }
    if (this.neptune_parameter_group_name !== 'default.neptune1') {
      ih['neptune_parameter_group_name'] = this.neptune_parameter_group_name;
    }
    if (this.neptune_subnet_group_name !== null) {
      ih['neptune_subnet_group_name'] = this.neptune_subnet_group_name;
    }
    if (this.port !== 8182) {
      ih['port'] = this.port;
    }
    if (this.preferred_backup_window !== null) {
      ih['preferred_backup_window'] = this.preferred_backup_window;
    }
    if (this.preferred_maintenance_window !== null) {
      ih['preferred_maintenance_window'] = this.preferred_maintenance_window;
    }
    if (this.promotion_tier !== 0) {
      ih['promotion_tier'] = this.promotion_tier;
    }
    if (this.publicly_accessible !== false) {
      ih['publicly_accessible'] = this.publicly_accessible;
    }
    if (this.storage_encrypted !== null) {
      ih['storage_encrypted'] = this.storage_encrypted;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.writer !== null) {
      ih['writer'] = this.writer;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Neptune_cluster_instance';
  }
}

export class Neptune_cluster_parameter_group implements PcoreValue {
  readonly family: string;
  readonly neptune_cluster_parameter_group_id: string|null;
  readonly arn: string|null;
  readonly description: string;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly parameter: Anon158[]|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    family,
    neptune_cluster_parameter_group_id = null,
    arn = null,
    description = 'Managed by Terraform',
    name = null,
    name_prefix = null,
    parameter = null,
    tags = null
  }: {
    family: string,
    neptune_cluster_parameter_group_id?: string|null,
    arn?: string|null,
    description?: string,
    name?: string|null,
    name_prefix?: string|null,
    parameter?: Anon158[]|null,
    tags?: {[s: string]: string}|null
  }) {
    this.family = family;
    this.neptune_cluster_parameter_group_id = neptune_cluster_parameter_group_id;
    this.arn = arn;
    this.description = description;
    this.name = name;
    this.name_prefix = name_prefix;
    this.parameter = parameter;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['family'] = this.family;
    if (this.neptune_cluster_parameter_group_id !== null) {
      ih['neptune_cluster_parameter_group_id'] = this.neptune_cluster_parameter_group_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== 'Managed by Terraform') {
      ih['description'] = this.description;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.parameter !== null) {
      ih['parameter'] = this.parameter;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Neptune_cluster_parameter_group';
  }
}

export class Neptune_cluster_snapshot implements PcoreValue {
  readonly db_cluster_identifier: string;
  readonly db_cluster_snapshot_identifier: string;
  readonly neptune_cluster_snapshot_id: string|null;
  readonly allocated_storage: number|null;
  readonly availability_zones: string[]|null;
  readonly db_cluster_snapshot_arn: string|null;
  readonly engine: string|null;
  readonly engine_version: string|null;
  readonly kms_key_id: string|null;
  readonly license_model: string|null;
  readonly port: number|null;
  readonly snapshot_type: string|null;
  readonly source_db_cluster_snapshot_arn: string|null;
  readonly status: string|null;
  readonly storage_encrypted: boolean|null;
  readonly vpc_id: string|null;

  constructor({
    db_cluster_identifier,
    db_cluster_snapshot_identifier,
    neptune_cluster_snapshot_id = null,
    allocated_storage = null,
    availability_zones = null,
    db_cluster_snapshot_arn = null,
    engine = null,
    engine_version = null,
    kms_key_id = null,
    license_model = null,
    port = null,
    snapshot_type = null,
    source_db_cluster_snapshot_arn = null,
    status = null,
    storage_encrypted = null,
    vpc_id = null
  }: {
    db_cluster_identifier: string,
    db_cluster_snapshot_identifier: string,
    neptune_cluster_snapshot_id?: string|null,
    allocated_storage?: number|null,
    availability_zones?: string[]|null,
    db_cluster_snapshot_arn?: string|null,
    engine?: string|null,
    engine_version?: string|null,
    kms_key_id?: string|null,
    license_model?: string|null,
    port?: number|null,
    snapshot_type?: string|null,
    source_db_cluster_snapshot_arn?: string|null,
    status?: string|null,
    storage_encrypted?: boolean|null,
    vpc_id?: string|null
  }) {
    this.db_cluster_identifier = db_cluster_identifier;
    this.db_cluster_snapshot_identifier = db_cluster_snapshot_identifier;
    this.neptune_cluster_snapshot_id = neptune_cluster_snapshot_id;
    this.allocated_storage = allocated_storage;
    this.availability_zones = availability_zones;
    this.db_cluster_snapshot_arn = db_cluster_snapshot_arn;
    this.engine = engine;
    this.engine_version = engine_version;
    this.kms_key_id = kms_key_id;
    this.license_model = license_model;
    this.port = port;
    this.snapshot_type = snapshot_type;
    this.source_db_cluster_snapshot_arn = source_db_cluster_snapshot_arn;
    this.status = status;
    this.storage_encrypted = storage_encrypted;
    this.vpc_id = vpc_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['db_cluster_identifier'] = this.db_cluster_identifier;
    ih['db_cluster_snapshot_identifier'] = this.db_cluster_snapshot_identifier;
    if (this.neptune_cluster_snapshot_id !== null) {
      ih['neptune_cluster_snapshot_id'] = this.neptune_cluster_snapshot_id;
    }
    if (this.allocated_storage !== null) {
      ih['allocated_storage'] = this.allocated_storage;
    }
    if (this.availability_zones !== null) {
      ih['availability_zones'] = this.availability_zones;
    }
    if (this.db_cluster_snapshot_arn !== null) {
      ih['db_cluster_snapshot_arn'] = this.db_cluster_snapshot_arn;
    }
    if (this.engine !== null) {
      ih['engine'] = this.engine;
    }
    if (this.engine_version !== null) {
      ih['engine_version'] = this.engine_version;
    }
    if (this.kms_key_id !== null) {
      ih['kms_key_id'] = this.kms_key_id;
    }
    if (this.license_model !== null) {
      ih['license_model'] = this.license_model;
    }
    if (this.port !== null) {
      ih['port'] = this.port;
    }
    if (this.snapshot_type !== null) {
      ih['snapshot_type'] = this.snapshot_type;
    }
    if (this.source_db_cluster_snapshot_arn !== null) {
      ih['source_db_cluster_snapshot_arn'] = this.source_db_cluster_snapshot_arn;
    }
    if (this.status !== null) {
      ih['status'] = this.status;
    }
    if (this.storage_encrypted !== null) {
      ih['storage_encrypted'] = this.storage_encrypted;
    }
    if (this.vpc_id !== null) {
      ih['vpc_id'] = this.vpc_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Neptune_cluster_snapshot';
  }
}

export class Neptune_event_subscription implements PcoreValue {
  readonly sns_topic_arn: string;
  readonly neptune_event_subscription_id: string|null;
  readonly arn: string|null;
  readonly customer_aws_id: string|null;
  readonly enabled: boolean;
  readonly event_categories: string[]|null;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly source_ids: string[]|null;
  readonly source_type: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    sns_topic_arn,
    neptune_event_subscription_id = null,
    arn = null,
    customer_aws_id = null,
    enabled = true,
    event_categories = null,
    name = null,
    name_prefix = null,
    source_ids = null,
    source_type = null,
    tags = null
  }: {
    sns_topic_arn: string,
    neptune_event_subscription_id?: string|null,
    arn?: string|null,
    customer_aws_id?: string|null,
    enabled?: boolean,
    event_categories?: string[]|null,
    name?: string|null,
    name_prefix?: string|null,
    source_ids?: string[]|null,
    source_type?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.sns_topic_arn = sns_topic_arn;
    this.neptune_event_subscription_id = neptune_event_subscription_id;
    this.arn = arn;
    this.customer_aws_id = customer_aws_id;
    this.enabled = enabled;
    this.event_categories = event_categories;
    this.name = name;
    this.name_prefix = name_prefix;
    this.source_ids = source_ids;
    this.source_type = source_type;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['sns_topic_arn'] = this.sns_topic_arn;
    if (this.neptune_event_subscription_id !== null) {
      ih['neptune_event_subscription_id'] = this.neptune_event_subscription_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.customer_aws_id !== null) {
      ih['customer_aws_id'] = this.customer_aws_id;
    }
    if (this.enabled !== true) {
      ih['enabled'] = this.enabled;
    }
    if (this.event_categories !== null) {
      ih['event_categories'] = this.event_categories;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.source_ids !== null) {
      ih['source_ids'] = this.source_ids;
    }
    if (this.source_type !== null) {
      ih['source_type'] = this.source_type;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Neptune_event_subscription';
  }
}

export class Neptune_parameter_group implements PcoreValue {
  readonly family: string;
  readonly name: string;
  readonly neptune_parameter_group_id: string|null;
  readonly arn: string|null;
  readonly description: string;
  readonly parameter: Anon158[]|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    family,
    name,
    neptune_parameter_group_id = null,
    arn = null,
    description = 'Managed by Terraform',
    parameter = null,
    tags = null
  }: {
    family: string,
    name: string,
    neptune_parameter_group_id?: string|null,
    arn?: string|null,
    description?: string,
    parameter?: Anon158[]|null,
    tags?: {[s: string]: string}|null
  }) {
    this.family = family;
    this.name = name;
    this.neptune_parameter_group_id = neptune_parameter_group_id;
    this.arn = arn;
    this.description = description;
    this.parameter = parameter;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['family'] = this.family;
    ih['name'] = this.name;
    if (this.neptune_parameter_group_id !== null) {
      ih['neptune_parameter_group_id'] = this.neptune_parameter_group_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== 'Managed by Terraform') {
      ih['description'] = this.description;
    }
    if (this.parameter !== null) {
      ih['parameter'] = this.parameter;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Neptune_parameter_group';
  }
}

export class Neptune_subnet_group implements PcoreValue {
  readonly subnet_ids: string[];
  readonly neptune_subnet_group_id: string|null;
  readonly arn: string|null;
  readonly description: string;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    subnet_ids,
    neptune_subnet_group_id = null,
    arn = null,
    description = 'Managed by Terraform',
    name = null,
    name_prefix = null,
    tags = null
  }: {
    subnet_ids: string[],
    neptune_subnet_group_id?: string|null,
    arn?: string|null,
    description?: string,
    name?: string|null,
    name_prefix?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.subnet_ids = subnet_ids;
    this.neptune_subnet_group_id = neptune_subnet_group_id;
    this.arn = arn;
    this.description = description;
    this.name = name;
    this.name_prefix = name_prefix;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['subnet_ids'] = this.subnet_ids;
    if (this.neptune_subnet_group_id !== null) {
      ih['neptune_subnet_group_id'] = this.neptune_subnet_group_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== 'Managed by Terraform') {
      ih['description'] = this.description;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Neptune_subnet_group';
  }
}

export class Network_acl implements PcoreValue {
  readonly vpc_id: string;
  readonly network_acl_id: string|null;
  readonly egress: Anon160[]|null;
  readonly ingress: Anon160[]|null;
  readonly owner_id: string|null;
  readonly subnet_ids: string[]|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    vpc_id,
    network_acl_id = null,
    egress = null,
    ingress = null,
    owner_id = null,
    subnet_ids = null,
    tags = null
  }: {
    vpc_id: string,
    network_acl_id?: string|null,
    egress?: Anon160[]|null,
    ingress?: Anon160[]|null,
    owner_id?: string|null,
    subnet_ids?: string[]|null,
    tags?: {[s: string]: string}|null
  }) {
    this.vpc_id = vpc_id;
    this.network_acl_id = network_acl_id;
    this.egress = egress;
    this.ingress = ingress;
    this.owner_id = owner_id;
    this.subnet_ids = subnet_ids;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['vpc_id'] = this.vpc_id;
    if (this.network_acl_id !== null) {
      ih['network_acl_id'] = this.network_acl_id;
    }
    if (this.egress !== null) {
      ih['egress'] = this.egress;
    }
    if (this.ingress !== null) {
      ih['ingress'] = this.ingress;
    }
    if (this.owner_id !== null) {
      ih['owner_id'] = this.owner_id;
    }
    if (this.subnet_ids !== null) {
      ih['subnet_ids'] = this.subnet_ids;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Network_acl';
  }
}

export class Network_acl_rule implements PcoreValue {
  readonly network_acl_id: string;
  readonly protocol: string;
  readonly rule_action: string;
  readonly rule_number: number;
  readonly network_acl_rule_id: string|null;
  readonly cidr_block: string|null;
  readonly egress: boolean;
  readonly from_port: number|null;
  readonly icmp_code: string|null;
  readonly icmp_type: string|null;
  readonly ipv6_cidr_block: string|null;
  readonly to_port: number|null;

  constructor({
    network_acl_id,
    protocol,
    rule_action,
    rule_number,
    network_acl_rule_id = null,
    cidr_block = null,
    egress = false,
    from_port = null,
    icmp_code = null,
    icmp_type = null,
    ipv6_cidr_block = null,
    to_port = null
  }: {
    network_acl_id: string,
    protocol: string,
    rule_action: string,
    rule_number: number,
    network_acl_rule_id?: string|null,
    cidr_block?: string|null,
    egress?: boolean,
    from_port?: number|null,
    icmp_code?: string|null,
    icmp_type?: string|null,
    ipv6_cidr_block?: string|null,
    to_port?: number|null
  }) {
    this.network_acl_id = network_acl_id;
    this.protocol = protocol;
    this.rule_action = rule_action;
    this.rule_number = rule_number;
    this.network_acl_rule_id = network_acl_rule_id;
    this.cidr_block = cidr_block;
    this.egress = egress;
    this.from_port = from_port;
    this.icmp_code = icmp_code;
    this.icmp_type = icmp_type;
    this.ipv6_cidr_block = ipv6_cidr_block;
    this.to_port = to_port;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['network_acl_id'] = this.network_acl_id;
    ih['protocol'] = this.protocol;
    ih['rule_action'] = this.rule_action;
    ih['rule_number'] = this.rule_number;
    if (this.network_acl_rule_id !== null) {
      ih['network_acl_rule_id'] = this.network_acl_rule_id;
    }
    if (this.cidr_block !== null) {
      ih['cidr_block'] = this.cidr_block;
    }
    if (this.egress !== false) {
      ih['egress'] = this.egress;
    }
    if (this.from_port !== null) {
      ih['from_port'] = this.from_port;
    }
    if (this.icmp_code !== null) {
      ih['icmp_code'] = this.icmp_code;
    }
    if (this.icmp_type !== null) {
      ih['icmp_type'] = this.icmp_type;
    }
    if (this.ipv6_cidr_block !== null) {
      ih['ipv6_cidr_block'] = this.ipv6_cidr_block;
    }
    if (this.to_port !== null) {
      ih['to_port'] = this.to_port;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Network_acl_rule';
  }
}

export class Network_interface implements PcoreValue {
  readonly subnet_id: string;
  readonly network_interface_id: string|null;
  readonly attachment: Anon334[]|null;
  readonly description: string|null;
  readonly private_dns_name: string|null;
  readonly private_ip: string|null;
  readonly private_ips: string[]|null;
  readonly private_ips_count: number|null;
  readonly security_groups: string[]|null;
  readonly source_dest_check: boolean;
  readonly tags: {[s: string]: string}|null;

  constructor({
    subnet_id,
    network_interface_id = null,
    attachment = null,
    description = null,
    private_dns_name = null,
    private_ip = null,
    private_ips = null,
    private_ips_count = null,
    security_groups = null,
    source_dest_check = true,
    tags = null
  }: {
    subnet_id: string,
    network_interface_id?: string|null,
    attachment?: Anon334[]|null,
    description?: string|null,
    private_dns_name?: string|null,
    private_ip?: string|null,
    private_ips?: string[]|null,
    private_ips_count?: number|null,
    security_groups?: string[]|null,
    source_dest_check?: boolean,
    tags?: {[s: string]: string}|null
  }) {
    this.subnet_id = subnet_id;
    this.network_interface_id = network_interface_id;
    this.attachment = attachment;
    this.description = description;
    this.private_dns_name = private_dns_name;
    this.private_ip = private_ip;
    this.private_ips = private_ips;
    this.private_ips_count = private_ips_count;
    this.security_groups = security_groups;
    this.source_dest_check = source_dest_check;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['subnet_id'] = this.subnet_id;
    if (this.network_interface_id !== null) {
      ih['network_interface_id'] = this.network_interface_id;
    }
    if (this.attachment !== null) {
      ih['attachment'] = this.attachment;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.private_dns_name !== null) {
      ih['private_dns_name'] = this.private_dns_name;
    }
    if (this.private_ip !== null) {
      ih['private_ip'] = this.private_ip;
    }
    if (this.private_ips !== null) {
      ih['private_ips'] = this.private_ips;
    }
    if (this.private_ips_count !== null) {
      ih['private_ips_count'] = this.private_ips_count;
    }
    if (this.security_groups !== null) {
      ih['security_groups'] = this.security_groups;
    }
    if (this.source_dest_check !== true) {
      ih['source_dest_check'] = this.source_dest_check;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Network_interface';
  }
}

export class Network_interface_attachment implements PcoreValue {
  readonly device_index: number;
  readonly instance_id: string;
  readonly network_interface_id: string;
  readonly network_interface_attachment_id: string|null;
  readonly attachment_id: string|null;
  readonly status: string|null;

  constructor({
    device_index,
    instance_id,
    network_interface_id,
    network_interface_attachment_id = null,
    attachment_id = null,
    status = null
  }: {
    device_index: number,
    instance_id: string,
    network_interface_id: string,
    network_interface_attachment_id?: string|null,
    attachment_id?: string|null,
    status?: string|null
  }) {
    this.device_index = device_index;
    this.instance_id = instance_id;
    this.network_interface_id = network_interface_id;
    this.network_interface_attachment_id = network_interface_attachment_id;
    this.attachment_id = attachment_id;
    this.status = status;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['device_index'] = this.device_index;
    ih['instance_id'] = this.instance_id;
    ih['network_interface_id'] = this.network_interface_id;
    if (this.network_interface_attachment_id !== null) {
      ih['network_interface_attachment_id'] = this.network_interface_attachment_id;
    }
    if (this.attachment_id !== null) {
      ih['attachment_id'] = this.attachment_id;
    }
    if (this.status !== null) {
      ih['status'] = this.status;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Network_interface_attachment';
  }
}

export class Network_interface_sg_attachment implements PcoreValue {
  readonly network_interface_id: string;
  readonly security_group_id: string;
  readonly network_interface_sg_attachment_id: string|null;

  constructor({
    network_interface_id,
    security_group_id,
    network_interface_sg_attachment_id = null
  }: {
    network_interface_id: string,
    security_group_id: string,
    network_interface_sg_attachment_id?: string|null
  }) {
    this.network_interface_id = network_interface_id;
    this.security_group_id = security_group_id;
    this.network_interface_sg_attachment_id = network_interface_sg_attachment_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['network_interface_id'] = this.network_interface_id;
    ih['security_group_id'] = this.security_group_id;
    if (this.network_interface_sg_attachment_id !== null) {
      ih['network_interface_sg_attachment_id'] = this.network_interface_sg_attachment_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Network_interface_sg_attachment';
  }
}

export class Opsworks_application implements PcoreValue {
  readonly name: string;
  readonly stack_id: string;
  readonly type: string;
  readonly opsworks_application_id: string|null;
  readonly app_source: Anon335[]|null;
  readonly auto_bundle_on_deploy: string|null;
  readonly aws_flow_ruby_settings: string|null;
  readonly data_source_arn: string|null;
  readonly data_source_database_name: string|null;
  readonly data_source_type: string|null;
  readonly description: string|null;
  readonly document_root: string|null;
  readonly domains: string[]|null;
  readonly enable_ssl: boolean;
  readonly environment: Anon336[]|null;
  readonly rails_env: string|null;
  readonly short_name: string|null;
  readonly ssl_configuration: Anon337[]|null;

  constructor({
    name,
    stack_id,
    type,
    opsworks_application_id = null,
    app_source = null,
    auto_bundle_on_deploy = null,
    aws_flow_ruby_settings = null,
    data_source_arn = null,
    data_source_database_name = null,
    data_source_type = null,
    description = null,
    document_root = null,
    domains = null,
    enable_ssl = false,
    environment = null,
    rails_env = null,
    short_name = null,
    ssl_configuration = null
  }: {
    name: string,
    stack_id: string,
    type: string,
    opsworks_application_id?: string|null,
    app_source?: Anon335[]|null,
    auto_bundle_on_deploy?: string|null,
    aws_flow_ruby_settings?: string|null,
    data_source_arn?: string|null,
    data_source_database_name?: string|null,
    data_source_type?: string|null,
    description?: string|null,
    document_root?: string|null,
    domains?: string[]|null,
    enable_ssl?: boolean,
    environment?: Anon336[]|null,
    rails_env?: string|null,
    short_name?: string|null,
    ssl_configuration?: Anon337[]|null
  }) {
    this.name = name;
    this.stack_id = stack_id;
    this.type = type;
    this.opsworks_application_id = opsworks_application_id;
    this.app_source = app_source;
    this.auto_bundle_on_deploy = auto_bundle_on_deploy;
    this.aws_flow_ruby_settings = aws_flow_ruby_settings;
    this.data_source_arn = data_source_arn;
    this.data_source_database_name = data_source_database_name;
    this.data_source_type = data_source_type;
    this.description = description;
    this.document_root = document_root;
    this.domains = domains;
    this.enable_ssl = enable_ssl;
    this.environment = environment;
    this.rails_env = rails_env;
    this.short_name = short_name;
    this.ssl_configuration = ssl_configuration;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['stack_id'] = this.stack_id;
    ih['type'] = this.type;
    if (this.opsworks_application_id !== null) {
      ih['opsworks_application_id'] = this.opsworks_application_id;
    }
    if (this.app_source !== null) {
      ih['app_source'] = this.app_source;
    }
    if (this.auto_bundle_on_deploy !== null) {
      ih['auto_bundle_on_deploy'] = this.auto_bundle_on_deploy;
    }
    if (this.aws_flow_ruby_settings !== null) {
      ih['aws_flow_ruby_settings'] = this.aws_flow_ruby_settings;
    }
    if (this.data_source_arn !== null) {
      ih['data_source_arn'] = this.data_source_arn;
    }
    if (this.data_source_database_name !== null) {
      ih['data_source_database_name'] = this.data_source_database_name;
    }
    if (this.data_source_type !== null) {
      ih['data_source_type'] = this.data_source_type;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.document_root !== null) {
      ih['document_root'] = this.document_root;
    }
    if (this.domains !== null) {
      ih['domains'] = this.domains;
    }
    if (this.enable_ssl !== false) {
      ih['enable_ssl'] = this.enable_ssl;
    }
    if (this.environment !== null) {
      ih['environment'] = this.environment;
    }
    if (this.rails_env !== null) {
      ih['rails_env'] = this.rails_env;
    }
    if (this.short_name !== null) {
      ih['short_name'] = this.short_name;
    }
    if (this.ssl_configuration !== null) {
      ih['ssl_configuration'] = this.ssl_configuration;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Opsworks_application';
  }
}

export class Opsworks_custom_layer implements PcoreValue {
  readonly name: string;
  readonly short_name: string;
  readonly stack_id: string;
  readonly opsworks_custom_layer_id: string|null;
  readonly auto_assign_elastic_ips: boolean;
  readonly auto_assign_public_ips: boolean;
  readonly auto_healing: boolean;
  readonly custom_configure_recipes: string[]|null;
  readonly custom_deploy_recipes: string[]|null;
  readonly custom_instance_profile_arn: string|null;
  readonly custom_json: string|null;
  readonly custom_security_group_ids: string[]|null;
  readonly custom_setup_recipes: string[]|null;
  readonly custom_shutdown_recipes: string[]|null;
  readonly custom_undeploy_recipes: string[]|null;
  readonly drain_elb_on_shutdown: boolean;
  readonly ebs_volume: Anon338[]|null;
  readonly elastic_load_balancer: string|null;
  readonly install_updates_on_boot: boolean;
  readonly instance_shutdown_timeout: number;
  readonly system_packages: string[]|null;
  readonly use_ebs_optimized_instances: boolean;

  constructor({
    name,
    short_name,
    stack_id,
    opsworks_custom_layer_id = null,
    auto_assign_elastic_ips = false,
    auto_assign_public_ips = false,
    auto_healing = true,
    custom_configure_recipes = null,
    custom_deploy_recipes = null,
    custom_instance_profile_arn = null,
    custom_json = null,
    custom_security_group_ids = null,
    custom_setup_recipes = null,
    custom_shutdown_recipes = null,
    custom_undeploy_recipes = null,
    drain_elb_on_shutdown = true,
    ebs_volume = null,
    elastic_load_balancer = null,
    install_updates_on_boot = true,
    instance_shutdown_timeout = 120,
    system_packages = null,
    use_ebs_optimized_instances = false
  }: {
    name: string,
    short_name: string,
    stack_id: string,
    opsworks_custom_layer_id?: string|null,
    auto_assign_elastic_ips?: boolean,
    auto_assign_public_ips?: boolean,
    auto_healing?: boolean,
    custom_configure_recipes?: string[]|null,
    custom_deploy_recipes?: string[]|null,
    custom_instance_profile_arn?: string|null,
    custom_json?: string|null,
    custom_security_group_ids?: string[]|null,
    custom_setup_recipes?: string[]|null,
    custom_shutdown_recipes?: string[]|null,
    custom_undeploy_recipes?: string[]|null,
    drain_elb_on_shutdown?: boolean,
    ebs_volume?: Anon338[]|null,
    elastic_load_balancer?: string|null,
    install_updates_on_boot?: boolean,
    instance_shutdown_timeout?: number,
    system_packages?: string[]|null,
    use_ebs_optimized_instances?: boolean
  }) {
    this.name = name;
    this.short_name = short_name;
    this.stack_id = stack_id;
    this.opsworks_custom_layer_id = opsworks_custom_layer_id;
    this.auto_assign_elastic_ips = auto_assign_elastic_ips;
    this.auto_assign_public_ips = auto_assign_public_ips;
    this.auto_healing = auto_healing;
    this.custom_configure_recipes = custom_configure_recipes;
    this.custom_deploy_recipes = custom_deploy_recipes;
    this.custom_instance_profile_arn = custom_instance_profile_arn;
    this.custom_json = custom_json;
    this.custom_security_group_ids = custom_security_group_ids;
    this.custom_setup_recipes = custom_setup_recipes;
    this.custom_shutdown_recipes = custom_shutdown_recipes;
    this.custom_undeploy_recipes = custom_undeploy_recipes;
    this.drain_elb_on_shutdown = drain_elb_on_shutdown;
    this.ebs_volume = ebs_volume;
    this.elastic_load_balancer = elastic_load_balancer;
    this.install_updates_on_boot = install_updates_on_boot;
    this.instance_shutdown_timeout = instance_shutdown_timeout;
    this.system_packages = system_packages;
    this.use_ebs_optimized_instances = use_ebs_optimized_instances;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['short_name'] = this.short_name;
    ih['stack_id'] = this.stack_id;
    if (this.opsworks_custom_layer_id !== null) {
      ih['opsworks_custom_layer_id'] = this.opsworks_custom_layer_id;
    }
    if (this.auto_assign_elastic_ips !== false) {
      ih['auto_assign_elastic_ips'] = this.auto_assign_elastic_ips;
    }
    if (this.auto_assign_public_ips !== false) {
      ih['auto_assign_public_ips'] = this.auto_assign_public_ips;
    }
    if (this.auto_healing !== true) {
      ih['auto_healing'] = this.auto_healing;
    }
    if (this.custom_configure_recipes !== null) {
      ih['custom_configure_recipes'] = this.custom_configure_recipes;
    }
    if (this.custom_deploy_recipes !== null) {
      ih['custom_deploy_recipes'] = this.custom_deploy_recipes;
    }
    if (this.custom_instance_profile_arn !== null) {
      ih['custom_instance_profile_arn'] = this.custom_instance_profile_arn;
    }
    if (this.custom_json !== null) {
      ih['custom_json'] = this.custom_json;
    }
    if (this.custom_security_group_ids !== null) {
      ih['custom_security_group_ids'] = this.custom_security_group_ids;
    }
    if (this.custom_setup_recipes !== null) {
      ih['custom_setup_recipes'] = this.custom_setup_recipes;
    }
    if (this.custom_shutdown_recipes !== null) {
      ih['custom_shutdown_recipes'] = this.custom_shutdown_recipes;
    }
    if (this.custom_undeploy_recipes !== null) {
      ih['custom_undeploy_recipes'] = this.custom_undeploy_recipes;
    }
    if (this.drain_elb_on_shutdown !== true) {
      ih['drain_elb_on_shutdown'] = this.drain_elb_on_shutdown;
    }
    if (this.ebs_volume !== null) {
      ih['ebs_volume'] = this.ebs_volume;
    }
    if (this.elastic_load_balancer !== null) {
      ih['elastic_load_balancer'] = this.elastic_load_balancer;
    }
    if (this.install_updates_on_boot !== true) {
      ih['install_updates_on_boot'] = this.install_updates_on_boot;
    }
    if (this.instance_shutdown_timeout !== 120) {
      ih['instance_shutdown_timeout'] = this.instance_shutdown_timeout;
    }
    if (this.system_packages !== null) {
      ih['system_packages'] = this.system_packages;
    }
    if (this.use_ebs_optimized_instances !== false) {
      ih['use_ebs_optimized_instances'] = this.use_ebs_optimized_instances;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Opsworks_custom_layer';
  }
}

export class Opsworks_ganglia_layer implements PcoreValue {
  readonly password: string;
  readonly stack_id: string;
  readonly opsworks_ganglia_layer_id: string|null;
  readonly auto_assign_elastic_ips: boolean;
  readonly auto_assign_public_ips: boolean;
  readonly auto_healing: boolean;
  readonly custom_configure_recipes: string[]|null;
  readonly custom_deploy_recipes: string[]|null;
  readonly custom_instance_profile_arn: string|null;
  readonly custom_json: string|null;
  readonly custom_security_group_ids: string[]|null;
  readonly custom_setup_recipes: string[]|null;
  readonly custom_shutdown_recipes: string[]|null;
  readonly custom_undeploy_recipes: string[]|null;
  readonly drain_elb_on_shutdown: boolean;
  readonly ebs_volume: Anon338[]|null;
  readonly elastic_load_balancer: string|null;
  readonly install_updates_on_boot: boolean;
  readonly instance_shutdown_timeout: number;
  readonly name: string;
  readonly system_packages: string[]|null;
  readonly url: string;
  readonly use_ebs_optimized_instances: boolean;
  readonly username: string;

  constructor({
    password,
    stack_id,
    opsworks_ganglia_layer_id = null,
    auto_assign_elastic_ips = false,
    auto_assign_public_ips = false,
    auto_healing = true,
    custom_configure_recipes = null,
    custom_deploy_recipes = null,
    custom_instance_profile_arn = null,
    custom_json = null,
    custom_security_group_ids = null,
    custom_setup_recipes = null,
    custom_shutdown_recipes = null,
    custom_undeploy_recipes = null,
    drain_elb_on_shutdown = true,
    ebs_volume = null,
    elastic_load_balancer = null,
    install_updates_on_boot = true,
    instance_shutdown_timeout = 120,
    name = 'Ganglia',
    system_packages = null,
    url = '/ganglia',
    use_ebs_optimized_instances = false,
    username = 'opsworks'
  }: {
    password: string,
    stack_id: string,
    opsworks_ganglia_layer_id?: string|null,
    auto_assign_elastic_ips?: boolean,
    auto_assign_public_ips?: boolean,
    auto_healing?: boolean,
    custom_configure_recipes?: string[]|null,
    custom_deploy_recipes?: string[]|null,
    custom_instance_profile_arn?: string|null,
    custom_json?: string|null,
    custom_security_group_ids?: string[]|null,
    custom_setup_recipes?: string[]|null,
    custom_shutdown_recipes?: string[]|null,
    custom_undeploy_recipes?: string[]|null,
    drain_elb_on_shutdown?: boolean,
    ebs_volume?: Anon338[]|null,
    elastic_load_balancer?: string|null,
    install_updates_on_boot?: boolean,
    instance_shutdown_timeout?: number,
    name?: string,
    system_packages?: string[]|null,
    url?: string,
    use_ebs_optimized_instances?: boolean,
    username?: string
  }) {
    this.password = password;
    this.stack_id = stack_id;
    this.opsworks_ganglia_layer_id = opsworks_ganglia_layer_id;
    this.auto_assign_elastic_ips = auto_assign_elastic_ips;
    this.auto_assign_public_ips = auto_assign_public_ips;
    this.auto_healing = auto_healing;
    this.custom_configure_recipes = custom_configure_recipes;
    this.custom_deploy_recipes = custom_deploy_recipes;
    this.custom_instance_profile_arn = custom_instance_profile_arn;
    this.custom_json = custom_json;
    this.custom_security_group_ids = custom_security_group_ids;
    this.custom_setup_recipes = custom_setup_recipes;
    this.custom_shutdown_recipes = custom_shutdown_recipes;
    this.custom_undeploy_recipes = custom_undeploy_recipes;
    this.drain_elb_on_shutdown = drain_elb_on_shutdown;
    this.ebs_volume = ebs_volume;
    this.elastic_load_balancer = elastic_load_balancer;
    this.install_updates_on_boot = install_updates_on_boot;
    this.instance_shutdown_timeout = instance_shutdown_timeout;
    this.name = name;
    this.system_packages = system_packages;
    this.url = url;
    this.use_ebs_optimized_instances = use_ebs_optimized_instances;
    this.username = username;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['password'] = this.password;
    ih['stack_id'] = this.stack_id;
    if (this.opsworks_ganglia_layer_id !== null) {
      ih['opsworks_ganglia_layer_id'] = this.opsworks_ganglia_layer_id;
    }
    if (this.auto_assign_elastic_ips !== false) {
      ih['auto_assign_elastic_ips'] = this.auto_assign_elastic_ips;
    }
    if (this.auto_assign_public_ips !== false) {
      ih['auto_assign_public_ips'] = this.auto_assign_public_ips;
    }
    if (this.auto_healing !== true) {
      ih['auto_healing'] = this.auto_healing;
    }
    if (this.custom_configure_recipes !== null) {
      ih['custom_configure_recipes'] = this.custom_configure_recipes;
    }
    if (this.custom_deploy_recipes !== null) {
      ih['custom_deploy_recipes'] = this.custom_deploy_recipes;
    }
    if (this.custom_instance_profile_arn !== null) {
      ih['custom_instance_profile_arn'] = this.custom_instance_profile_arn;
    }
    if (this.custom_json !== null) {
      ih['custom_json'] = this.custom_json;
    }
    if (this.custom_security_group_ids !== null) {
      ih['custom_security_group_ids'] = this.custom_security_group_ids;
    }
    if (this.custom_setup_recipes !== null) {
      ih['custom_setup_recipes'] = this.custom_setup_recipes;
    }
    if (this.custom_shutdown_recipes !== null) {
      ih['custom_shutdown_recipes'] = this.custom_shutdown_recipes;
    }
    if (this.custom_undeploy_recipes !== null) {
      ih['custom_undeploy_recipes'] = this.custom_undeploy_recipes;
    }
    if (this.drain_elb_on_shutdown !== true) {
      ih['drain_elb_on_shutdown'] = this.drain_elb_on_shutdown;
    }
    if (this.ebs_volume !== null) {
      ih['ebs_volume'] = this.ebs_volume;
    }
    if (this.elastic_load_balancer !== null) {
      ih['elastic_load_balancer'] = this.elastic_load_balancer;
    }
    if (this.install_updates_on_boot !== true) {
      ih['install_updates_on_boot'] = this.install_updates_on_boot;
    }
    if (this.instance_shutdown_timeout !== 120) {
      ih['instance_shutdown_timeout'] = this.instance_shutdown_timeout;
    }
    if (this.name !== 'Ganglia') {
      ih['name'] = this.name;
    }
    if (this.system_packages !== null) {
      ih['system_packages'] = this.system_packages;
    }
    if (this.url !== '/ganglia') {
      ih['url'] = this.url;
    }
    if (this.use_ebs_optimized_instances !== false) {
      ih['use_ebs_optimized_instances'] = this.use_ebs_optimized_instances;
    }
    if (this.username !== 'opsworks') {
      ih['username'] = this.username;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Opsworks_ganglia_layer';
  }
}

export class Opsworks_haproxy_layer implements PcoreValue {
  readonly stack_id: string;
  readonly stats_password: string;
  readonly opsworks_haproxy_layer_id: string|null;
  readonly auto_assign_elastic_ips: boolean;
  readonly auto_assign_public_ips: boolean;
  readonly auto_healing: boolean;
  readonly custom_configure_recipes: string[]|null;
  readonly custom_deploy_recipes: string[]|null;
  readonly custom_instance_profile_arn: string|null;
  readonly custom_json: string|null;
  readonly custom_security_group_ids: string[]|null;
  readonly custom_setup_recipes: string[]|null;
  readonly custom_shutdown_recipes: string[]|null;
  readonly custom_undeploy_recipes: string[]|null;
  readonly drain_elb_on_shutdown: boolean;
  readonly ebs_volume: Anon338[]|null;
  readonly elastic_load_balancer: string|null;
  readonly healthcheck_method: string;
  readonly healthcheck_url: string;
  readonly install_updates_on_boot: boolean;
  readonly instance_shutdown_timeout: number;
  readonly name: string;
  readonly stats_enabled: boolean;
  readonly stats_url: string;
  readonly stats_user: string;
  readonly system_packages: string[]|null;
  readonly use_ebs_optimized_instances: boolean;

  constructor({
    stack_id,
    stats_password,
    opsworks_haproxy_layer_id = null,
    auto_assign_elastic_ips = false,
    auto_assign_public_ips = false,
    auto_healing = true,
    custom_configure_recipes = null,
    custom_deploy_recipes = null,
    custom_instance_profile_arn = null,
    custom_json = null,
    custom_security_group_ids = null,
    custom_setup_recipes = null,
    custom_shutdown_recipes = null,
    custom_undeploy_recipes = null,
    drain_elb_on_shutdown = true,
    ebs_volume = null,
    elastic_load_balancer = null,
    healthcheck_method = 'OPTIONS',
    healthcheck_url = '/',
    install_updates_on_boot = true,
    instance_shutdown_timeout = 120,
    name = 'HAProxy',
    stats_enabled = true,
    stats_url = '/haproxy?stats',
    stats_user = 'opsworks',
    system_packages = null,
    use_ebs_optimized_instances = false
  }: {
    stack_id: string,
    stats_password: string,
    opsworks_haproxy_layer_id?: string|null,
    auto_assign_elastic_ips?: boolean,
    auto_assign_public_ips?: boolean,
    auto_healing?: boolean,
    custom_configure_recipes?: string[]|null,
    custom_deploy_recipes?: string[]|null,
    custom_instance_profile_arn?: string|null,
    custom_json?: string|null,
    custom_security_group_ids?: string[]|null,
    custom_setup_recipes?: string[]|null,
    custom_shutdown_recipes?: string[]|null,
    custom_undeploy_recipes?: string[]|null,
    drain_elb_on_shutdown?: boolean,
    ebs_volume?: Anon338[]|null,
    elastic_load_balancer?: string|null,
    healthcheck_method?: string,
    healthcheck_url?: string,
    install_updates_on_boot?: boolean,
    instance_shutdown_timeout?: number,
    name?: string,
    stats_enabled?: boolean,
    stats_url?: string,
    stats_user?: string,
    system_packages?: string[]|null,
    use_ebs_optimized_instances?: boolean
  }) {
    this.stack_id = stack_id;
    this.stats_password = stats_password;
    this.opsworks_haproxy_layer_id = opsworks_haproxy_layer_id;
    this.auto_assign_elastic_ips = auto_assign_elastic_ips;
    this.auto_assign_public_ips = auto_assign_public_ips;
    this.auto_healing = auto_healing;
    this.custom_configure_recipes = custom_configure_recipes;
    this.custom_deploy_recipes = custom_deploy_recipes;
    this.custom_instance_profile_arn = custom_instance_profile_arn;
    this.custom_json = custom_json;
    this.custom_security_group_ids = custom_security_group_ids;
    this.custom_setup_recipes = custom_setup_recipes;
    this.custom_shutdown_recipes = custom_shutdown_recipes;
    this.custom_undeploy_recipes = custom_undeploy_recipes;
    this.drain_elb_on_shutdown = drain_elb_on_shutdown;
    this.ebs_volume = ebs_volume;
    this.elastic_load_balancer = elastic_load_balancer;
    this.healthcheck_method = healthcheck_method;
    this.healthcheck_url = healthcheck_url;
    this.install_updates_on_boot = install_updates_on_boot;
    this.instance_shutdown_timeout = instance_shutdown_timeout;
    this.name = name;
    this.stats_enabled = stats_enabled;
    this.stats_url = stats_url;
    this.stats_user = stats_user;
    this.system_packages = system_packages;
    this.use_ebs_optimized_instances = use_ebs_optimized_instances;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['stack_id'] = this.stack_id;
    ih['stats_password'] = this.stats_password;
    if (this.opsworks_haproxy_layer_id !== null) {
      ih['opsworks_haproxy_layer_id'] = this.opsworks_haproxy_layer_id;
    }
    if (this.auto_assign_elastic_ips !== false) {
      ih['auto_assign_elastic_ips'] = this.auto_assign_elastic_ips;
    }
    if (this.auto_assign_public_ips !== false) {
      ih['auto_assign_public_ips'] = this.auto_assign_public_ips;
    }
    if (this.auto_healing !== true) {
      ih['auto_healing'] = this.auto_healing;
    }
    if (this.custom_configure_recipes !== null) {
      ih['custom_configure_recipes'] = this.custom_configure_recipes;
    }
    if (this.custom_deploy_recipes !== null) {
      ih['custom_deploy_recipes'] = this.custom_deploy_recipes;
    }
    if (this.custom_instance_profile_arn !== null) {
      ih['custom_instance_profile_arn'] = this.custom_instance_profile_arn;
    }
    if (this.custom_json !== null) {
      ih['custom_json'] = this.custom_json;
    }
    if (this.custom_security_group_ids !== null) {
      ih['custom_security_group_ids'] = this.custom_security_group_ids;
    }
    if (this.custom_setup_recipes !== null) {
      ih['custom_setup_recipes'] = this.custom_setup_recipes;
    }
    if (this.custom_shutdown_recipes !== null) {
      ih['custom_shutdown_recipes'] = this.custom_shutdown_recipes;
    }
    if (this.custom_undeploy_recipes !== null) {
      ih['custom_undeploy_recipes'] = this.custom_undeploy_recipes;
    }
    if (this.drain_elb_on_shutdown !== true) {
      ih['drain_elb_on_shutdown'] = this.drain_elb_on_shutdown;
    }
    if (this.ebs_volume !== null) {
      ih['ebs_volume'] = this.ebs_volume;
    }
    if (this.elastic_load_balancer !== null) {
      ih['elastic_load_balancer'] = this.elastic_load_balancer;
    }
    if (this.healthcheck_method !== 'OPTIONS') {
      ih['healthcheck_method'] = this.healthcheck_method;
    }
    if (this.healthcheck_url !== '/') {
      ih['healthcheck_url'] = this.healthcheck_url;
    }
    if (this.install_updates_on_boot !== true) {
      ih['install_updates_on_boot'] = this.install_updates_on_boot;
    }
    if (this.instance_shutdown_timeout !== 120) {
      ih['instance_shutdown_timeout'] = this.instance_shutdown_timeout;
    }
    if (this.name !== 'HAProxy') {
      ih['name'] = this.name;
    }
    if (this.stats_enabled !== true) {
      ih['stats_enabled'] = this.stats_enabled;
    }
    if (this.stats_url !== '/haproxy?stats') {
      ih['stats_url'] = this.stats_url;
    }
    if (this.stats_user !== 'opsworks') {
      ih['stats_user'] = this.stats_user;
    }
    if (this.system_packages !== null) {
      ih['system_packages'] = this.system_packages;
    }
    if (this.use_ebs_optimized_instances !== false) {
      ih['use_ebs_optimized_instances'] = this.use_ebs_optimized_instances;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Opsworks_haproxy_layer';
  }
}

export class Opsworks_instance implements PcoreValue {
  readonly layer_ids: string[];
  readonly stack_id: string;
  readonly opsworks_instance_id: string|null;
  readonly agent_version: string;
  readonly ami_id: string|null;
  readonly architecture: string;
  readonly auto_scaling_type: string|null;
  readonly availability_zone: string|null;
  readonly created_at: string|null;
  readonly delete_ebs: boolean;
  readonly delete_eip: boolean;
  readonly ebs_block_device: Anon339[]|null;
  readonly ebs_optimized: boolean;
  readonly ec2_instance_id: string|null;
  readonly ecs_cluster_arn: string|null;
  readonly elastic_ip: string|null;
  readonly ephemeral_block_device: Anon16[]|null;
  readonly hostname: string|null;
  readonly infrastructure_class: string|null;
  readonly install_updates_on_boot: boolean;
  readonly instance_profile_arn: string|null;
  readonly instance_type: string|null;
  readonly last_service_error_id: string|null;
  readonly os: string|null;
  readonly platform: string|null;
  readonly private_dns: string|null;
  readonly private_ip: string|null;
  readonly public_dns: string|null;
  readonly public_ip: string|null;
  readonly registered_by: string|null;
  readonly reported_agent_version: string|null;
  readonly reported_os_family: string|null;
  readonly reported_os_name: string|null;
  readonly reported_os_version: string|null;
  readonly root_block_device: Anon311[]|null;
  readonly root_device_type: string|null;
  readonly root_device_volume_id: string|null;
  readonly security_group_ids: string[]|null;
  readonly ssh_host_dsa_key_fingerprint: string|null;
  readonly ssh_host_rsa_key_fingerprint: string|null;
  readonly ssh_key_name: string|null;
  readonly state: string|null;
  readonly status: string|null;
  readonly subnet_id: string|null;
  readonly tenancy: string|null;
  readonly virtualization_type: string|null;

  constructor({
    layer_ids,
    stack_id,
    opsworks_instance_id = null,
    agent_version = 'INHERIT',
    ami_id = null,
    architecture = 'x86_64',
    auto_scaling_type = null,
    availability_zone = null,
    created_at = null,
    delete_ebs = true,
    delete_eip = true,
    ebs_block_device = null,
    ebs_optimized = false,
    ec2_instance_id = null,
    ecs_cluster_arn = null,
    elastic_ip = null,
    ephemeral_block_device = null,
    hostname = null,
    infrastructure_class = null,
    install_updates_on_boot = true,
    instance_profile_arn = null,
    instance_type = null,
    last_service_error_id = null,
    os = null,
    platform = null,
    private_dns = null,
    private_ip = null,
    public_dns = null,
    public_ip = null,
    registered_by = null,
    reported_agent_version = null,
    reported_os_family = null,
    reported_os_name = null,
    reported_os_version = null,
    root_block_device = null,
    root_device_type = null,
    root_device_volume_id = null,
    security_group_ids = null,
    ssh_host_dsa_key_fingerprint = null,
    ssh_host_rsa_key_fingerprint = null,
    ssh_key_name = null,
    state = null,
    status = null,
    subnet_id = null,
    tenancy = null,
    virtualization_type = null
  }: {
    layer_ids: string[],
    stack_id: string,
    opsworks_instance_id?: string|null,
    agent_version?: string,
    ami_id?: string|null,
    architecture?: string,
    auto_scaling_type?: string|null,
    availability_zone?: string|null,
    created_at?: string|null,
    delete_ebs?: boolean,
    delete_eip?: boolean,
    ebs_block_device?: Anon339[]|null,
    ebs_optimized?: boolean,
    ec2_instance_id?: string|null,
    ecs_cluster_arn?: string|null,
    elastic_ip?: string|null,
    ephemeral_block_device?: Anon16[]|null,
    hostname?: string|null,
    infrastructure_class?: string|null,
    install_updates_on_boot?: boolean,
    instance_profile_arn?: string|null,
    instance_type?: string|null,
    last_service_error_id?: string|null,
    os?: string|null,
    platform?: string|null,
    private_dns?: string|null,
    private_ip?: string|null,
    public_dns?: string|null,
    public_ip?: string|null,
    registered_by?: string|null,
    reported_agent_version?: string|null,
    reported_os_family?: string|null,
    reported_os_name?: string|null,
    reported_os_version?: string|null,
    root_block_device?: Anon311[]|null,
    root_device_type?: string|null,
    root_device_volume_id?: string|null,
    security_group_ids?: string[]|null,
    ssh_host_dsa_key_fingerprint?: string|null,
    ssh_host_rsa_key_fingerprint?: string|null,
    ssh_key_name?: string|null,
    state?: string|null,
    status?: string|null,
    subnet_id?: string|null,
    tenancy?: string|null,
    virtualization_type?: string|null
  }) {
    this.layer_ids = layer_ids;
    this.stack_id = stack_id;
    this.opsworks_instance_id = opsworks_instance_id;
    this.agent_version = agent_version;
    this.ami_id = ami_id;
    this.architecture = architecture;
    this.auto_scaling_type = auto_scaling_type;
    this.availability_zone = availability_zone;
    this.created_at = created_at;
    this.delete_ebs = delete_ebs;
    this.delete_eip = delete_eip;
    this.ebs_block_device = ebs_block_device;
    this.ebs_optimized = ebs_optimized;
    this.ec2_instance_id = ec2_instance_id;
    this.ecs_cluster_arn = ecs_cluster_arn;
    this.elastic_ip = elastic_ip;
    this.ephemeral_block_device = ephemeral_block_device;
    this.hostname = hostname;
    this.infrastructure_class = infrastructure_class;
    this.install_updates_on_boot = install_updates_on_boot;
    this.instance_profile_arn = instance_profile_arn;
    this.instance_type = instance_type;
    this.last_service_error_id = last_service_error_id;
    this.os = os;
    this.platform = platform;
    this.private_dns = private_dns;
    this.private_ip = private_ip;
    this.public_dns = public_dns;
    this.public_ip = public_ip;
    this.registered_by = registered_by;
    this.reported_agent_version = reported_agent_version;
    this.reported_os_family = reported_os_family;
    this.reported_os_name = reported_os_name;
    this.reported_os_version = reported_os_version;
    this.root_block_device = root_block_device;
    this.root_device_type = root_device_type;
    this.root_device_volume_id = root_device_volume_id;
    this.security_group_ids = security_group_ids;
    this.ssh_host_dsa_key_fingerprint = ssh_host_dsa_key_fingerprint;
    this.ssh_host_rsa_key_fingerprint = ssh_host_rsa_key_fingerprint;
    this.ssh_key_name = ssh_key_name;
    this.state = state;
    this.status = status;
    this.subnet_id = subnet_id;
    this.tenancy = tenancy;
    this.virtualization_type = virtualization_type;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['layer_ids'] = this.layer_ids;
    ih['stack_id'] = this.stack_id;
    if (this.opsworks_instance_id !== null) {
      ih['opsworks_instance_id'] = this.opsworks_instance_id;
    }
    if (this.agent_version !== 'INHERIT') {
      ih['agent_version'] = this.agent_version;
    }
    if (this.ami_id !== null) {
      ih['ami_id'] = this.ami_id;
    }
    if (this.architecture !== 'x86_64') {
      ih['architecture'] = this.architecture;
    }
    if (this.auto_scaling_type !== null) {
      ih['auto_scaling_type'] = this.auto_scaling_type;
    }
    if (this.availability_zone !== null) {
      ih['availability_zone'] = this.availability_zone;
    }
    if (this.created_at !== null) {
      ih['created_at'] = this.created_at;
    }
    if (this.delete_ebs !== true) {
      ih['delete_ebs'] = this.delete_ebs;
    }
    if (this.delete_eip !== true) {
      ih['delete_eip'] = this.delete_eip;
    }
    if (this.ebs_block_device !== null) {
      ih['ebs_block_device'] = this.ebs_block_device;
    }
    if (this.ebs_optimized !== false) {
      ih['ebs_optimized'] = this.ebs_optimized;
    }
    if (this.ec2_instance_id !== null) {
      ih['ec2_instance_id'] = this.ec2_instance_id;
    }
    if (this.ecs_cluster_arn !== null) {
      ih['ecs_cluster_arn'] = this.ecs_cluster_arn;
    }
    if (this.elastic_ip !== null) {
      ih['elastic_ip'] = this.elastic_ip;
    }
    if (this.ephemeral_block_device !== null) {
      ih['ephemeral_block_device'] = this.ephemeral_block_device;
    }
    if (this.hostname !== null) {
      ih['hostname'] = this.hostname;
    }
    if (this.infrastructure_class !== null) {
      ih['infrastructure_class'] = this.infrastructure_class;
    }
    if (this.install_updates_on_boot !== true) {
      ih['install_updates_on_boot'] = this.install_updates_on_boot;
    }
    if (this.instance_profile_arn !== null) {
      ih['instance_profile_arn'] = this.instance_profile_arn;
    }
    if (this.instance_type !== null) {
      ih['instance_type'] = this.instance_type;
    }
    if (this.last_service_error_id !== null) {
      ih['last_service_error_id'] = this.last_service_error_id;
    }
    if (this.os !== null) {
      ih['os'] = this.os;
    }
    if (this.platform !== null) {
      ih['platform'] = this.platform;
    }
    if (this.private_dns !== null) {
      ih['private_dns'] = this.private_dns;
    }
    if (this.private_ip !== null) {
      ih['private_ip'] = this.private_ip;
    }
    if (this.public_dns !== null) {
      ih['public_dns'] = this.public_dns;
    }
    if (this.public_ip !== null) {
      ih['public_ip'] = this.public_ip;
    }
    if (this.registered_by !== null) {
      ih['registered_by'] = this.registered_by;
    }
    if (this.reported_agent_version !== null) {
      ih['reported_agent_version'] = this.reported_agent_version;
    }
    if (this.reported_os_family !== null) {
      ih['reported_os_family'] = this.reported_os_family;
    }
    if (this.reported_os_name !== null) {
      ih['reported_os_name'] = this.reported_os_name;
    }
    if (this.reported_os_version !== null) {
      ih['reported_os_version'] = this.reported_os_version;
    }
    if (this.root_block_device !== null) {
      ih['root_block_device'] = this.root_block_device;
    }
    if (this.root_device_type !== null) {
      ih['root_device_type'] = this.root_device_type;
    }
    if (this.root_device_volume_id !== null) {
      ih['root_device_volume_id'] = this.root_device_volume_id;
    }
    if (this.security_group_ids !== null) {
      ih['security_group_ids'] = this.security_group_ids;
    }
    if (this.ssh_host_dsa_key_fingerprint !== null) {
      ih['ssh_host_dsa_key_fingerprint'] = this.ssh_host_dsa_key_fingerprint;
    }
    if (this.ssh_host_rsa_key_fingerprint !== null) {
      ih['ssh_host_rsa_key_fingerprint'] = this.ssh_host_rsa_key_fingerprint;
    }
    if (this.ssh_key_name !== null) {
      ih['ssh_key_name'] = this.ssh_key_name;
    }
    if (this.state !== null) {
      ih['state'] = this.state;
    }
    if (this.status !== null) {
      ih['status'] = this.status;
    }
    if (this.subnet_id !== null) {
      ih['subnet_id'] = this.subnet_id;
    }
    if (this.tenancy !== null) {
      ih['tenancy'] = this.tenancy;
    }
    if (this.virtualization_type !== null) {
      ih['virtualization_type'] = this.virtualization_type;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Opsworks_instance';
  }
}

export class Opsworks_java_app_layer implements PcoreValue {
  readonly stack_id: string;
  readonly opsworks_java_app_layer_id: string|null;
  readonly app_server: string;
  readonly app_server_version: string;
  readonly auto_assign_elastic_ips: boolean;
  readonly auto_assign_public_ips: boolean;
  readonly auto_healing: boolean;
  readonly custom_configure_recipes: string[]|null;
  readonly custom_deploy_recipes: string[]|null;
  readonly custom_instance_profile_arn: string|null;
  readonly custom_json: string|null;
  readonly custom_security_group_ids: string[]|null;
  readonly custom_setup_recipes: string[]|null;
  readonly custom_shutdown_recipes: string[]|null;
  readonly custom_undeploy_recipes: string[]|null;
  readonly drain_elb_on_shutdown: boolean;
  readonly ebs_volume: Anon338[]|null;
  readonly elastic_load_balancer: string|null;
  readonly install_updates_on_boot: boolean;
  readonly instance_shutdown_timeout: number;
  readonly jvm_options: string;
  readonly jvm_type: string;
  readonly jvm_version: string;
  readonly name: string;
  readonly system_packages: string[]|null;
  readonly use_ebs_optimized_instances: boolean;

  constructor({
    stack_id,
    opsworks_java_app_layer_id = null,
    app_server = 'tomcat',
    app_server_version = '7',
    auto_assign_elastic_ips = false,
    auto_assign_public_ips = false,
    auto_healing = true,
    custom_configure_recipes = null,
    custom_deploy_recipes = null,
    custom_instance_profile_arn = null,
    custom_json = null,
    custom_security_group_ids = null,
    custom_setup_recipes = null,
    custom_shutdown_recipes = null,
    custom_undeploy_recipes = null,
    drain_elb_on_shutdown = true,
    ebs_volume = null,
    elastic_load_balancer = null,
    install_updates_on_boot = true,
    instance_shutdown_timeout = 120,
    jvm_options = '',
    jvm_type = 'openjdk',
    jvm_version = '7',
    name = 'Java App Server',
    system_packages = null,
    use_ebs_optimized_instances = false
  }: {
    stack_id: string,
    opsworks_java_app_layer_id?: string|null,
    app_server?: string,
    app_server_version?: string,
    auto_assign_elastic_ips?: boolean,
    auto_assign_public_ips?: boolean,
    auto_healing?: boolean,
    custom_configure_recipes?: string[]|null,
    custom_deploy_recipes?: string[]|null,
    custom_instance_profile_arn?: string|null,
    custom_json?: string|null,
    custom_security_group_ids?: string[]|null,
    custom_setup_recipes?: string[]|null,
    custom_shutdown_recipes?: string[]|null,
    custom_undeploy_recipes?: string[]|null,
    drain_elb_on_shutdown?: boolean,
    ebs_volume?: Anon338[]|null,
    elastic_load_balancer?: string|null,
    install_updates_on_boot?: boolean,
    instance_shutdown_timeout?: number,
    jvm_options?: string,
    jvm_type?: string,
    jvm_version?: string,
    name?: string,
    system_packages?: string[]|null,
    use_ebs_optimized_instances?: boolean
  }) {
    this.stack_id = stack_id;
    this.opsworks_java_app_layer_id = opsworks_java_app_layer_id;
    this.app_server = app_server;
    this.app_server_version = app_server_version;
    this.auto_assign_elastic_ips = auto_assign_elastic_ips;
    this.auto_assign_public_ips = auto_assign_public_ips;
    this.auto_healing = auto_healing;
    this.custom_configure_recipes = custom_configure_recipes;
    this.custom_deploy_recipes = custom_deploy_recipes;
    this.custom_instance_profile_arn = custom_instance_profile_arn;
    this.custom_json = custom_json;
    this.custom_security_group_ids = custom_security_group_ids;
    this.custom_setup_recipes = custom_setup_recipes;
    this.custom_shutdown_recipes = custom_shutdown_recipes;
    this.custom_undeploy_recipes = custom_undeploy_recipes;
    this.drain_elb_on_shutdown = drain_elb_on_shutdown;
    this.ebs_volume = ebs_volume;
    this.elastic_load_balancer = elastic_load_balancer;
    this.install_updates_on_boot = install_updates_on_boot;
    this.instance_shutdown_timeout = instance_shutdown_timeout;
    this.jvm_options = jvm_options;
    this.jvm_type = jvm_type;
    this.jvm_version = jvm_version;
    this.name = name;
    this.system_packages = system_packages;
    this.use_ebs_optimized_instances = use_ebs_optimized_instances;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['stack_id'] = this.stack_id;
    if (this.opsworks_java_app_layer_id !== null) {
      ih['opsworks_java_app_layer_id'] = this.opsworks_java_app_layer_id;
    }
    if (this.app_server !== 'tomcat') {
      ih['app_server'] = this.app_server;
    }
    if (this.app_server_version !== '7') {
      ih['app_server_version'] = this.app_server_version;
    }
    if (this.auto_assign_elastic_ips !== false) {
      ih['auto_assign_elastic_ips'] = this.auto_assign_elastic_ips;
    }
    if (this.auto_assign_public_ips !== false) {
      ih['auto_assign_public_ips'] = this.auto_assign_public_ips;
    }
    if (this.auto_healing !== true) {
      ih['auto_healing'] = this.auto_healing;
    }
    if (this.custom_configure_recipes !== null) {
      ih['custom_configure_recipes'] = this.custom_configure_recipes;
    }
    if (this.custom_deploy_recipes !== null) {
      ih['custom_deploy_recipes'] = this.custom_deploy_recipes;
    }
    if (this.custom_instance_profile_arn !== null) {
      ih['custom_instance_profile_arn'] = this.custom_instance_profile_arn;
    }
    if (this.custom_json !== null) {
      ih['custom_json'] = this.custom_json;
    }
    if (this.custom_security_group_ids !== null) {
      ih['custom_security_group_ids'] = this.custom_security_group_ids;
    }
    if (this.custom_setup_recipes !== null) {
      ih['custom_setup_recipes'] = this.custom_setup_recipes;
    }
    if (this.custom_shutdown_recipes !== null) {
      ih['custom_shutdown_recipes'] = this.custom_shutdown_recipes;
    }
    if (this.custom_undeploy_recipes !== null) {
      ih['custom_undeploy_recipes'] = this.custom_undeploy_recipes;
    }
    if (this.drain_elb_on_shutdown !== true) {
      ih['drain_elb_on_shutdown'] = this.drain_elb_on_shutdown;
    }
    if (this.ebs_volume !== null) {
      ih['ebs_volume'] = this.ebs_volume;
    }
    if (this.elastic_load_balancer !== null) {
      ih['elastic_load_balancer'] = this.elastic_load_balancer;
    }
    if (this.install_updates_on_boot !== true) {
      ih['install_updates_on_boot'] = this.install_updates_on_boot;
    }
    if (this.instance_shutdown_timeout !== 120) {
      ih['instance_shutdown_timeout'] = this.instance_shutdown_timeout;
    }
    if (this.jvm_options !== '') {
      ih['jvm_options'] = this.jvm_options;
    }
    if (this.jvm_type !== 'openjdk') {
      ih['jvm_type'] = this.jvm_type;
    }
    if (this.jvm_version !== '7') {
      ih['jvm_version'] = this.jvm_version;
    }
    if (this.name !== 'Java App Server') {
      ih['name'] = this.name;
    }
    if (this.system_packages !== null) {
      ih['system_packages'] = this.system_packages;
    }
    if (this.use_ebs_optimized_instances !== false) {
      ih['use_ebs_optimized_instances'] = this.use_ebs_optimized_instances;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Opsworks_java_app_layer';
  }
}

export class Opsworks_memcached_layer implements PcoreValue {
  readonly stack_id: string;
  readonly opsworks_memcached_layer_id: string|null;
  readonly allocated_memory: number;
  readonly auto_assign_elastic_ips: boolean;
  readonly auto_assign_public_ips: boolean;
  readonly auto_healing: boolean;
  readonly custom_configure_recipes: string[]|null;
  readonly custom_deploy_recipes: string[]|null;
  readonly custom_instance_profile_arn: string|null;
  readonly custom_json: string|null;
  readonly custom_security_group_ids: string[]|null;
  readonly custom_setup_recipes: string[]|null;
  readonly custom_shutdown_recipes: string[]|null;
  readonly custom_undeploy_recipes: string[]|null;
  readonly drain_elb_on_shutdown: boolean;
  readonly ebs_volume: Anon338[]|null;
  readonly elastic_load_balancer: string|null;
  readonly install_updates_on_boot: boolean;
  readonly instance_shutdown_timeout: number;
  readonly name: string;
  readonly system_packages: string[]|null;
  readonly use_ebs_optimized_instances: boolean;

  constructor({
    stack_id,
    opsworks_memcached_layer_id = null,
    allocated_memory = 512,
    auto_assign_elastic_ips = false,
    auto_assign_public_ips = false,
    auto_healing = true,
    custom_configure_recipes = null,
    custom_deploy_recipes = null,
    custom_instance_profile_arn = null,
    custom_json = null,
    custom_security_group_ids = null,
    custom_setup_recipes = null,
    custom_shutdown_recipes = null,
    custom_undeploy_recipes = null,
    drain_elb_on_shutdown = true,
    ebs_volume = null,
    elastic_load_balancer = null,
    install_updates_on_boot = true,
    instance_shutdown_timeout = 120,
    name = 'Memcached',
    system_packages = null,
    use_ebs_optimized_instances = false
  }: {
    stack_id: string,
    opsworks_memcached_layer_id?: string|null,
    allocated_memory?: number,
    auto_assign_elastic_ips?: boolean,
    auto_assign_public_ips?: boolean,
    auto_healing?: boolean,
    custom_configure_recipes?: string[]|null,
    custom_deploy_recipes?: string[]|null,
    custom_instance_profile_arn?: string|null,
    custom_json?: string|null,
    custom_security_group_ids?: string[]|null,
    custom_setup_recipes?: string[]|null,
    custom_shutdown_recipes?: string[]|null,
    custom_undeploy_recipes?: string[]|null,
    drain_elb_on_shutdown?: boolean,
    ebs_volume?: Anon338[]|null,
    elastic_load_balancer?: string|null,
    install_updates_on_boot?: boolean,
    instance_shutdown_timeout?: number,
    name?: string,
    system_packages?: string[]|null,
    use_ebs_optimized_instances?: boolean
  }) {
    this.stack_id = stack_id;
    this.opsworks_memcached_layer_id = opsworks_memcached_layer_id;
    this.allocated_memory = allocated_memory;
    this.auto_assign_elastic_ips = auto_assign_elastic_ips;
    this.auto_assign_public_ips = auto_assign_public_ips;
    this.auto_healing = auto_healing;
    this.custom_configure_recipes = custom_configure_recipes;
    this.custom_deploy_recipes = custom_deploy_recipes;
    this.custom_instance_profile_arn = custom_instance_profile_arn;
    this.custom_json = custom_json;
    this.custom_security_group_ids = custom_security_group_ids;
    this.custom_setup_recipes = custom_setup_recipes;
    this.custom_shutdown_recipes = custom_shutdown_recipes;
    this.custom_undeploy_recipes = custom_undeploy_recipes;
    this.drain_elb_on_shutdown = drain_elb_on_shutdown;
    this.ebs_volume = ebs_volume;
    this.elastic_load_balancer = elastic_load_balancer;
    this.install_updates_on_boot = install_updates_on_boot;
    this.instance_shutdown_timeout = instance_shutdown_timeout;
    this.name = name;
    this.system_packages = system_packages;
    this.use_ebs_optimized_instances = use_ebs_optimized_instances;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['stack_id'] = this.stack_id;
    if (this.opsworks_memcached_layer_id !== null) {
      ih['opsworks_memcached_layer_id'] = this.opsworks_memcached_layer_id;
    }
    if (this.allocated_memory !== 512) {
      ih['allocated_memory'] = this.allocated_memory;
    }
    if (this.auto_assign_elastic_ips !== false) {
      ih['auto_assign_elastic_ips'] = this.auto_assign_elastic_ips;
    }
    if (this.auto_assign_public_ips !== false) {
      ih['auto_assign_public_ips'] = this.auto_assign_public_ips;
    }
    if (this.auto_healing !== true) {
      ih['auto_healing'] = this.auto_healing;
    }
    if (this.custom_configure_recipes !== null) {
      ih['custom_configure_recipes'] = this.custom_configure_recipes;
    }
    if (this.custom_deploy_recipes !== null) {
      ih['custom_deploy_recipes'] = this.custom_deploy_recipes;
    }
    if (this.custom_instance_profile_arn !== null) {
      ih['custom_instance_profile_arn'] = this.custom_instance_profile_arn;
    }
    if (this.custom_json !== null) {
      ih['custom_json'] = this.custom_json;
    }
    if (this.custom_security_group_ids !== null) {
      ih['custom_security_group_ids'] = this.custom_security_group_ids;
    }
    if (this.custom_setup_recipes !== null) {
      ih['custom_setup_recipes'] = this.custom_setup_recipes;
    }
    if (this.custom_shutdown_recipes !== null) {
      ih['custom_shutdown_recipes'] = this.custom_shutdown_recipes;
    }
    if (this.custom_undeploy_recipes !== null) {
      ih['custom_undeploy_recipes'] = this.custom_undeploy_recipes;
    }
    if (this.drain_elb_on_shutdown !== true) {
      ih['drain_elb_on_shutdown'] = this.drain_elb_on_shutdown;
    }
    if (this.ebs_volume !== null) {
      ih['ebs_volume'] = this.ebs_volume;
    }
    if (this.elastic_load_balancer !== null) {
      ih['elastic_load_balancer'] = this.elastic_load_balancer;
    }
    if (this.install_updates_on_boot !== true) {
      ih['install_updates_on_boot'] = this.install_updates_on_boot;
    }
    if (this.instance_shutdown_timeout !== 120) {
      ih['instance_shutdown_timeout'] = this.instance_shutdown_timeout;
    }
    if (this.name !== 'Memcached') {
      ih['name'] = this.name;
    }
    if (this.system_packages !== null) {
      ih['system_packages'] = this.system_packages;
    }
    if (this.use_ebs_optimized_instances !== false) {
      ih['use_ebs_optimized_instances'] = this.use_ebs_optimized_instances;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Opsworks_memcached_layer';
  }
}

export class Opsworks_mysql_layer implements PcoreValue {
  readonly stack_id: string;
  readonly opsworks_mysql_layer_id: string|null;
  readonly auto_assign_elastic_ips: boolean;
  readonly auto_assign_public_ips: boolean;
  readonly auto_healing: boolean;
  readonly custom_configure_recipes: string[]|null;
  readonly custom_deploy_recipes: string[]|null;
  readonly custom_instance_profile_arn: string|null;
  readonly custom_json: string|null;
  readonly custom_security_group_ids: string[]|null;
  readonly custom_setup_recipes: string[]|null;
  readonly custom_shutdown_recipes: string[]|null;
  readonly custom_undeploy_recipes: string[]|null;
  readonly drain_elb_on_shutdown: boolean;
  readonly ebs_volume: Anon338[]|null;
  readonly elastic_load_balancer: string|null;
  readonly install_updates_on_boot: boolean;
  readonly instance_shutdown_timeout: number;
  readonly name: string;
  readonly root_password: string|null;
  readonly root_password_on_all_instances: boolean;
  readonly system_packages: string[]|null;
  readonly use_ebs_optimized_instances: boolean;

  constructor({
    stack_id,
    opsworks_mysql_layer_id = null,
    auto_assign_elastic_ips = false,
    auto_assign_public_ips = false,
    auto_healing = true,
    custom_configure_recipes = null,
    custom_deploy_recipes = null,
    custom_instance_profile_arn = null,
    custom_json = null,
    custom_security_group_ids = null,
    custom_setup_recipes = null,
    custom_shutdown_recipes = null,
    custom_undeploy_recipes = null,
    drain_elb_on_shutdown = true,
    ebs_volume = null,
    elastic_load_balancer = null,
    install_updates_on_boot = true,
    instance_shutdown_timeout = 120,
    name = 'MySQL',
    root_password = null,
    root_password_on_all_instances = true,
    system_packages = null,
    use_ebs_optimized_instances = false
  }: {
    stack_id: string,
    opsworks_mysql_layer_id?: string|null,
    auto_assign_elastic_ips?: boolean,
    auto_assign_public_ips?: boolean,
    auto_healing?: boolean,
    custom_configure_recipes?: string[]|null,
    custom_deploy_recipes?: string[]|null,
    custom_instance_profile_arn?: string|null,
    custom_json?: string|null,
    custom_security_group_ids?: string[]|null,
    custom_setup_recipes?: string[]|null,
    custom_shutdown_recipes?: string[]|null,
    custom_undeploy_recipes?: string[]|null,
    drain_elb_on_shutdown?: boolean,
    ebs_volume?: Anon338[]|null,
    elastic_load_balancer?: string|null,
    install_updates_on_boot?: boolean,
    instance_shutdown_timeout?: number,
    name?: string,
    root_password?: string|null,
    root_password_on_all_instances?: boolean,
    system_packages?: string[]|null,
    use_ebs_optimized_instances?: boolean
  }) {
    this.stack_id = stack_id;
    this.opsworks_mysql_layer_id = opsworks_mysql_layer_id;
    this.auto_assign_elastic_ips = auto_assign_elastic_ips;
    this.auto_assign_public_ips = auto_assign_public_ips;
    this.auto_healing = auto_healing;
    this.custom_configure_recipes = custom_configure_recipes;
    this.custom_deploy_recipes = custom_deploy_recipes;
    this.custom_instance_profile_arn = custom_instance_profile_arn;
    this.custom_json = custom_json;
    this.custom_security_group_ids = custom_security_group_ids;
    this.custom_setup_recipes = custom_setup_recipes;
    this.custom_shutdown_recipes = custom_shutdown_recipes;
    this.custom_undeploy_recipes = custom_undeploy_recipes;
    this.drain_elb_on_shutdown = drain_elb_on_shutdown;
    this.ebs_volume = ebs_volume;
    this.elastic_load_balancer = elastic_load_balancer;
    this.install_updates_on_boot = install_updates_on_boot;
    this.instance_shutdown_timeout = instance_shutdown_timeout;
    this.name = name;
    this.root_password = root_password;
    this.root_password_on_all_instances = root_password_on_all_instances;
    this.system_packages = system_packages;
    this.use_ebs_optimized_instances = use_ebs_optimized_instances;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['stack_id'] = this.stack_id;
    if (this.opsworks_mysql_layer_id !== null) {
      ih['opsworks_mysql_layer_id'] = this.opsworks_mysql_layer_id;
    }
    if (this.auto_assign_elastic_ips !== false) {
      ih['auto_assign_elastic_ips'] = this.auto_assign_elastic_ips;
    }
    if (this.auto_assign_public_ips !== false) {
      ih['auto_assign_public_ips'] = this.auto_assign_public_ips;
    }
    if (this.auto_healing !== true) {
      ih['auto_healing'] = this.auto_healing;
    }
    if (this.custom_configure_recipes !== null) {
      ih['custom_configure_recipes'] = this.custom_configure_recipes;
    }
    if (this.custom_deploy_recipes !== null) {
      ih['custom_deploy_recipes'] = this.custom_deploy_recipes;
    }
    if (this.custom_instance_profile_arn !== null) {
      ih['custom_instance_profile_arn'] = this.custom_instance_profile_arn;
    }
    if (this.custom_json !== null) {
      ih['custom_json'] = this.custom_json;
    }
    if (this.custom_security_group_ids !== null) {
      ih['custom_security_group_ids'] = this.custom_security_group_ids;
    }
    if (this.custom_setup_recipes !== null) {
      ih['custom_setup_recipes'] = this.custom_setup_recipes;
    }
    if (this.custom_shutdown_recipes !== null) {
      ih['custom_shutdown_recipes'] = this.custom_shutdown_recipes;
    }
    if (this.custom_undeploy_recipes !== null) {
      ih['custom_undeploy_recipes'] = this.custom_undeploy_recipes;
    }
    if (this.drain_elb_on_shutdown !== true) {
      ih['drain_elb_on_shutdown'] = this.drain_elb_on_shutdown;
    }
    if (this.ebs_volume !== null) {
      ih['ebs_volume'] = this.ebs_volume;
    }
    if (this.elastic_load_balancer !== null) {
      ih['elastic_load_balancer'] = this.elastic_load_balancer;
    }
    if (this.install_updates_on_boot !== true) {
      ih['install_updates_on_boot'] = this.install_updates_on_boot;
    }
    if (this.instance_shutdown_timeout !== 120) {
      ih['instance_shutdown_timeout'] = this.instance_shutdown_timeout;
    }
    if (this.name !== 'MySQL') {
      ih['name'] = this.name;
    }
    if (this.root_password !== null) {
      ih['root_password'] = this.root_password;
    }
    if (this.root_password_on_all_instances !== true) {
      ih['root_password_on_all_instances'] = this.root_password_on_all_instances;
    }
    if (this.system_packages !== null) {
      ih['system_packages'] = this.system_packages;
    }
    if (this.use_ebs_optimized_instances !== false) {
      ih['use_ebs_optimized_instances'] = this.use_ebs_optimized_instances;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Opsworks_mysql_layer';
  }
}

export class Opsworks_nodejs_app_layer implements PcoreValue {
  readonly stack_id: string;
  readonly opsworks_nodejs_app_layer_id: string|null;
  readonly auto_assign_elastic_ips: boolean;
  readonly auto_assign_public_ips: boolean;
  readonly auto_healing: boolean;
  readonly custom_configure_recipes: string[]|null;
  readonly custom_deploy_recipes: string[]|null;
  readonly custom_instance_profile_arn: string|null;
  readonly custom_json: string|null;
  readonly custom_security_group_ids: string[]|null;
  readonly custom_setup_recipes: string[]|null;
  readonly custom_shutdown_recipes: string[]|null;
  readonly custom_undeploy_recipes: string[]|null;
  readonly drain_elb_on_shutdown: boolean;
  readonly ebs_volume: Anon338[]|null;
  readonly elastic_load_balancer: string|null;
  readonly install_updates_on_boot: boolean;
  readonly instance_shutdown_timeout: number;
  readonly name: string;
  readonly nodejs_version: string;
  readonly system_packages: string[]|null;
  readonly use_ebs_optimized_instances: boolean;

  constructor({
    stack_id,
    opsworks_nodejs_app_layer_id = null,
    auto_assign_elastic_ips = false,
    auto_assign_public_ips = false,
    auto_healing = true,
    custom_configure_recipes = null,
    custom_deploy_recipes = null,
    custom_instance_profile_arn = null,
    custom_json = null,
    custom_security_group_ids = null,
    custom_setup_recipes = null,
    custom_shutdown_recipes = null,
    custom_undeploy_recipes = null,
    drain_elb_on_shutdown = true,
    ebs_volume = null,
    elastic_load_balancer = null,
    install_updates_on_boot = true,
    instance_shutdown_timeout = 120,
    name = 'Node.js App Server',
    nodejs_version = '0.10.38',
    system_packages = null,
    use_ebs_optimized_instances = false
  }: {
    stack_id: string,
    opsworks_nodejs_app_layer_id?: string|null,
    auto_assign_elastic_ips?: boolean,
    auto_assign_public_ips?: boolean,
    auto_healing?: boolean,
    custom_configure_recipes?: string[]|null,
    custom_deploy_recipes?: string[]|null,
    custom_instance_profile_arn?: string|null,
    custom_json?: string|null,
    custom_security_group_ids?: string[]|null,
    custom_setup_recipes?: string[]|null,
    custom_shutdown_recipes?: string[]|null,
    custom_undeploy_recipes?: string[]|null,
    drain_elb_on_shutdown?: boolean,
    ebs_volume?: Anon338[]|null,
    elastic_load_balancer?: string|null,
    install_updates_on_boot?: boolean,
    instance_shutdown_timeout?: number,
    name?: string,
    nodejs_version?: string,
    system_packages?: string[]|null,
    use_ebs_optimized_instances?: boolean
  }) {
    this.stack_id = stack_id;
    this.opsworks_nodejs_app_layer_id = opsworks_nodejs_app_layer_id;
    this.auto_assign_elastic_ips = auto_assign_elastic_ips;
    this.auto_assign_public_ips = auto_assign_public_ips;
    this.auto_healing = auto_healing;
    this.custom_configure_recipes = custom_configure_recipes;
    this.custom_deploy_recipes = custom_deploy_recipes;
    this.custom_instance_profile_arn = custom_instance_profile_arn;
    this.custom_json = custom_json;
    this.custom_security_group_ids = custom_security_group_ids;
    this.custom_setup_recipes = custom_setup_recipes;
    this.custom_shutdown_recipes = custom_shutdown_recipes;
    this.custom_undeploy_recipes = custom_undeploy_recipes;
    this.drain_elb_on_shutdown = drain_elb_on_shutdown;
    this.ebs_volume = ebs_volume;
    this.elastic_load_balancer = elastic_load_balancer;
    this.install_updates_on_boot = install_updates_on_boot;
    this.instance_shutdown_timeout = instance_shutdown_timeout;
    this.name = name;
    this.nodejs_version = nodejs_version;
    this.system_packages = system_packages;
    this.use_ebs_optimized_instances = use_ebs_optimized_instances;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['stack_id'] = this.stack_id;
    if (this.opsworks_nodejs_app_layer_id !== null) {
      ih['opsworks_nodejs_app_layer_id'] = this.opsworks_nodejs_app_layer_id;
    }
    if (this.auto_assign_elastic_ips !== false) {
      ih['auto_assign_elastic_ips'] = this.auto_assign_elastic_ips;
    }
    if (this.auto_assign_public_ips !== false) {
      ih['auto_assign_public_ips'] = this.auto_assign_public_ips;
    }
    if (this.auto_healing !== true) {
      ih['auto_healing'] = this.auto_healing;
    }
    if (this.custom_configure_recipes !== null) {
      ih['custom_configure_recipes'] = this.custom_configure_recipes;
    }
    if (this.custom_deploy_recipes !== null) {
      ih['custom_deploy_recipes'] = this.custom_deploy_recipes;
    }
    if (this.custom_instance_profile_arn !== null) {
      ih['custom_instance_profile_arn'] = this.custom_instance_profile_arn;
    }
    if (this.custom_json !== null) {
      ih['custom_json'] = this.custom_json;
    }
    if (this.custom_security_group_ids !== null) {
      ih['custom_security_group_ids'] = this.custom_security_group_ids;
    }
    if (this.custom_setup_recipes !== null) {
      ih['custom_setup_recipes'] = this.custom_setup_recipes;
    }
    if (this.custom_shutdown_recipes !== null) {
      ih['custom_shutdown_recipes'] = this.custom_shutdown_recipes;
    }
    if (this.custom_undeploy_recipes !== null) {
      ih['custom_undeploy_recipes'] = this.custom_undeploy_recipes;
    }
    if (this.drain_elb_on_shutdown !== true) {
      ih['drain_elb_on_shutdown'] = this.drain_elb_on_shutdown;
    }
    if (this.ebs_volume !== null) {
      ih['ebs_volume'] = this.ebs_volume;
    }
    if (this.elastic_load_balancer !== null) {
      ih['elastic_load_balancer'] = this.elastic_load_balancer;
    }
    if (this.install_updates_on_boot !== true) {
      ih['install_updates_on_boot'] = this.install_updates_on_boot;
    }
    if (this.instance_shutdown_timeout !== 120) {
      ih['instance_shutdown_timeout'] = this.instance_shutdown_timeout;
    }
    if (this.name !== 'Node.js App Server') {
      ih['name'] = this.name;
    }
    if (this.nodejs_version !== '0.10.38') {
      ih['nodejs_version'] = this.nodejs_version;
    }
    if (this.system_packages !== null) {
      ih['system_packages'] = this.system_packages;
    }
    if (this.use_ebs_optimized_instances !== false) {
      ih['use_ebs_optimized_instances'] = this.use_ebs_optimized_instances;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Opsworks_nodejs_app_layer';
  }
}

export class Opsworks_permission implements PcoreValue {
  readonly user_arn: string;
  readonly opsworks_permission_id: string|null;
  readonly allow_ssh: boolean|null;
  readonly allow_sudo: boolean|null;
  readonly level: string|null;
  readonly stack_id: string|null;

  constructor({
    user_arn,
    opsworks_permission_id = null,
    allow_ssh = null,
    allow_sudo = null,
    level = null,
    stack_id = null
  }: {
    user_arn: string,
    opsworks_permission_id?: string|null,
    allow_ssh?: boolean|null,
    allow_sudo?: boolean|null,
    level?: string|null,
    stack_id?: string|null
  }) {
    this.user_arn = user_arn;
    this.opsworks_permission_id = opsworks_permission_id;
    this.allow_ssh = allow_ssh;
    this.allow_sudo = allow_sudo;
    this.level = level;
    this.stack_id = stack_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['user_arn'] = this.user_arn;
    if (this.opsworks_permission_id !== null) {
      ih['opsworks_permission_id'] = this.opsworks_permission_id;
    }
    if (this.allow_ssh !== null) {
      ih['allow_ssh'] = this.allow_ssh;
    }
    if (this.allow_sudo !== null) {
      ih['allow_sudo'] = this.allow_sudo;
    }
    if (this.level !== null) {
      ih['level'] = this.level;
    }
    if (this.stack_id !== null) {
      ih['stack_id'] = this.stack_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Opsworks_permission';
  }
}

export class Opsworks_php_app_layer implements PcoreValue {
  readonly stack_id: string;
  readonly opsworks_php_app_layer_id: string|null;
  readonly auto_assign_elastic_ips: boolean;
  readonly auto_assign_public_ips: boolean;
  readonly auto_healing: boolean;
  readonly custom_configure_recipes: string[]|null;
  readonly custom_deploy_recipes: string[]|null;
  readonly custom_instance_profile_arn: string|null;
  readonly custom_json: string|null;
  readonly custom_security_group_ids: string[]|null;
  readonly custom_setup_recipes: string[]|null;
  readonly custom_shutdown_recipes: string[]|null;
  readonly custom_undeploy_recipes: string[]|null;
  readonly drain_elb_on_shutdown: boolean;
  readonly ebs_volume: Anon338[]|null;
  readonly elastic_load_balancer: string|null;
  readonly install_updates_on_boot: boolean;
  readonly instance_shutdown_timeout: number;
  readonly name: string;
  readonly system_packages: string[]|null;
  readonly use_ebs_optimized_instances: boolean;

  constructor({
    stack_id,
    opsworks_php_app_layer_id = null,
    auto_assign_elastic_ips = false,
    auto_assign_public_ips = false,
    auto_healing = true,
    custom_configure_recipes = null,
    custom_deploy_recipes = null,
    custom_instance_profile_arn = null,
    custom_json = null,
    custom_security_group_ids = null,
    custom_setup_recipes = null,
    custom_shutdown_recipes = null,
    custom_undeploy_recipes = null,
    drain_elb_on_shutdown = true,
    ebs_volume = null,
    elastic_load_balancer = null,
    install_updates_on_boot = true,
    instance_shutdown_timeout = 120,
    name = 'PHP App Server',
    system_packages = null,
    use_ebs_optimized_instances = false
  }: {
    stack_id: string,
    opsworks_php_app_layer_id?: string|null,
    auto_assign_elastic_ips?: boolean,
    auto_assign_public_ips?: boolean,
    auto_healing?: boolean,
    custom_configure_recipes?: string[]|null,
    custom_deploy_recipes?: string[]|null,
    custom_instance_profile_arn?: string|null,
    custom_json?: string|null,
    custom_security_group_ids?: string[]|null,
    custom_setup_recipes?: string[]|null,
    custom_shutdown_recipes?: string[]|null,
    custom_undeploy_recipes?: string[]|null,
    drain_elb_on_shutdown?: boolean,
    ebs_volume?: Anon338[]|null,
    elastic_load_balancer?: string|null,
    install_updates_on_boot?: boolean,
    instance_shutdown_timeout?: number,
    name?: string,
    system_packages?: string[]|null,
    use_ebs_optimized_instances?: boolean
  }) {
    this.stack_id = stack_id;
    this.opsworks_php_app_layer_id = opsworks_php_app_layer_id;
    this.auto_assign_elastic_ips = auto_assign_elastic_ips;
    this.auto_assign_public_ips = auto_assign_public_ips;
    this.auto_healing = auto_healing;
    this.custom_configure_recipes = custom_configure_recipes;
    this.custom_deploy_recipes = custom_deploy_recipes;
    this.custom_instance_profile_arn = custom_instance_profile_arn;
    this.custom_json = custom_json;
    this.custom_security_group_ids = custom_security_group_ids;
    this.custom_setup_recipes = custom_setup_recipes;
    this.custom_shutdown_recipes = custom_shutdown_recipes;
    this.custom_undeploy_recipes = custom_undeploy_recipes;
    this.drain_elb_on_shutdown = drain_elb_on_shutdown;
    this.ebs_volume = ebs_volume;
    this.elastic_load_balancer = elastic_load_balancer;
    this.install_updates_on_boot = install_updates_on_boot;
    this.instance_shutdown_timeout = instance_shutdown_timeout;
    this.name = name;
    this.system_packages = system_packages;
    this.use_ebs_optimized_instances = use_ebs_optimized_instances;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['stack_id'] = this.stack_id;
    if (this.opsworks_php_app_layer_id !== null) {
      ih['opsworks_php_app_layer_id'] = this.opsworks_php_app_layer_id;
    }
    if (this.auto_assign_elastic_ips !== false) {
      ih['auto_assign_elastic_ips'] = this.auto_assign_elastic_ips;
    }
    if (this.auto_assign_public_ips !== false) {
      ih['auto_assign_public_ips'] = this.auto_assign_public_ips;
    }
    if (this.auto_healing !== true) {
      ih['auto_healing'] = this.auto_healing;
    }
    if (this.custom_configure_recipes !== null) {
      ih['custom_configure_recipes'] = this.custom_configure_recipes;
    }
    if (this.custom_deploy_recipes !== null) {
      ih['custom_deploy_recipes'] = this.custom_deploy_recipes;
    }
    if (this.custom_instance_profile_arn !== null) {
      ih['custom_instance_profile_arn'] = this.custom_instance_profile_arn;
    }
    if (this.custom_json !== null) {
      ih['custom_json'] = this.custom_json;
    }
    if (this.custom_security_group_ids !== null) {
      ih['custom_security_group_ids'] = this.custom_security_group_ids;
    }
    if (this.custom_setup_recipes !== null) {
      ih['custom_setup_recipes'] = this.custom_setup_recipes;
    }
    if (this.custom_shutdown_recipes !== null) {
      ih['custom_shutdown_recipes'] = this.custom_shutdown_recipes;
    }
    if (this.custom_undeploy_recipes !== null) {
      ih['custom_undeploy_recipes'] = this.custom_undeploy_recipes;
    }
    if (this.drain_elb_on_shutdown !== true) {
      ih['drain_elb_on_shutdown'] = this.drain_elb_on_shutdown;
    }
    if (this.ebs_volume !== null) {
      ih['ebs_volume'] = this.ebs_volume;
    }
    if (this.elastic_load_balancer !== null) {
      ih['elastic_load_balancer'] = this.elastic_load_balancer;
    }
    if (this.install_updates_on_boot !== true) {
      ih['install_updates_on_boot'] = this.install_updates_on_boot;
    }
    if (this.instance_shutdown_timeout !== 120) {
      ih['instance_shutdown_timeout'] = this.instance_shutdown_timeout;
    }
    if (this.name !== 'PHP App Server') {
      ih['name'] = this.name;
    }
    if (this.system_packages !== null) {
      ih['system_packages'] = this.system_packages;
    }
    if (this.use_ebs_optimized_instances !== false) {
      ih['use_ebs_optimized_instances'] = this.use_ebs_optimized_instances;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Opsworks_php_app_layer';
  }
}

export class Opsworks_rails_app_layer implements PcoreValue {
  readonly stack_id: string;
  readonly opsworks_rails_app_layer_id: string|null;
  readonly app_server: string;
  readonly auto_assign_elastic_ips: boolean;
  readonly auto_assign_public_ips: boolean;
  readonly auto_healing: boolean;
  readonly bundler_version: string;
  readonly custom_configure_recipes: string[]|null;
  readonly custom_deploy_recipes: string[]|null;
  readonly custom_instance_profile_arn: string|null;
  readonly custom_json: string|null;
  readonly custom_security_group_ids: string[]|null;
  readonly custom_setup_recipes: string[]|null;
  readonly custom_shutdown_recipes: string[]|null;
  readonly custom_undeploy_recipes: string[]|null;
  readonly drain_elb_on_shutdown: boolean;
  readonly ebs_volume: Anon338[]|null;
  readonly elastic_load_balancer: string|null;
  readonly install_updates_on_boot: boolean;
  readonly instance_shutdown_timeout: number;
  readonly manage_bundler: boolean;
  readonly name: string;
  readonly passenger_version: string;
  readonly ruby_version: string;
  readonly rubygems_version: string;
  readonly system_packages: string[]|null;
  readonly use_ebs_optimized_instances: boolean;

  constructor({
    stack_id,
    opsworks_rails_app_layer_id = null,
    app_server = 'apache_passenger',
    auto_assign_elastic_ips = false,
    auto_assign_public_ips = false,
    auto_healing = true,
    bundler_version = '1.5.3',
    custom_configure_recipes = null,
    custom_deploy_recipes = null,
    custom_instance_profile_arn = null,
    custom_json = null,
    custom_security_group_ids = null,
    custom_setup_recipes = null,
    custom_shutdown_recipes = null,
    custom_undeploy_recipes = null,
    drain_elb_on_shutdown = true,
    ebs_volume = null,
    elastic_load_balancer = null,
    install_updates_on_boot = true,
    instance_shutdown_timeout = 120,
    manage_bundler = true,
    name = 'Rails App Server',
    passenger_version = '4.0.46',
    ruby_version = '2.0.0',
    rubygems_version = '2.2.2',
    system_packages = null,
    use_ebs_optimized_instances = false
  }: {
    stack_id: string,
    opsworks_rails_app_layer_id?: string|null,
    app_server?: string,
    auto_assign_elastic_ips?: boolean,
    auto_assign_public_ips?: boolean,
    auto_healing?: boolean,
    bundler_version?: string,
    custom_configure_recipes?: string[]|null,
    custom_deploy_recipes?: string[]|null,
    custom_instance_profile_arn?: string|null,
    custom_json?: string|null,
    custom_security_group_ids?: string[]|null,
    custom_setup_recipes?: string[]|null,
    custom_shutdown_recipes?: string[]|null,
    custom_undeploy_recipes?: string[]|null,
    drain_elb_on_shutdown?: boolean,
    ebs_volume?: Anon338[]|null,
    elastic_load_balancer?: string|null,
    install_updates_on_boot?: boolean,
    instance_shutdown_timeout?: number,
    manage_bundler?: boolean,
    name?: string,
    passenger_version?: string,
    ruby_version?: string,
    rubygems_version?: string,
    system_packages?: string[]|null,
    use_ebs_optimized_instances?: boolean
  }) {
    this.stack_id = stack_id;
    this.opsworks_rails_app_layer_id = opsworks_rails_app_layer_id;
    this.app_server = app_server;
    this.auto_assign_elastic_ips = auto_assign_elastic_ips;
    this.auto_assign_public_ips = auto_assign_public_ips;
    this.auto_healing = auto_healing;
    this.bundler_version = bundler_version;
    this.custom_configure_recipes = custom_configure_recipes;
    this.custom_deploy_recipes = custom_deploy_recipes;
    this.custom_instance_profile_arn = custom_instance_profile_arn;
    this.custom_json = custom_json;
    this.custom_security_group_ids = custom_security_group_ids;
    this.custom_setup_recipes = custom_setup_recipes;
    this.custom_shutdown_recipes = custom_shutdown_recipes;
    this.custom_undeploy_recipes = custom_undeploy_recipes;
    this.drain_elb_on_shutdown = drain_elb_on_shutdown;
    this.ebs_volume = ebs_volume;
    this.elastic_load_balancer = elastic_load_balancer;
    this.install_updates_on_boot = install_updates_on_boot;
    this.instance_shutdown_timeout = instance_shutdown_timeout;
    this.manage_bundler = manage_bundler;
    this.name = name;
    this.passenger_version = passenger_version;
    this.ruby_version = ruby_version;
    this.rubygems_version = rubygems_version;
    this.system_packages = system_packages;
    this.use_ebs_optimized_instances = use_ebs_optimized_instances;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['stack_id'] = this.stack_id;
    if (this.opsworks_rails_app_layer_id !== null) {
      ih['opsworks_rails_app_layer_id'] = this.opsworks_rails_app_layer_id;
    }
    if (this.app_server !== 'apache_passenger') {
      ih['app_server'] = this.app_server;
    }
    if (this.auto_assign_elastic_ips !== false) {
      ih['auto_assign_elastic_ips'] = this.auto_assign_elastic_ips;
    }
    if (this.auto_assign_public_ips !== false) {
      ih['auto_assign_public_ips'] = this.auto_assign_public_ips;
    }
    if (this.auto_healing !== true) {
      ih['auto_healing'] = this.auto_healing;
    }
    if (this.bundler_version !== '1.5.3') {
      ih['bundler_version'] = this.bundler_version;
    }
    if (this.custom_configure_recipes !== null) {
      ih['custom_configure_recipes'] = this.custom_configure_recipes;
    }
    if (this.custom_deploy_recipes !== null) {
      ih['custom_deploy_recipes'] = this.custom_deploy_recipes;
    }
    if (this.custom_instance_profile_arn !== null) {
      ih['custom_instance_profile_arn'] = this.custom_instance_profile_arn;
    }
    if (this.custom_json !== null) {
      ih['custom_json'] = this.custom_json;
    }
    if (this.custom_security_group_ids !== null) {
      ih['custom_security_group_ids'] = this.custom_security_group_ids;
    }
    if (this.custom_setup_recipes !== null) {
      ih['custom_setup_recipes'] = this.custom_setup_recipes;
    }
    if (this.custom_shutdown_recipes !== null) {
      ih['custom_shutdown_recipes'] = this.custom_shutdown_recipes;
    }
    if (this.custom_undeploy_recipes !== null) {
      ih['custom_undeploy_recipes'] = this.custom_undeploy_recipes;
    }
    if (this.drain_elb_on_shutdown !== true) {
      ih['drain_elb_on_shutdown'] = this.drain_elb_on_shutdown;
    }
    if (this.ebs_volume !== null) {
      ih['ebs_volume'] = this.ebs_volume;
    }
    if (this.elastic_load_balancer !== null) {
      ih['elastic_load_balancer'] = this.elastic_load_balancer;
    }
    if (this.install_updates_on_boot !== true) {
      ih['install_updates_on_boot'] = this.install_updates_on_boot;
    }
    if (this.instance_shutdown_timeout !== 120) {
      ih['instance_shutdown_timeout'] = this.instance_shutdown_timeout;
    }
    if (this.manage_bundler !== true) {
      ih['manage_bundler'] = this.manage_bundler;
    }
    if (this.name !== 'Rails App Server') {
      ih['name'] = this.name;
    }
    if (this.passenger_version !== '4.0.46') {
      ih['passenger_version'] = this.passenger_version;
    }
    if (this.ruby_version !== '2.0.0') {
      ih['ruby_version'] = this.ruby_version;
    }
    if (this.rubygems_version !== '2.2.2') {
      ih['rubygems_version'] = this.rubygems_version;
    }
    if (this.system_packages !== null) {
      ih['system_packages'] = this.system_packages;
    }
    if (this.use_ebs_optimized_instances !== false) {
      ih['use_ebs_optimized_instances'] = this.use_ebs_optimized_instances;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Opsworks_rails_app_layer';
  }
}

export class Opsworks_rds_db_instance implements PcoreValue {
  readonly db_password: string;
  readonly db_user: string;
  readonly rds_db_instance_arn: string;
  readonly stack_id: string;
  readonly opsworks_rds_db_instance_id: string|null;

  constructor({
    db_password,
    db_user,
    rds_db_instance_arn,
    stack_id,
    opsworks_rds_db_instance_id = null
  }: {
    db_password: string,
    db_user: string,
    rds_db_instance_arn: string,
    stack_id: string,
    opsworks_rds_db_instance_id?: string|null
  }) {
    this.db_password = db_password;
    this.db_user = db_user;
    this.rds_db_instance_arn = rds_db_instance_arn;
    this.stack_id = stack_id;
    this.opsworks_rds_db_instance_id = opsworks_rds_db_instance_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['db_password'] = this.db_password;
    ih['db_user'] = this.db_user;
    ih['rds_db_instance_arn'] = this.rds_db_instance_arn;
    ih['stack_id'] = this.stack_id;
    if (this.opsworks_rds_db_instance_id !== null) {
      ih['opsworks_rds_db_instance_id'] = this.opsworks_rds_db_instance_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Opsworks_rds_db_instance';
  }
}

export class Opsworks_stack implements PcoreValue {
  readonly default_instance_profile_arn: string;
  readonly name: string;
  readonly region: string;
  readonly service_role_arn: string;
  readonly opsworks_stack_id: string|null;
  readonly agent_version: string|null;
  readonly arn: string|null;
  readonly berkshelf_version: string;
  readonly color: string|null;
  readonly configuration_manager_name: string;
  readonly configuration_manager_version: string;
  readonly custom_cookbooks_source: Anon340[]|null;
  readonly custom_json: string|null;
  readonly default_availability_zone: string|null;
  readonly default_os: string;
  readonly default_root_device_type: string;
  readonly default_ssh_key_name: string|null;
  readonly default_subnet_id: string|null;
  readonly hostname_theme: string;
  readonly manage_berkshelf: boolean;
  readonly stack_endpoint: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly use_custom_cookbooks: boolean;
  readonly use_opsworks_security_groups: boolean;
  readonly vpc_id: string|null;

  constructor({
    default_instance_profile_arn,
    name,
    region,
    service_role_arn,
    opsworks_stack_id = null,
    agent_version = null,
    arn = null,
    berkshelf_version = '3.2.0',
    color = null,
    configuration_manager_name = 'Chef',
    configuration_manager_version = '11.10',
    custom_cookbooks_source = null,
    custom_json = null,
    default_availability_zone = null,
    default_os = 'Ubuntu 12.04 LTS',
    default_root_device_type = 'instance-store',
    default_ssh_key_name = null,
    default_subnet_id = null,
    hostname_theme = 'Layer_Dependent',
    manage_berkshelf = false,
    stack_endpoint = null,
    tags = null,
    use_custom_cookbooks = false,
    use_opsworks_security_groups = true,
    vpc_id = null
  }: {
    default_instance_profile_arn: string,
    name: string,
    region: string,
    service_role_arn: string,
    opsworks_stack_id?: string|null,
    agent_version?: string|null,
    arn?: string|null,
    berkshelf_version?: string,
    color?: string|null,
    configuration_manager_name?: string,
    configuration_manager_version?: string,
    custom_cookbooks_source?: Anon340[]|null,
    custom_json?: string|null,
    default_availability_zone?: string|null,
    default_os?: string,
    default_root_device_type?: string,
    default_ssh_key_name?: string|null,
    default_subnet_id?: string|null,
    hostname_theme?: string,
    manage_berkshelf?: boolean,
    stack_endpoint?: string|null,
    tags?: {[s: string]: string}|null,
    use_custom_cookbooks?: boolean,
    use_opsworks_security_groups?: boolean,
    vpc_id?: string|null
  }) {
    this.default_instance_profile_arn = default_instance_profile_arn;
    this.name = name;
    this.region = region;
    this.service_role_arn = service_role_arn;
    this.opsworks_stack_id = opsworks_stack_id;
    this.agent_version = agent_version;
    this.arn = arn;
    this.berkshelf_version = berkshelf_version;
    this.color = color;
    this.configuration_manager_name = configuration_manager_name;
    this.configuration_manager_version = configuration_manager_version;
    this.custom_cookbooks_source = custom_cookbooks_source;
    this.custom_json = custom_json;
    this.default_availability_zone = default_availability_zone;
    this.default_os = default_os;
    this.default_root_device_type = default_root_device_type;
    this.default_ssh_key_name = default_ssh_key_name;
    this.default_subnet_id = default_subnet_id;
    this.hostname_theme = hostname_theme;
    this.manage_berkshelf = manage_berkshelf;
    this.stack_endpoint = stack_endpoint;
    this.tags = tags;
    this.use_custom_cookbooks = use_custom_cookbooks;
    this.use_opsworks_security_groups = use_opsworks_security_groups;
    this.vpc_id = vpc_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['default_instance_profile_arn'] = this.default_instance_profile_arn;
    ih['name'] = this.name;
    ih['region'] = this.region;
    ih['service_role_arn'] = this.service_role_arn;
    if (this.opsworks_stack_id !== null) {
      ih['opsworks_stack_id'] = this.opsworks_stack_id;
    }
    if (this.agent_version !== null) {
      ih['agent_version'] = this.agent_version;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.berkshelf_version !== '3.2.0') {
      ih['berkshelf_version'] = this.berkshelf_version;
    }
    if (this.color !== null) {
      ih['color'] = this.color;
    }
    if (this.configuration_manager_name !== 'Chef') {
      ih['configuration_manager_name'] = this.configuration_manager_name;
    }
    if (this.configuration_manager_version !== '11.10') {
      ih['configuration_manager_version'] = this.configuration_manager_version;
    }
    if (this.custom_cookbooks_source !== null) {
      ih['custom_cookbooks_source'] = this.custom_cookbooks_source;
    }
    if (this.custom_json !== null) {
      ih['custom_json'] = this.custom_json;
    }
    if (this.default_availability_zone !== null) {
      ih['default_availability_zone'] = this.default_availability_zone;
    }
    if (this.default_os !== 'Ubuntu 12.04 LTS') {
      ih['default_os'] = this.default_os;
    }
    if (this.default_root_device_type !== 'instance-store') {
      ih['default_root_device_type'] = this.default_root_device_type;
    }
    if (this.default_ssh_key_name !== null) {
      ih['default_ssh_key_name'] = this.default_ssh_key_name;
    }
    if (this.default_subnet_id !== null) {
      ih['default_subnet_id'] = this.default_subnet_id;
    }
    if (this.hostname_theme !== 'Layer_Dependent') {
      ih['hostname_theme'] = this.hostname_theme;
    }
    if (this.manage_berkshelf !== false) {
      ih['manage_berkshelf'] = this.manage_berkshelf;
    }
    if (this.stack_endpoint !== null) {
      ih['stack_endpoint'] = this.stack_endpoint;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.use_custom_cookbooks !== false) {
      ih['use_custom_cookbooks'] = this.use_custom_cookbooks;
    }
    if (this.use_opsworks_security_groups !== true) {
      ih['use_opsworks_security_groups'] = this.use_opsworks_security_groups;
    }
    if (this.vpc_id !== null) {
      ih['vpc_id'] = this.vpc_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Opsworks_stack';
  }
}

export class Opsworks_static_web_layer implements PcoreValue {
  readonly stack_id: string;
  readonly opsworks_static_web_layer_id: string|null;
  readonly auto_assign_elastic_ips: boolean;
  readonly auto_assign_public_ips: boolean;
  readonly auto_healing: boolean;
  readonly custom_configure_recipes: string[]|null;
  readonly custom_deploy_recipes: string[]|null;
  readonly custom_instance_profile_arn: string|null;
  readonly custom_json: string|null;
  readonly custom_security_group_ids: string[]|null;
  readonly custom_setup_recipes: string[]|null;
  readonly custom_shutdown_recipes: string[]|null;
  readonly custom_undeploy_recipes: string[]|null;
  readonly drain_elb_on_shutdown: boolean;
  readonly ebs_volume: Anon338[]|null;
  readonly elastic_load_balancer: string|null;
  readonly install_updates_on_boot: boolean;
  readonly instance_shutdown_timeout: number;
  readonly name: string;
  readonly system_packages: string[]|null;
  readonly use_ebs_optimized_instances: boolean;

  constructor({
    stack_id,
    opsworks_static_web_layer_id = null,
    auto_assign_elastic_ips = false,
    auto_assign_public_ips = false,
    auto_healing = true,
    custom_configure_recipes = null,
    custom_deploy_recipes = null,
    custom_instance_profile_arn = null,
    custom_json = null,
    custom_security_group_ids = null,
    custom_setup_recipes = null,
    custom_shutdown_recipes = null,
    custom_undeploy_recipes = null,
    drain_elb_on_shutdown = true,
    ebs_volume = null,
    elastic_load_balancer = null,
    install_updates_on_boot = true,
    instance_shutdown_timeout = 120,
    name = 'Static Web Server',
    system_packages = null,
    use_ebs_optimized_instances = false
  }: {
    stack_id: string,
    opsworks_static_web_layer_id?: string|null,
    auto_assign_elastic_ips?: boolean,
    auto_assign_public_ips?: boolean,
    auto_healing?: boolean,
    custom_configure_recipes?: string[]|null,
    custom_deploy_recipes?: string[]|null,
    custom_instance_profile_arn?: string|null,
    custom_json?: string|null,
    custom_security_group_ids?: string[]|null,
    custom_setup_recipes?: string[]|null,
    custom_shutdown_recipes?: string[]|null,
    custom_undeploy_recipes?: string[]|null,
    drain_elb_on_shutdown?: boolean,
    ebs_volume?: Anon338[]|null,
    elastic_load_balancer?: string|null,
    install_updates_on_boot?: boolean,
    instance_shutdown_timeout?: number,
    name?: string,
    system_packages?: string[]|null,
    use_ebs_optimized_instances?: boolean
  }) {
    this.stack_id = stack_id;
    this.opsworks_static_web_layer_id = opsworks_static_web_layer_id;
    this.auto_assign_elastic_ips = auto_assign_elastic_ips;
    this.auto_assign_public_ips = auto_assign_public_ips;
    this.auto_healing = auto_healing;
    this.custom_configure_recipes = custom_configure_recipes;
    this.custom_deploy_recipes = custom_deploy_recipes;
    this.custom_instance_profile_arn = custom_instance_profile_arn;
    this.custom_json = custom_json;
    this.custom_security_group_ids = custom_security_group_ids;
    this.custom_setup_recipes = custom_setup_recipes;
    this.custom_shutdown_recipes = custom_shutdown_recipes;
    this.custom_undeploy_recipes = custom_undeploy_recipes;
    this.drain_elb_on_shutdown = drain_elb_on_shutdown;
    this.ebs_volume = ebs_volume;
    this.elastic_load_balancer = elastic_load_balancer;
    this.install_updates_on_boot = install_updates_on_boot;
    this.instance_shutdown_timeout = instance_shutdown_timeout;
    this.name = name;
    this.system_packages = system_packages;
    this.use_ebs_optimized_instances = use_ebs_optimized_instances;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['stack_id'] = this.stack_id;
    if (this.opsworks_static_web_layer_id !== null) {
      ih['opsworks_static_web_layer_id'] = this.opsworks_static_web_layer_id;
    }
    if (this.auto_assign_elastic_ips !== false) {
      ih['auto_assign_elastic_ips'] = this.auto_assign_elastic_ips;
    }
    if (this.auto_assign_public_ips !== false) {
      ih['auto_assign_public_ips'] = this.auto_assign_public_ips;
    }
    if (this.auto_healing !== true) {
      ih['auto_healing'] = this.auto_healing;
    }
    if (this.custom_configure_recipes !== null) {
      ih['custom_configure_recipes'] = this.custom_configure_recipes;
    }
    if (this.custom_deploy_recipes !== null) {
      ih['custom_deploy_recipes'] = this.custom_deploy_recipes;
    }
    if (this.custom_instance_profile_arn !== null) {
      ih['custom_instance_profile_arn'] = this.custom_instance_profile_arn;
    }
    if (this.custom_json !== null) {
      ih['custom_json'] = this.custom_json;
    }
    if (this.custom_security_group_ids !== null) {
      ih['custom_security_group_ids'] = this.custom_security_group_ids;
    }
    if (this.custom_setup_recipes !== null) {
      ih['custom_setup_recipes'] = this.custom_setup_recipes;
    }
    if (this.custom_shutdown_recipes !== null) {
      ih['custom_shutdown_recipes'] = this.custom_shutdown_recipes;
    }
    if (this.custom_undeploy_recipes !== null) {
      ih['custom_undeploy_recipes'] = this.custom_undeploy_recipes;
    }
    if (this.drain_elb_on_shutdown !== true) {
      ih['drain_elb_on_shutdown'] = this.drain_elb_on_shutdown;
    }
    if (this.ebs_volume !== null) {
      ih['ebs_volume'] = this.ebs_volume;
    }
    if (this.elastic_load_balancer !== null) {
      ih['elastic_load_balancer'] = this.elastic_load_balancer;
    }
    if (this.install_updates_on_boot !== true) {
      ih['install_updates_on_boot'] = this.install_updates_on_boot;
    }
    if (this.instance_shutdown_timeout !== 120) {
      ih['instance_shutdown_timeout'] = this.instance_shutdown_timeout;
    }
    if (this.name !== 'Static Web Server') {
      ih['name'] = this.name;
    }
    if (this.system_packages !== null) {
      ih['system_packages'] = this.system_packages;
    }
    if (this.use_ebs_optimized_instances !== false) {
      ih['use_ebs_optimized_instances'] = this.use_ebs_optimized_instances;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Opsworks_static_web_layer';
  }
}

export class Opsworks_user_profile implements PcoreValue {
  readonly ssh_username: string;
  readonly user_arn: string;
  readonly opsworks_user_profile_id: string|null;
  readonly allow_self_management: boolean;
  readonly ssh_public_key: string|null;

  constructor({
    ssh_username,
    user_arn,
    opsworks_user_profile_id = null,
    allow_self_management = false,
    ssh_public_key = null
  }: {
    ssh_username: string,
    user_arn: string,
    opsworks_user_profile_id?: string|null,
    allow_self_management?: boolean,
    ssh_public_key?: string|null
  }) {
    this.ssh_username = ssh_username;
    this.user_arn = user_arn;
    this.opsworks_user_profile_id = opsworks_user_profile_id;
    this.allow_self_management = allow_self_management;
    this.ssh_public_key = ssh_public_key;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['ssh_username'] = this.ssh_username;
    ih['user_arn'] = this.user_arn;
    if (this.opsworks_user_profile_id !== null) {
      ih['opsworks_user_profile_id'] = this.opsworks_user_profile_id;
    }
    if (this.allow_self_management !== false) {
      ih['allow_self_management'] = this.allow_self_management;
    }
    if (this.ssh_public_key !== null) {
      ih['ssh_public_key'] = this.ssh_public_key;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Opsworks_user_profile';
  }
}

export class Organizations_account implements PcoreValue {
  readonly email: string;
  readonly name: string;
  readonly organizations_account_id: string|null;
  readonly arn: string|null;
  readonly iam_user_access_to_billing: string|null;
  readonly joined_method: string|null;
  readonly joined_timestamp: string|null;
  readonly role_name: string|null;
  readonly status: string|null;

  constructor({
    email,
    name,
    organizations_account_id = null,
    arn = null,
    iam_user_access_to_billing = null,
    joined_method = null,
    joined_timestamp = null,
    role_name = null,
    status = null
  }: {
    email: string,
    name: string,
    organizations_account_id?: string|null,
    arn?: string|null,
    iam_user_access_to_billing?: string|null,
    joined_method?: string|null,
    joined_timestamp?: string|null,
    role_name?: string|null,
    status?: string|null
  }) {
    this.email = email;
    this.name = name;
    this.organizations_account_id = organizations_account_id;
    this.arn = arn;
    this.iam_user_access_to_billing = iam_user_access_to_billing;
    this.joined_method = joined_method;
    this.joined_timestamp = joined_timestamp;
    this.role_name = role_name;
    this.status = status;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['email'] = this.email;
    ih['name'] = this.name;
    if (this.organizations_account_id !== null) {
      ih['organizations_account_id'] = this.organizations_account_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.iam_user_access_to_billing !== null) {
      ih['iam_user_access_to_billing'] = this.iam_user_access_to_billing;
    }
    if (this.joined_method !== null) {
      ih['joined_method'] = this.joined_method;
    }
    if (this.joined_timestamp !== null) {
      ih['joined_timestamp'] = this.joined_timestamp;
    }
    if (this.role_name !== null) {
      ih['role_name'] = this.role_name;
    }
    if (this.status !== null) {
      ih['status'] = this.status;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Organizations_account';
  }
}

export class Organizations_organization implements PcoreValue {
  readonly organizations_organization_id: string|null;
  readonly arn: string|null;
  readonly aws_service_access_principals: string[]|null;
  readonly feature_set: string;
  readonly master_account_arn: string|null;
  readonly master_account_email: string|null;
  readonly master_account_id: string|null;

  constructor({
    organizations_organization_id = null,
    arn = null,
    aws_service_access_principals = null,
    feature_set = 'ALL',
    master_account_arn = null,
    master_account_email = null,
    master_account_id = null
  }: {
    organizations_organization_id?: string|null,
    arn?: string|null,
    aws_service_access_principals?: string[]|null,
    feature_set?: string,
    master_account_arn?: string|null,
    master_account_email?: string|null,
    master_account_id?: string|null
  }) {
    this.organizations_organization_id = organizations_organization_id;
    this.arn = arn;
    this.aws_service_access_principals = aws_service_access_principals;
    this.feature_set = feature_set;
    this.master_account_arn = master_account_arn;
    this.master_account_email = master_account_email;
    this.master_account_id = master_account_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.organizations_organization_id !== null) {
      ih['organizations_organization_id'] = this.organizations_organization_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.aws_service_access_principals !== null) {
      ih['aws_service_access_principals'] = this.aws_service_access_principals;
    }
    if (this.feature_set !== 'ALL') {
      ih['feature_set'] = this.feature_set;
    }
    if (this.master_account_arn !== null) {
      ih['master_account_arn'] = this.master_account_arn;
    }
    if (this.master_account_email !== null) {
      ih['master_account_email'] = this.master_account_email;
    }
    if (this.master_account_id !== null) {
      ih['master_account_id'] = this.master_account_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Organizations_organization';
  }
}

export class Organizations_policy implements PcoreValue {
  readonly content: string;
  readonly name: string;
  readonly organizations_policy_id: string|null;
  readonly arn: string|null;
  readonly description: string|null;
  readonly type: string;

  constructor({
    content,
    name,
    organizations_policy_id = null,
    arn = null,
    description = null,
    type = 'SERVICE_CONTROL_POLICY'
  }: {
    content: string,
    name: string,
    organizations_policy_id?: string|null,
    arn?: string|null,
    description?: string|null,
    type?: string
  }) {
    this.content = content;
    this.name = name;
    this.organizations_policy_id = organizations_policy_id;
    this.arn = arn;
    this.description = description;
    this.type = type;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['content'] = this.content;
    ih['name'] = this.name;
    if (this.organizations_policy_id !== null) {
      ih['organizations_policy_id'] = this.organizations_policy_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.type !== 'SERVICE_CONTROL_POLICY') {
      ih['type'] = this.type;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Organizations_policy';
  }
}

export class Organizations_policy_attachment implements PcoreValue {
  readonly policy_id: string;
  readonly target_id: string;
  readonly organizations_policy_attachment_id: string|null;

  constructor({
    policy_id,
    target_id,
    organizations_policy_attachment_id = null
  }: {
    policy_id: string,
    target_id: string,
    organizations_policy_attachment_id?: string|null
  }) {
    this.policy_id = policy_id;
    this.target_id = target_id;
    this.organizations_policy_attachment_id = organizations_policy_attachment_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['policy_id'] = this.policy_id;
    ih['target_id'] = this.target_id;
    if (this.organizations_policy_attachment_id !== null) {
      ih['organizations_policy_attachment_id'] = this.organizations_policy_attachment_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Organizations_policy_attachment';
  }
}

export class Pinpoint_adm_channel implements PcoreValue {
  readonly application_id: string;
  readonly client_id: string;
  readonly client_secret: string;
  readonly pinpoint_adm_channel_id: string|null;
  readonly enabled: boolean;

  constructor({
    application_id,
    client_id,
    client_secret,
    pinpoint_adm_channel_id = null,
    enabled = true
  }: {
    application_id: string,
    client_id: string,
    client_secret: string,
    pinpoint_adm_channel_id?: string|null,
    enabled?: boolean
  }) {
    this.application_id = application_id;
    this.client_id = client_id;
    this.client_secret = client_secret;
    this.pinpoint_adm_channel_id = pinpoint_adm_channel_id;
    this.enabled = enabled;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['application_id'] = this.application_id;
    ih['client_id'] = this.client_id;
    ih['client_secret'] = this.client_secret;
    if (this.pinpoint_adm_channel_id !== null) {
      ih['pinpoint_adm_channel_id'] = this.pinpoint_adm_channel_id;
    }
    if (this.enabled !== true) {
      ih['enabled'] = this.enabled;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Pinpoint_adm_channel';
  }
}

export class Pinpoint_apns_channel implements PcoreValue {
  readonly application_id: string;
  readonly pinpoint_apns_channel_id: string|null;
  readonly bundle_id: string|null;
  readonly certificate: string|null;
  readonly default_authentication_method: string|null;
  readonly enabled: boolean;
  readonly private_key: string|null;
  readonly team_id: string|null;
  readonly token_key: string|null;
  readonly token_key_id: string|null;

  constructor({
    application_id,
    pinpoint_apns_channel_id = null,
    bundle_id = null,
    certificate = null,
    default_authentication_method = null,
    enabled = true,
    private_key = null,
    team_id = null,
    token_key = null,
    token_key_id = null
  }: {
    application_id: string,
    pinpoint_apns_channel_id?: string|null,
    bundle_id?: string|null,
    certificate?: string|null,
    default_authentication_method?: string|null,
    enabled?: boolean,
    private_key?: string|null,
    team_id?: string|null,
    token_key?: string|null,
    token_key_id?: string|null
  }) {
    this.application_id = application_id;
    this.pinpoint_apns_channel_id = pinpoint_apns_channel_id;
    this.bundle_id = bundle_id;
    this.certificate = certificate;
    this.default_authentication_method = default_authentication_method;
    this.enabled = enabled;
    this.private_key = private_key;
    this.team_id = team_id;
    this.token_key = token_key;
    this.token_key_id = token_key_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['application_id'] = this.application_id;
    if (this.pinpoint_apns_channel_id !== null) {
      ih['pinpoint_apns_channel_id'] = this.pinpoint_apns_channel_id;
    }
    if (this.bundle_id !== null) {
      ih['bundle_id'] = this.bundle_id;
    }
    if (this.certificate !== null) {
      ih['certificate'] = this.certificate;
    }
    if (this.default_authentication_method !== null) {
      ih['default_authentication_method'] = this.default_authentication_method;
    }
    if (this.enabled !== true) {
      ih['enabled'] = this.enabled;
    }
    if (this.private_key !== null) {
      ih['private_key'] = this.private_key;
    }
    if (this.team_id !== null) {
      ih['team_id'] = this.team_id;
    }
    if (this.token_key !== null) {
      ih['token_key'] = this.token_key;
    }
    if (this.token_key_id !== null) {
      ih['token_key_id'] = this.token_key_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Pinpoint_apns_channel';
  }
}

export class Pinpoint_apns_sandbox_channel implements PcoreValue {
  readonly application_id: string;
  readonly pinpoint_apns_sandbox_channel_id: string|null;
  readonly bundle_id: string|null;
  readonly certificate: string|null;
  readonly default_authentication_method: string|null;
  readonly enabled: boolean;
  readonly private_key: string|null;
  readonly team_id: string|null;
  readonly token_key: string|null;
  readonly token_key_id: string|null;

  constructor({
    application_id,
    pinpoint_apns_sandbox_channel_id = null,
    bundle_id = null,
    certificate = null,
    default_authentication_method = null,
    enabled = true,
    private_key = null,
    team_id = null,
    token_key = null,
    token_key_id = null
  }: {
    application_id: string,
    pinpoint_apns_sandbox_channel_id?: string|null,
    bundle_id?: string|null,
    certificate?: string|null,
    default_authentication_method?: string|null,
    enabled?: boolean,
    private_key?: string|null,
    team_id?: string|null,
    token_key?: string|null,
    token_key_id?: string|null
  }) {
    this.application_id = application_id;
    this.pinpoint_apns_sandbox_channel_id = pinpoint_apns_sandbox_channel_id;
    this.bundle_id = bundle_id;
    this.certificate = certificate;
    this.default_authentication_method = default_authentication_method;
    this.enabled = enabled;
    this.private_key = private_key;
    this.team_id = team_id;
    this.token_key = token_key;
    this.token_key_id = token_key_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['application_id'] = this.application_id;
    if (this.pinpoint_apns_sandbox_channel_id !== null) {
      ih['pinpoint_apns_sandbox_channel_id'] = this.pinpoint_apns_sandbox_channel_id;
    }
    if (this.bundle_id !== null) {
      ih['bundle_id'] = this.bundle_id;
    }
    if (this.certificate !== null) {
      ih['certificate'] = this.certificate;
    }
    if (this.default_authentication_method !== null) {
      ih['default_authentication_method'] = this.default_authentication_method;
    }
    if (this.enabled !== true) {
      ih['enabled'] = this.enabled;
    }
    if (this.private_key !== null) {
      ih['private_key'] = this.private_key;
    }
    if (this.team_id !== null) {
      ih['team_id'] = this.team_id;
    }
    if (this.token_key !== null) {
      ih['token_key'] = this.token_key;
    }
    if (this.token_key_id !== null) {
      ih['token_key_id'] = this.token_key_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Pinpoint_apns_sandbox_channel';
  }
}

export class Pinpoint_apns_voip_channel implements PcoreValue {
  readonly application_id: string;
  readonly pinpoint_apns_voip_channel_id: string|null;
  readonly bundle_id: string|null;
  readonly certificate: string|null;
  readonly default_authentication_method: string|null;
  readonly enabled: boolean;
  readonly private_key: string|null;
  readonly team_id: string|null;
  readonly token_key: string|null;
  readonly token_key_id: string|null;

  constructor({
    application_id,
    pinpoint_apns_voip_channel_id = null,
    bundle_id = null,
    certificate = null,
    default_authentication_method = null,
    enabled = true,
    private_key = null,
    team_id = null,
    token_key = null,
    token_key_id = null
  }: {
    application_id: string,
    pinpoint_apns_voip_channel_id?: string|null,
    bundle_id?: string|null,
    certificate?: string|null,
    default_authentication_method?: string|null,
    enabled?: boolean,
    private_key?: string|null,
    team_id?: string|null,
    token_key?: string|null,
    token_key_id?: string|null
  }) {
    this.application_id = application_id;
    this.pinpoint_apns_voip_channel_id = pinpoint_apns_voip_channel_id;
    this.bundle_id = bundle_id;
    this.certificate = certificate;
    this.default_authentication_method = default_authentication_method;
    this.enabled = enabled;
    this.private_key = private_key;
    this.team_id = team_id;
    this.token_key = token_key;
    this.token_key_id = token_key_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['application_id'] = this.application_id;
    if (this.pinpoint_apns_voip_channel_id !== null) {
      ih['pinpoint_apns_voip_channel_id'] = this.pinpoint_apns_voip_channel_id;
    }
    if (this.bundle_id !== null) {
      ih['bundle_id'] = this.bundle_id;
    }
    if (this.certificate !== null) {
      ih['certificate'] = this.certificate;
    }
    if (this.default_authentication_method !== null) {
      ih['default_authentication_method'] = this.default_authentication_method;
    }
    if (this.enabled !== true) {
      ih['enabled'] = this.enabled;
    }
    if (this.private_key !== null) {
      ih['private_key'] = this.private_key;
    }
    if (this.team_id !== null) {
      ih['team_id'] = this.team_id;
    }
    if (this.token_key !== null) {
      ih['token_key'] = this.token_key;
    }
    if (this.token_key_id !== null) {
      ih['token_key_id'] = this.token_key_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Pinpoint_apns_voip_channel';
  }
}

export class Pinpoint_apns_voip_sandbox_channel implements PcoreValue {
  readonly application_id: string;
  readonly pinpoint_apns_voip_sandbox_channel_id: string|null;
  readonly bundle_id: string|null;
  readonly certificate: string|null;
  readonly default_authentication_method: string|null;
  readonly enabled: boolean;
  readonly private_key: string|null;
  readonly team_id: string|null;
  readonly token_key: string|null;
  readonly token_key_id: string|null;

  constructor({
    application_id,
    pinpoint_apns_voip_sandbox_channel_id = null,
    bundle_id = null,
    certificate = null,
    default_authentication_method = null,
    enabled = true,
    private_key = null,
    team_id = null,
    token_key = null,
    token_key_id = null
  }: {
    application_id: string,
    pinpoint_apns_voip_sandbox_channel_id?: string|null,
    bundle_id?: string|null,
    certificate?: string|null,
    default_authentication_method?: string|null,
    enabled?: boolean,
    private_key?: string|null,
    team_id?: string|null,
    token_key?: string|null,
    token_key_id?: string|null
  }) {
    this.application_id = application_id;
    this.pinpoint_apns_voip_sandbox_channel_id = pinpoint_apns_voip_sandbox_channel_id;
    this.bundle_id = bundle_id;
    this.certificate = certificate;
    this.default_authentication_method = default_authentication_method;
    this.enabled = enabled;
    this.private_key = private_key;
    this.team_id = team_id;
    this.token_key = token_key;
    this.token_key_id = token_key_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['application_id'] = this.application_id;
    if (this.pinpoint_apns_voip_sandbox_channel_id !== null) {
      ih['pinpoint_apns_voip_sandbox_channel_id'] = this.pinpoint_apns_voip_sandbox_channel_id;
    }
    if (this.bundle_id !== null) {
      ih['bundle_id'] = this.bundle_id;
    }
    if (this.certificate !== null) {
      ih['certificate'] = this.certificate;
    }
    if (this.default_authentication_method !== null) {
      ih['default_authentication_method'] = this.default_authentication_method;
    }
    if (this.enabled !== true) {
      ih['enabled'] = this.enabled;
    }
    if (this.private_key !== null) {
      ih['private_key'] = this.private_key;
    }
    if (this.team_id !== null) {
      ih['team_id'] = this.team_id;
    }
    if (this.token_key !== null) {
      ih['token_key'] = this.token_key;
    }
    if (this.token_key_id !== null) {
      ih['token_key_id'] = this.token_key_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Pinpoint_apns_voip_sandbox_channel';
  }
}

export class Pinpoint_app implements PcoreValue {
  readonly pinpoint_app_id: string|null;
  readonly application_id: string|null;
  readonly campaign_hook: Anon341|null;
  readonly limits: Anon342|null;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly quiet_time: Anon343|null;

  constructor({
    pinpoint_app_id = null,
    application_id = null,
    campaign_hook = null,
    limits = null,
    name = null,
    name_prefix = null,
    quiet_time = null
  }: {
    pinpoint_app_id?: string|null,
    application_id?: string|null,
    campaign_hook?: Anon341|null,
    limits?: Anon342|null,
    name?: string|null,
    name_prefix?: string|null,
    quiet_time?: Anon343|null
  }) {
    this.pinpoint_app_id = pinpoint_app_id;
    this.application_id = application_id;
    this.campaign_hook = campaign_hook;
    this.limits = limits;
    this.name = name;
    this.name_prefix = name_prefix;
    this.quiet_time = quiet_time;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.pinpoint_app_id !== null) {
      ih['pinpoint_app_id'] = this.pinpoint_app_id;
    }
    if (this.application_id !== null) {
      ih['application_id'] = this.application_id;
    }
    if (this.campaign_hook !== null) {
      ih['campaign_hook'] = this.campaign_hook;
    }
    if (this.limits !== null) {
      ih['limits'] = this.limits;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.quiet_time !== null) {
      ih['quiet_time'] = this.quiet_time;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Pinpoint_app';
  }
}

export class Pinpoint_baidu_channel implements PcoreValue {
  readonly api_key: string;
  readonly application_id: string;
  readonly secret_key: string;
  readonly pinpoint_baidu_channel_id: string|null;
  readonly enabled: boolean;

  constructor({
    api_key,
    application_id,
    secret_key,
    pinpoint_baidu_channel_id = null,
    enabled = true
  }: {
    api_key: string,
    application_id: string,
    secret_key: string,
    pinpoint_baidu_channel_id?: string|null,
    enabled?: boolean
  }) {
    this.api_key = api_key;
    this.application_id = application_id;
    this.secret_key = secret_key;
    this.pinpoint_baidu_channel_id = pinpoint_baidu_channel_id;
    this.enabled = enabled;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['api_key'] = this.api_key;
    ih['application_id'] = this.application_id;
    ih['secret_key'] = this.secret_key;
    if (this.pinpoint_baidu_channel_id !== null) {
      ih['pinpoint_baidu_channel_id'] = this.pinpoint_baidu_channel_id;
    }
    if (this.enabled !== true) {
      ih['enabled'] = this.enabled;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Pinpoint_baidu_channel';
  }
}

export class Pinpoint_email_channel implements PcoreValue {
  readonly application_id: string;
  readonly from_address: string;
  readonly identity: string;
  readonly role_arn: string;
  readonly pinpoint_email_channel_id: string|null;
  readonly enabled: boolean;
  readonly messages_per_second: number|null;

  constructor({
    application_id,
    from_address,
    identity,
    role_arn,
    pinpoint_email_channel_id = null,
    enabled = true,
    messages_per_second = null
  }: {
    application_id: string,
    from_address: string,
    identity: string,
    role_arn: string,
    pinpoint_email_channel_id?: string|null,
    enabled?: boolean,
    messages_per_second?: number|null
  }) {
    this.application_id = application_id;
    this.from_address = from_address;
    this.identity = identity;
    this.role_arn = role_arn;
    this.pinpoint_email_channel_id = pinpoint_email_channel_id;
    this.enabled = enabled;
    this.messages_per_second = messages_per_second;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['application_id'] = this.application_id;
    ih['from_address'] = this.from_address;
    ih['identity'] = this.identity;
    ih['role_arn'] = this.role_arn;
    if (this.pinpoint_email_channel_id !== null) {
      ih['pinpoint_email_channel_id'] = this.pinpoint_email_channel_id;
    }
    if (this.enabled !== true) {
      ih['enabled'] = this.enabled;
    }
    if (this.messages_per_second !== null) {
      ih['messages_per_second'] = this.messages_per_second;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Pinpoint_email_channel';
  }
}

export class Pinpoint_event_stream implements PcoreValue {
  readonly application_id: string;
  readonly destination_stream_arn: string;
  readonly role_arn: string;
  readonly pinpoint_event_stream_id: string|null;

  constructor({
    application_id,
    destination_stream_arn,
    role_arn,
    pinpoint_event_stream_id = null
  }: {
    application_id: string,
    destination_stream_arn: string,
    role_arn: string,
    pinpoint_event_stream_id?: string|null
  }) {
    this.application_id = application_id;
    this.destination_stream_arn = destination_stream_arn;
    this.role_arn = role_arn;
    this.pinpoint_event_stream_id = pinpoint_event_stream_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['application_id'] = this.application_id;
    ih['destination_stream_arn'] = this.destination_stream_arn;
    ih['role_arn'] = this.role_arn;
    if (this.pinpoint_event_stream_id !== null) {
      ih['pinpoint_event_stream_id'] = this.pinpoint_event_stream_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Pinpoint_event_stream';
  }
}

export class Pinpoint_gcm_channel implements PcoreValue {
  readonly api_key: string;
  readonly application_id: string;
  readonly pinpoint_gcm_channel_id: string|null;
  readonly enabled: boolean;

  constructor({
    api_key,
    application_id,
    pinpoint_gcm_channel_id = null,
    enabled = true
  }: {
    api_key: string,
    application_id: string,
    pinpoint_gcm_channel_id?: string|null,
    enabled?: boolean
  }) {
    this.api_key = api_key;
    this.application_id = application_id;
    this.pinpoint_gcm_channel_id = pinpoint_gcm_channel_id;
    this.enabled = enabled;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['api_key'] = this.api_key;
    ih['application_id'] = this.application_id;
    if (this.pinpoint_gcm_channel_id !== null) {
      ih['pinpoint_gcm_channel_id'] = this.pinpoint_gcm_channel_id;
    }
    if (this.enabled !== true) {
      ih['enabled'] = this.enabled;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Pinpoint_gcm_channel';
  }
}

export class Pinpoint_sms_channel implements PcoreValue {
  readonly application_id: string;
  readonly pinpoint_sms_channel_id: string|null;
  readonly enabled: boolean;
  readonly promotional_messages_per_second: number|null;
  readonly sender_id: string|null;
  readonly short_code: string|null;
  readonly transactional_messages_per_second: number|null;

  constructor({
    application_id,
    pinpoint_sms_channel_id = null,
    enabled = true,
    promotional_messages_per_second = null,
    sender_id = null,
    short_code = null,
    transactional_messages_per_second = null
  }: {
    application_id: string,
    pinpoint_sms_channel_id?: string|null,
    enabled?: boolean,
    promotional_messages_per_second?: number|null,
    sender_id?: string|null,
    short_code?: string|null,
    transactional_messages_per_second?: number|null
  }) {
    this.application_id = application_id;
    this.pinpoint_sms_channel_id = pinpoint_sms_channel_id;
    this.enabled = enabled;
    this.promotional_messages_per_second = promotional_messages_per_second;
    this.sender_id = sender_id;
    this.short_code = short_code;
    this.transactional_messages_per_second = transactional_messages_per_second;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['application_id'] = this.application_id;
    if (this.pinpoint_sms_channel_id !== null) {
      ih['pinpoint_sms_channel_id'] = this.pinpoint_sms_channel_id;
    }
    if (this.enabled !== true) {
      ih['enabled'] = this.enabled;
    }
    if (this.promotional_messages_per_second !== null) {
      ih['promotional_messages_per_second'] = this.promotional_messages_per_second;
    }
    if (this.sender_id !== null) {
      ih['sender_id'] = this.sender_id;
    }
    if (this.short_code !== null) {
      ih['short_code'] = this.short_code;
    }
    if (this.transactional_messages_per_second !== null) {
      ih['transactional_messages_per_second'] = this.transactional_messages_per_second;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Pinpoint_sms_channel';
  }
}

export class Placement_group implements PcoreValue {
  readonly name: string;
  readonly strategy: string;
  readonly placement_group_id: string|null;

  constructor({
    name,
    strategy,
    placement_group_id = null
  }: {
    name: string,
    strategy: string,
    placement_group_id?: string|null
  }) {
    this.name = name;
    this.strategy = strategy;
    this.placement_group_id = placement_group_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['strategy'] = this.strategy;
    if (this.placement_group_id !== null) {
      ih['placement_group_id'] = this.placement_group_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Placement_group';
  }
}

export class Proxy_protocol_policy implements PcoreValue {
  readonly instance_ports: string[];
  readonly load_balancer: string;
  readonly proxy_protocol_policy_id: string|null;

  constructor({
    instance_ports,
    load_balancer,
    proxy_protocol_policy_id = null
  }: {
    instance_ports: string[],
    load_balancer: string,
    proxy_protocol_policy_id?: string|null
  }) {
    this.instance_ports = instance_ports;
    this.load_balancer = load_balancer;
    this.proxy_protocol_policy_id = proxy_protocol_policy_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['instance_ports'] = this.instance_ports;
    ih['load_balancer'] = this.load_balancer;
    if (this.proxy_protocol_policy_id !== null) {
      ih['proxy_protocol_policy_id'] = this.proxy_protocol_policy_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Proxy_protocol_policy';
  }
}

export class Ram_resource_share implements PcoreValue {
  readonly name: string;
  readonly ram_resource_share_id: string|null;
  readonly allow_external_principals: boolean;
  readonly tags: {[s: string]: string}|null;

  constructor({
    name,
    ram_resource_share_id = null,
    allow_external_principals = false,
    tags = null
  }: {
    name: string,
    ram_resource_share_id?: string|null,
    allow_external_principals?: boolean,
    tags?: {[s: string]: string}|null
  }) {
    this.name = name;
    this.ram_resource_share_id = ram_resource_share_id;
    this.allow_external_principals = allow_external_principals;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.ram_resource_share_id !== null) {
      ih['ram_resource_share_id'] = this.ram_resource_share_id;
    }
    if (this.allow_external_principals !== false) {
      ih['allow_external_principals'] = this.allow_external_principals;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ram_resource_share';
  }
}

export class Rds_cluster implements PcoreValue {
  readonly rds_cluster_id: string|null;
  readonly apply_immediately: boolean|null;
  readonly arn: string|null;
  readonly availability_zones: string[]|null;
  readonly backtrack_window: number|null;
  readonly backup_retention_period: number;
  readonly cluster_identifier: string|null;
  readonly cluster_identifier_prefix: string|null;
  readonly cluster_members: string[]|null;
  readonly cluster_resource_id: string|null;
  readonly database_name: string|null;
  readonly db_cluster_parameter_group_name: string|null;
  readonly db_subnet_group_name: string|null;
  readonly deletion_protection: boolean|null;
  readonly enabled_cloudwatch_logs_exports: string[]|null;
  readonly endpoint: string|null;
  readonly engine: string;
  readonly engine_mode: string;
  readonly engine_version: string|null;
  readonly final_snapshot_identifier: string|null;
  readonly global_cluster_identifier: string|null;
  readonly hosted_zone_id: string|null;
  readonly iam_database_authentication_enabled: boolean|null;
  readonly iam_roles: string[]|null;
  readonly kms_key_id: string|null;
  readonly master_password: string|null;
  readonly master_username: string|null;
  readonly port: number|null;
  readonly preferred_backup_window: string|null;
  readonly preferred_maintenance_window: string|null;
  readonly reader_endpoint: string|null;
  readonly replication_source_identifier: string|null;
  readonly s3_import: Anon156|null;
  readonly scaling_configuration: Anon344|null;
  readonly skip_final_snapshot: boolean;
  readonly snapshot_identifier: string|null;
  readonly source_region: string|null;
  readonly storage_encrypted: boolean|null;
  readonly tags: {[s: string]: string}|null;
  readonly vpc_security_group_ids: string[]|null;

  constructor({
    rds_cluster_id = null,
    apply_immediately = null,
    arn = null,
    availability_zones = null,
    backtrack_window = null,
    backup_retention_period = 1,
    cluster_identifier = null,
    cluster_identifier_prefix = null,
    cluster_members = null,
    cluster_resource_id = null,
    database_name = null,
    db_cluster_parameter_group_name = null,
    db_subnet_group_name = null,
    deletion_protection = null,
    enabled_cloudwatch_logs_exports = null,
    endpoint = null,
    engine = 'aurora',
    engine_mode = 'provisioned',
    engine_version = null,
    final_snapshot_identifier = null,
    global_cluster_identifier = null,
    hosted_zone_id = null,
    iam_database_authentication_enabled = null,
    iam_roles = null,
    kms_key_id = null,
    master_password = null,
    master_username = null,
    port = null,
    preferred_backup_window = null,
    preferred_maintenance_window = null,
    reader_endpoint = null,
    replication_source_identifier = null,
    s3_import = null,
    scaling_configuration = null,
    skip_final_snapshot = false,
    snapshot_identifier = null,
    source_region = null,
    storage_encrypted = null,
    tags = null,
    vpc_security_group_ids = null
  }: {
    rds_cluster_id?: string|null,
    apply_immediately?: boolean|null,
    arn?: string|null,
    availability_zones?: string[]|null,
    backtrack_window?: number|null,
    backup_retention_period?: number,
    cluster_identifier?: string|null,
    cluster_identifier_prefix?: string|null,
    cluster_members?: string[]|null,
    cluster_resource_id?: string|null,
    database_name?: string|null,
    db_cluster_parameter_group_name?: string|null,
    db_subnet_group_name?: string|null,
    deletion_protection?: boolean|null,
    enabled_cloudwatch_logs_exports?: string[]|null,
    endpoint?: string|null,
    engine?: string,
    engine_mode?: string,
    engine_version?: string|null,
    final_snapshot_identifier?: string|null,
    global_cluster_identifier?: string|null,
    hosted_zone_id?: string|null,
    iam_database_authentication_enabled?: boolean|null,
    iam_roles?: string[]|null,
    kms_key_id?: string|null,
    master_password?: string|null,
    master_username?: string|null,
    port?: number|null,
    preferred_backup_window?: string|null,
    preferred_maintenance_window?: string|null,
    reader_endpoint?: string|null,
    replication_source_identifier?: string|null,
    s3_import?: Anon156|null,
    scaling_configuration?: Anon344|null,
    skip_final_snapshot?: boolean,
    snapshot_identifier?: string|null,
    source_region?: string|null,
    storage_encrypted?: boolean|null,
    tags?: {[s: string]: string}|null,
    vpc_security_group_ids?: string[]|null
  }) {
    this.rds_cluster_id = rds_cluster_id;
    this.apply_immediately = apply_immediately;
    this.arn = arn;
    this.availability_zones = availability_zones;
    this.backtrack_window = backtrack_window;
    this.backup_retention_period = backup_retention_period;
    this.cluster_identifier = cluster_identifier;
    this.cluster_identifier_prefix = cluster_identifier_prefix;
    this.cluster_members = cluster_members;
    this.cluster_resource_id = cluster_resource_id;
    this.database_name = database_name;
    this.db_cluster_parameter_group_name = db_cluster_parameter_group_name;
    this.db_subnet_group_name = db_subnet_group_name;
    this.deletion_protection = deletion_protection;
    this.enabled_cloudwatch_logs_exports = enabled_cloudwatch_logs_exports;
    this.endpoint = endpoint;
    this.engine = engine;
    this.engine_mode = engine_mode;
    this.engine_version = engine_version;
    this.final_snapshot_identifier = final_snapshot_identifier;
    this.global_cluster_identifier = global_cluster_identifier;
    this.hosted_zone_id = hosted_zone_id;
    this.iam_database_authentication_enabled = iam_database_authentication_enabled;
    this.iam_roles = iam_roles;
    this.kms_key_id = kms_key_id;
    this.master_password = master_password;
    this.master_username = master_username;
    this.port = port;
    this.preferred_backup_window = preferred_backup_window;
    this.preferred_maintenance_window = preferred_maintenance_window;
    this.reader_endpoint = reader_endpoint;
    this.replication_source_identifier = replication_source_identifier;
    this.s3_import = s3_import;
    this.scaling_configuration = scaling_configuration;
    this.skip_final_snapshot = skip_final_snapshot;
    this.snapshot_identifier = snapshot_identifier;
    this.source_region = source_region;
    this.storage_encrypted = storage_encrypted;
    this.tags = tags;
    this.vpc_security_group_ids = vpc_security_group_ids;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.rds_cluster_id !== null) {
      ih['rds_cluster_id'] = this.rds_cluster_id;
    }
    if (this.apply_immediately !== null) {
      ih['apply_immediately'] = this.apply_immediately;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.availability_zones !== null) {
      ih['availability_zones'] = this.availability_zones;
    }
    if (this.backtrack_window !== null) {
      ih['backtrack_window'] = this.backtrack_window;
    }
    if (this.backup_retention_period !== 1) {
      ih['backup_retention_period'] = this.backup_retention_period;
    }
    if (this.cluster_identifier !== null) {
      ih['cluster_identifier'] = this.cluster_identifier;
    }
    if (this.cluster_identifier_prefix !== null) {
      ih['cluster_identifier_prefix'] = this.cluster_identifier_prefix;
    }
    if (this.cluster_members !== null) {
      ih['cluster_members'] = this.cluster_members;
    }
    if (this.cluster_resource_id !== null) {
      ih['cluster_resource_id'] = this.cluster_resource_id;
    }
    if (this.database_name !== null) {
      ih['database_name'] = this.database_name;
    }
    if (this.db_cluster_parameter_group_name !== null) {
      ih['db_cluster_parameter_group_name'] = this.db_cluster_parameter_group_name;
    }
    if (this.db_subnet_group_name !== null) {
      ih['db_subnet_group_name'] = this.db_subnet_group_name;
    }
    if (this.deletion_protection !== null) {
      ih['deletion_protection'] = this.deletion_protection;
    }
    if (this.enabled_cloudwatch_logs_exports !== null) {
      ih['enabled_cloudwatch_logs_exports'] = this.enabled_cloudwatch_logs_exports;
    }
    if (this.endpoint !== null) {
      ih['endpoint'] = this.endpoint;
    }
    if (this.engine !== 'aurora') {
      ih['engine'] = this.engine;
    }
    if (this.engine_mode !== 'provisioned') {
      ih['engine_mode'] = this.engine_mode;
    }
    if (this.engine_version !== null) {
      ih['engine_version'] = this.engine_version;
    }
    if (this.final_snapshot_identifier !== null) {
      ih['final_snapshot_identifier'] = this.final_snapshot_identifier;
    }
    if (this.global_cluster_identifier !== null) {
      ih['global_cluster_identifier'] = this.global_cluster_identifier;
    }
    if (this.hosted_zone_id !== null) {
      ih['hosted_zone_id'] = this.hosted_zone_id;
    }
    if (this.iam_database_authentication_enabled !== null) {
      ih['iam_database_authentication_enabled'] = this.iam_database_authentication_enabled;
    }
    if (this.iam_roles !== null) {
      ih['iam_roles'] = this.iam_roles;
    }
    if (this.kms_key_id !== null) {
      ih['kms_key_id'] = this.kms_key_id;
    }
    if (this.master_password !== null) {
      ih['master_password'] = this.master_password;
    }
    if (this.master_username !== null) {
      ih['master_username'] = this.master_username;
    }
    if (this.port !== null) {
      ih['port'] = this.port;
    }
    if (this.preferred_backup_window !== null) {
      ih['preferred_backup_window'] = this.preferred_backup_window;
    }
    if (this.preferred_maintenance_window !== null) {
      ih['preferred_maintenance_window'] = this.preferred_maintenance_window;
    }
    if (this.reader_endpoint !== null) {
      ih['reader_endpoint'] = this.reader_endpoint;
    }
    if (this.replication_source_identifier !== null) {
      ih['replication_source_identifier'] = this.replication_source_identifier;
    }
    if (this.s3_import !== null) {
      ih['s3_import'] = this.s3_import;
    }
    if (this.scaling_configuration !== null) {
      ih['scaling_configuration'] = this.scaling_configuration;
    }
    if (this.skip_final_snapshot !== false) {
      ih['skip_final_snapshot'] = this.skip_final_snapshot;
    }
    if (this.snapshot_identifier !== null) {
      ih['snapshot_identifier'] = this.snapshot_identifier;
    }
    if (this.source_region !== null) {
      ih['source_region'] = this.source_region;
    }
    if (this.storage_encrypted !== null) {
      ih['storage_encrypted'] = this.storage_encrypted;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpc_security_group_ids !== null) {
      ih['vpc_security_group_ids'] = this.vpc_security_group_ids;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Rds_cluster';
  }
}

export class Rds_cluster_endpoint implements PcoreValue {
  readonly cluster_endpoint_identifier: string;
  readonly cluster_identifier: string;
  readonly custom_endpoint_type: string;
  readonly rds_cluster_endpoint_id: string|null;
  readonly arn: string|null;
  readonly endpoint: string|null;
  readonly excluded_members: string[]|null;
  readonly static_members: string[]|null;

  constructor({
    cluster_endpoint_identifier,
    cluster_identifier,
    custom_endpoint_type,
    rds_cluster_endpoint_id = null,
    arn = null,
    endpoint = null,
    excluded_members = null,
    static_members = null
  }: {
    cluster_endpoint_identifier: string,
    cluster_identifier: string,
    custom_endpoint_type: string,
    rds_cluster_endpoint_id?: string|null,
    arn?: string|null,
    endpoint?: string|null,
    excluded_members?: string[]|null,
    static_members?: string[]|null
  }) {
    this.cluster_endpoint_identifier = cluster_endpoint_identifier;
    this.cluster_identifier = cluster_identifier;
    this.custom_endpoint_type = custom_endpoint_type;
    this.rds_cluster_endpoint_id = rds_cluster_endpoint_id;
    this.arn = arn;
    this.endpoint = endpoint;
    this.excluded_members = excluded_members;
    this.static_members = static_members;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['cluster_endpoint_identifier'] = this.cluster_endpoint_identifier;
    ih['cluster_identifier'] = this.cluster_identifier;
    ih['custom_endpoint_type'] = this.custom_endpoint_type;
    if (this.rds_cluster_endpoint_id !== null) {
      ih['rds_cluster_endpoint_id'] = this.rds_cluster_endpoint_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.endpoint !== null) {
      ih['endpoint'] = this.endpoint;
    }
    if (this.excluded_members !== null) {
      ih['excluded_members'] = this.excluded_members;
    }
    if (this.static_members !== null) {
      ih['static_members'] = this.static_members;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Rds_cluster_endpoint';
  }
}

export class Rds_cluster_instance implements PcoreValue {
  readonly cluster_identifier: string;
  readonly instance_class: string;
  readonly rds_cluster_instance_id: string|null;
  readonly apply_immediately: boolean|null;
  readonly arn: string|null;
  readonly auto_minor_version_upgrade: boolean;
  readonly availability_zone: string|null;
  readonly copy_tags_to_snapshot: boolean;
  readonly db_parameter_group_name: string|null;
  readonly db_subnet_group_name: string|null;
  readonly dbi_resource_id: string|null;
  readonly endpoint: string|null;
  readonly engine: string;
  readonly engine_version: string|null;
  readonly identifier: string|null;
  readonly identifier_prefix: string|null;
  readonly kms_key_id: string|null;
  readonly monitoring_interval: number;
  readonly monitoring_role_arn: string|null;
  readonly performance_insights_enabled: boolean|null;
  readonly performance_insights_kms_key_id: string|null;
  readonly port: number|null;
  readonly preferred_backup_window: string|null;
  readonly preferred_maintenance_window: string|null;
  readonly promotion_tier: number;
  readonly publicly_accessible: boolean;
  readonly storage_encrypted: boolean|null;
  readonly tags: {[s: string]: string}|null;
  readonly writer: boolean|null;

  constructor({
    cluster_identifier,
    instance_class,
    rds_cluster_instance_id = null,
    apply_immediately = null,
    arn = null,
    auto_minor_version_upgrade = true,
    availability_zone = null,
    copy_tags_to_snapshot = false,
    db_parameter_group_name = null,
    db_subnet_group_name = null,
    dbi_resource_id = null,
    endpoint = null,
    engine = 'aurora',
    engine_version = null,
    identifier = null,
    identifier_prefix = null,
    kms_key_id = null,
    monitoring_interval = 0,
    monitoring_role_arn = null,
    performance_insights_enabled = null,
    performance_insights_kms_key_id = null,
    port = null,
    preferred_backup_window = null,
    preferred_maintenance_window = null,
    promotion_tier = 0,
    publicly_accessible = false,
    storage_encrypted = null,
    tags = null,
    writer = null
  }: {
    cluster_identifier: string,
    instance_class: string,
    rds_cluster_instance_id?: string|null,
    apply_immediately?: boolean|null,
    arn?: string|null,
    auto_minor_version_upgrade?: boolean,
    availability_zone?: string|null,
    copy_tags_to_snapshot?: boolean,
    db_parameter_group_name?: string|null,
    db_subnet_group_name?: string|null,
    dbi_resource_id?: string|null,
    endpoint?: string|null,
    engine?: string,
    engine_version?: string|null,
    identifier?: string|null,
    identifier_prefix?: string|null,
    kms_key_id?: string|null,
    monitoring_interval?: number,
    monitoring_role_arn?: string|null,
    performance_insights_enabled?: boolean|null,
    performance_insights_kms_key_id?: string|null,
    port?: number|null,
    preferred_backup_window?: string|null,
    preferred_maintenance_window?: string|null,
    promotion_tier?: number,
    publicly_accessible?: boolean,
    storage_encrypted?: boolean|null,
    tags?: {[s: string]: string}|null,
    writer?: boolean|null
  }) {
    this.cluster_identifier = cluster_identifier;
    this.instance_class = instance_class;
    this.rds_cluster_instance_id = rds_cluster_instance_id;
    this.apply_immediately = apply_immediately;
    this.arn = arn;
    this.auto_minor_version_upgrade = auto_minor_version_upgrade;
    this.availability_zone = availability_zone;
    this.copy_tags_to_snapshot = copy_tags_to_snapshot;
    this.db_parameter_group_name = db_parameter_group_name;
    this.db_subnet_group_name = db_subnet_group_name;
    this.dbi_resource_id = dbi_resource_id;
    this.endpoint = endpoint;
    this.engine = engine;
    this.engine_version = engine_version;
    this.identifier = identifier;
    this.identifier_prefix = identifier_prefix;
    this.kms_key_id = kms_key_id;
    this.monitoring_interval = monitoring_interval;
    this.monitoring_role_arn = monitoring_role_arn;
    this.performance_insights_enabled = performance_insights_enabled;
    this.performance_insights_kms_key_id = performance_insights_kms_key_id;
    this.port = port;
    this.preferred_backup_window = preferred_backup_window;
    this.preferred_maintenance_window = preferred_maintenance_window;
    this.promotion_tier = promotion_tier;
    this.publicly_accessible = publicly_accessible;
    this.storage_encrypted = storage_encrypted;
    this.tags = tags;
    this.writer = writer;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['cluster_identifier'] = this.cluster_identifier;
    ih['instance_class'] = this.instance_class;
    if (this.rds_cluster_instance_id !== null) {
      ih['rds_cluster_instance_id'] = this.rds_cluster_instance_id;
    }
    if (this.apply_immediately !== null) {
      ih['apply_immediately'] = this.apply_immediately;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.auto_minor_version_upgrade !== true) {
      ih['auto_minor_version_upgrade'] = this.auto_minor_version_upgrade;
    }
    if (this.availability_zone !== null) {
      ih['availability_zone'] = this.availability_zone;
    }
    if (this.copy_tags_to_snapshot !== false) {
      ih['copy_tags_to_snapshot'] = this.copy_tags_to_snapshot;
    }
    if (this.db_parameter_group_name !== null) {
      ih['db_parameter_group_name'] = this.db_parameter_group_name;
    }
    if (this.db_subnet_group_name !== null) {
      ih['db_subnet_group_name'] = this.db_subnet_group_name;
    }
    if (this.dbi_resource_id !== null) {
      ih['dbi_resource_id'] = this.dbi_resource_id;
    }
    if (this.endpoint !== null) {
      ih['endpoint'] = this.endpoint;
    }
    if (this.engine !== 'aurora') {
      ih['engine'] = this.engine;
    }
    if (this.engine_version !== null) {
      ih['engine_version'] = this.engine_version;
    }
    if (this.identifier !== null) {
      ih['identifier'] = this.identifier;
    }
    if (this.identifier_prefix !== null) {
      ih['identifier_prefix'] = this.identifier_prefix;
    }
    if (this.kms_key_id !== null) {
      ih['kms_key_id'] = this.kms_key_id;
    }
    if (this.monitoring_interval !== 0) {
      ih['monitoring_interval'] = this.monitoring_interval;
    }
    if (this.monitoring_role_arn !== null) {
      ih['monitoring_role_arn'] = this.monitoring_role_arn;
    }
    if (this.performance_insights_enabled !== null) {
      ih['performance_insights_enabled'] = this.performance_insights_enabled;
    }
    if (this.performance_insights_kms_key_id !== null) {
      ih['performance_insights_kms_key_id'] = this.performance_insights_kms_key_id;
    }
    if (this.port !== null) {
      ih['port'] = this.port;
    }
    if (this.preferred_backup_window !== null) {
      ih['preferred_backup_window'] = this.preferred_backup_window;
    }
    if (this.preferred_maintenance_window !== null) {
      ih['preferred_maintenance_window'] = this.preferred_maintenance_window;
    }
    if (this.promotion_tier !== 0) {
      ih['promotion_tier'] = this.promotion_tier;
    }
    if (this.publicly_accessible !== false) {
      ih['publicly_accessible'] = this.publicly_accessible;
    }
    if (this.storage_encrypted !== null) {
      ih['storage_encrypted'] = this.storage_encrypted;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.writer !== null) {
      ih['writer'] = this.writer;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Rds_cluster_instance';
  }
}

export class Rds_cluster_parameter_group implements PcoreValue {
  readonly family: string;
  readonly rds_cluster_parameter_group_id: string|null;
  readonly arn: string|null;
  readonly description: string;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly parameter: Anon158[]|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    family,
    rds_cluster_parameter_group_id = null,
    arn = null,
    description = 'Managed by Terraform',
    name = null,
    name_prefix = null,
    parameter = null,
    tags = null
  }: {
    family: string,
    rds_cluster_parameter_group_id?: string|null,
    arn?: string|null,
    description?: string,
    name?: string|null,
    name_prefix?: string|null,
    parameter?: Anon158[]|null,
    tags?: {[s: string]: string}|null
  }) {
    this.family = family;
    this.rds_cluster_parameter_group_id = rds_cluster_parameter_group_id;
    this.arn = arn;
    this.description = description;
    this.name = name;
    this.name_prefix = name_prefix;
    this.parameter = parameter;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['family'] = this.family;
    if (this.rds_cluster_parameter_group_id !== null) {
      ih['rds_cluster_parameter_group_id'] = this.rds_cluster_parameter_group_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== 'Managed by Terraform') {
      ih['description'] = this.description;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.parameter !== null) {
      ih['parameter'] = this.parameter;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Rds_cluster_parameter_group';
  }
}

export class Rds_global_cluster implements PcoreValue {
  readonly global_cluster_identifier: string;
  readonly rds_global_cluster_id: string|null;
  readonly arn: string|null;
  readonly database_name: string|null;
  readonly deletion_protection: boolean;
  readonly engine: string;
  readonly engine_version: string|null;
  readonly global_cluster_resource_id: string|null;
  readonly storage_encrypted: boolean|null;

  constructor({
    global_cluster_identifier,
    rds_global_cluster_id = null,
    arn = null,
    database_name = null,
    deletion_protection = false,
    engine = 'aurora',
    engine_version = null,
    global_cluster_resource_id = null,
    storage_encrypted = null
  }: {
    global_cluster_identifier: string,
    rds_global_cluster_id?: string|null,
    arn?: string|null,
    database_name?: string|null,
    deletion_protection?: boolean,
    engine?: string,
    engine_version?: string|null,
    global_cluster_resource_id?: string|null,
    storage_encrypted?: boolean|null
  }) {
    this.global_cluster_identifier = global_cluster_identifier;
    this.rds_global_cluster_id = rds_global_cluster_id;
    this.arn = arn;
    this.database_name = database_name;
    this.deletion_protection = deletion_protection;
    this.engine = engine;
    this.engine_version = engine_version;
    this.global_cluster_resource_id = global_cluster_resource_id;
    this.storage_encrypted = storage_encrypted;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['global_cluster_identifier'] = this.global_cluster_identifier;
    if (this.rds_global_cluster_id !== null) {
      ih['rds_global_cluster_id'] = this.rds_global_cluster_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.database_name !== null) {
      ih['database_name'] = this.database_name;
    }
    if (this.deletion_protection !== false) {
      ih['deletion_protection'] = this.deletion_protection;
    }
    if (this.engine !== 'aurora') {
      ih['engine'] = this.engine;
    }
    if (this.engine_version !== null) {
      ih['engine_version'] = this.engine_version;
    }
    if (this.global_cluster_resource_id !== null) {
      ih['global_cluster_resource_id'] = this.global_cluster_resource_id;
    }
    if (this.storage_encrypted !== null) {
      ih['storage_encrypted'] = this.storage_encrypted;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Rds_global_cluster';
  }
}

export class Redshift_cluster implements PcoreValue {
  readonly cluster_identifier: string;
  readonly node_type: string;
  readonly redshift_cluster_id: string|null;
  readonly allow_version_upgrade: boolean;
  readonly automated_snapshot_retention_period: number;
  readonly availability_zone: string|null;
  readonly cluster_parameter_group_name: string|null;
  readonly cluster_public_key: string|null;
  readonly cluster_revision_number: string|null;
  readonly cluster_security_groups: string[]|null;
  readonly cluster_subnet_group_name: string|null;
  readonly cluster_type: string|null;
  readonly cluster_version: string;
  readonly database_name: string|null;
  readonly dns_name: string|null;
  readonly elastic_ip: string|null;
  readonly encrypted: boolean;
  readonly endpoint: string|null;
  readonly enhanced_vpc_routing: boolean|null;
  readonly final_snapshot_identifier: string|null;
  readonly iam_roles: string[]|null;
  readonly kms_key_id: string|null;
  readonly logging: Anon345|null;
  readonly master_password: string|null;
  readonly master_username: string|null;
  readonly number_of_nodes: number;
  readonly owner_account: string|null;
  readonly port: number;
  readonly preferred_maintenance_window: string|null;
  readonly publicly_accessible: boolean;
  readonly skip_final_snapshot: boolean;
  readonly snapshot_cluster_identifier: string|null;
  readonly snapshot_copy: Anon346|null;
  readonly snapshot_identifier: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly vpc_security_group_ids: string[]|null;

  constructor({
    cluster_identifier,
    node_type,
    redshift_cluster_id = null,
    allow_version_upgrade = true,
    automated_snapshot_retention_period = 1,
    availability_zone = null,
    cluster_parameter_group_name = null,
    cluster_public_key = null,
    cluster_revision_number = null,
    cluster_security_groups = null,
    cluster_subnet_group_name = null,
    cluster_type = null,
    cluster_version = '1.0',
    database_name = null,
    dns_name = null,
    elastic_ip = null,
    encrypted = false,
    endpoint = null,
    enhanced_vpc_routing = null,
    final_snapshot_identifier = null,
    iam_roles = null,
    kms_key_id = null,
    logging = null,
    master_password = null,
    master_username = null,
    number_of_nodes = 1,
    owner_account = null,
    port = 5439,
    preferred_maintenance_window = null,
    publicly_accessible = true,
    skip_final_snapshot = false,
    snapshot_cluster_identifier = null,
    snapshot_copy = null,
    snapshot_identifier = null,
    tags = null,
    vpc_security_group_ids = null
  }: {
    cluster_identifier: string,
    node_type: string,
    redshift_cluster_id?: string|null,
    allow_version_upgrade?: boolean,
    automated_snapshot_retention_period?: number,
    availability_zone?: string|null,
    cluster_parameter_group_name?: string|null,
    cluster_public_key?: string|null,
    cluster_revision_number?: string|null,
    cluster_security_groups?: string[]|null,
    cluster_subnet_group_name?: string|null,
    cluster_type?: string|null,
    cluster_version?: string,
    database_name?: string|null,
    dns_name?: string|null,
    elastic_ip?: string|null,
    encrypted?: boolean,
    endpoint?: string|null,
    enhanced_vpc_routing?: boolean|null,
    final_snapshot_identifier?: string|null,
    iam_roles?: string[]|null,
    kms_key_id?: string|null,
    logging?: Anon345|null,
    master_password?: string|null,
    master_username?: string|null,
    number_of_nodes?: number,
    owner_account?: string|null,
    port?: number,
    preferred_maintenance_window?: string|null,
    publicly_accessible?: boolean,
    skip_final_snapshot?: boolean,
    snapshot_cluster_identifier?: string|null,
    snapshot_copy?: Anon346|null,
    snapshot_identifier?: string|null,
    tags?: {[s: string]: string}|null,
    vpc_security_group_ids?: string[]|null
  }) {
    this.cluster_identifier = cluster_identifier;
    this.node_type = node_type;
    this.redshift_cluster_id = redshift_cluster_id;
    this.allow_version_upgrade = allow_version_upgrade;
    this.automated_snapshot_retention_period = automated_snapshot_retention_period;
    this.availability_zone = availability_zone;
    this.cluster_parameter_group_name = cluster_parameter_group_name;
    this.cluster_public_key = cluster_public_key;
    this.cluster_revision_number = cluster_revision_number;
    this.cluster_security_groups = cluster_security_groups;
    this.cluster_subnet_group_name = cluster_subnet_group_name;
    this.cluster_type = cluster_type;
    this.cluster_version = cluster_version;
    this.database_name = database_name;
    this.dns_name = dns_name;
    this.elastic_ip = elastic_ip;
    this.encrypted = encrypted;
    this.endpoint = endpoint;
    this.enhanced_vpc_routing = enhanced_vpc_routing;
    this.final_snapshot_identifier = final_snapshot_identifier;
    this.iam_roles = iam_roles;
    this.kms_key_id = kms_key_id;
    this.logging = logging;
    this.master_password = master_password;
    this.master_username = master_username;
    this.number_of_nodes = number_of_nodes;
    this.owner_account = owner_account;
    this.port = port;
    this.preferred_maintenance_window = preferred_maintenance_window;
    this.publicly_accessible = publicly_accessible;
    this.skip_final_snapshot = skip_final_snapshot;
    this.snapshot_cluster_identifier = snapshot_cluster_identifier;
    this.snapshot_copy = snapshot_copy;
    this.snapshot_identifier = snapshot_identifier;
    this.tags = tags;
    this.vpc_security_group_ids = vpc_security_group_ids;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['cluster_identifier'] = this.cluster_identifier;
    ih['node_type'] = this.node_type;
    if (this.redshift_cluster_id !== null) {
      ih['redshift_cluster_id'] = this.redshift_cluster_id;
    }
    if (this.allow_version_upgrade !== true) {
      ih['allow_version_upgrade'] = this.allow_version_upgrade;
    }
    if (this.automated_snapshot_retention_period !== 1) {
      ih['automated_snapshot_retention_period'] = this.automated_snapshot_retention_period;
    }
    if (this.availability_zone !== null) {
      ih['availability_zone'] = this.availability_zone;
    }
    if (this.cluster_parameter_group_name !== null) {
      ih['cluster_parameter_group_name'] = this.cluster_parameter_group_name;
    }
    if (this.cluster_public_key !== null) {
      ih['cluster_public_key'] = this.cluster_public_key;
    }
    if (this.cluster_revision_number !== null) {
      ih['cluster_revision_number'] = this.cluster_revision_number;
    }
    if (this.cluster_security_groups !== null) {
      ih['cluster_security_groups'] = this.cluster_security_groups;
    }
    if (this.cluster_subnet_group_name !== null) {
      ih['cluster_subnet_group_name'] = this.cluster_subnet_group_name;
    }
    if (this.cluster_type !== null) {
      ih['cluster_type'] = this.cluster_type;
    }
    if (this.cluster_version !== '1.0') {
      ih['cluster_version'] = this.cluster_version;
    }
    if (this.database_name !== null) {
      ih['database_name'] = this.database_name;
    }
    if (this.dns_name !== null) {
      ih['dns_name'] = this.dns_name;
    }
    if (this.elastic_ip !== null) {
      ih['elastic_ip'] = this.elastic_ip;
    }
    if (this.encrypted !== false) {
      ih['encrypted'] = this.encrypted;
    }
    if (this.endpoint !== null) {
      ih['endpoint'] = this.endpoint;
    }
    if (this.enhanced_vpc_routing !== null) {
      ih['enhanced_vpc_routing'] = this.enhanced_vpc_routing;
    }
    if (this.final_snapshot_identifier !== null) {
      ih['final_snapshot_identifier'] = this.final_snapshot_identifier;
    }
    if (this.iam_roles !== null) {
      ih['iam_roles'] = this.iam_roles;
    }
    if (this.kms_key_id !== null) {
      ih['kms_key_id'] = this.kms_key_id;
    }
    if (this.logging !== null) {
      ih['logging'] = this.logging;
    }
    if (this.master_password !== null) {
      ih['master_password'] = this.master_password;
    }
    if (this.master_username !== null) {
      ih['master_username'] = this.master_username;
    }
    if (this.number_of_nodes !== 1) {
      ih['number_of_nodes'] = this.number_of_nodes;
    }
    if (this.owner_account !== null) {
      ih['owner_account'] = this.owner_account;
    }
    if (this.port !== 5439) {
      ih['port'] = this.port;
    }
    if (this.preferred_maintenance_window !== null) {
      ih['preferred_maintenance_window'] = this.preferred_maintenance_window;
    }
    if (this.publicly_accessible !== true) {
      ih['publicly_accessible'] = this.publicly_accessible;
    }
    if (this.skip_final_snapshot !== false) {
      ih['skip_final_snapshot'] = this.skip_final_snapshot;
    }
    if (this.snapshot_cluster_identifier !== null) {
      ih['snapshot_cluster_identifier'] = this.snapshot_cluster_identifier;
    }
    if (this.snapshot_copy !== null) {
      ih['snapshot_copy'] = this.snapshot_copy;
    }
    if (this.snapshot_identifier !== null) {
      ih['snapshot_identifier'] = this.snapshot_identifier;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpc_security_group_ids !== null) {
      ih['vpc_security_group_ids'] = this.vpc_security_group_ids;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Redshift_cluster';
  }
}

export class Redshift_event_subscription implements PcoreValue {
  readonly name: string;
  readonly sns_topic_arn: string;
  readonly redshift_event_subscription_id: string|null;
  readonly customer_aws_id: string|null;
  readonly enabled: boolean;
  readonly event_categories: string[]|null;
  readonly severity: string|null;
  readonly source_ids: string[]|null;
  readonly source_type: string|null;
  readonly status: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    name,
    sns_topic_arn,
    redshift_event_subscription_id = null,
    customer_aws_id = null,
    enabled = true,
    event_categories = null,
    severity = null,
    source_ids = null,
    source_type = null,
    status = null,
    tags = null
  }: {
    name: string,
    sns_topic_arn: string,
    redshift_event_subscription_id?: string|null,
    customer_aws_id?: string|null,
    enabled?: boolean,
    event_categories?: string[]|null,
    severity?: string|null,
    source_ids?: string[]|null,
    source_type?: string|null,
    status?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.name = name;
    this.sns_topic_arn = sns_topic_arn;
    this.redshift_event_subscription_id = redshift_event_subscription_id;
    this.customer_aws_id = customer_aws_id;
    this.enabled = enabled;
    this.event_categories = event_categories;
    this.severity = severity;
    this.source_ids = source_ids;
    this.source_type = source_type;
    this.status = status;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['sns_topic_arn'] = this.sns_topic_arn;
    if (this.redshift_event_subscription_id !== null) {
      ih['redshift_event_subscription_id'] = this.redshift_event_subscription_id;
    }
    if (this.customer_aws_id !== null) {
      ih['customer_aws_id'] = this.customer_aws_id;
    }
    if (this.enabled !== true) {
      ih['enabled'] = this.enabled;
    }
    if (this.event_categories !== null) {
      ih['event_categories'] = this.event_categories;
    }
    if (this.severity !== null) {
      ih['severity'] = this.severity;
    }
    if (this.source_ids !== null) {
      ih['source_ids'] = this.source_ids;
    }
    if (this.source_type !== null) {
      ih['source_type'] = this.source_type;
    }
    if (this.status !== null) {
      ih['status'] = this.status;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Redshift_event_subscription';
  }
}

export class Redshift_parameter_group implements PcoreValue {
  readonly family: string;
  readonly name: string;
  readonly redshift_parameter_group_id: string|null;
  readonly description: string;
  readonly parameter: Anon29[]|null;

  constructor({
    family,
    name,
    redshift_parameter_group_id = null,
    description = 'Managed by Terraform',
    parameter = null
  }: {
    family: string,
    name: string,
    redshift_parameter_group_id?: string|null,
    description?: string,
    parameter?: Anon29[]|null
  }) {
    this.family = family;
    this.name = name;
    this.redshift_parameter_group_id = redshift_parameter_group_id;
    this.description = description;
    this.parameter = parameter;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['family'] = this.family;
    ih['name'] = this.name;
    if (this.redshift_parameter_group_id !== null) {
      ih['redshift_parameter_group_id'] = this.redshift_parameter_group_id;
    }
    if (this.description !== 'Managed by Terraform') {
      ih['description'] = this.description;
    }
    if (this.parameter !== null) {
      ih['parameter'] = this.parameter;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Redshift_parameter_group';
  }
}

export class Redshift_security_group implements PcoreValue {
  readonly ingress: Anon347[];
  readonly name: string;
  readonly redshift_security_group_id: string|null;
  readonly description: string;

  constructor({
    ingress,
    name,
    redshift_security_group_id = null,
    description = 'Managed by Terraform'
  }: {
    ingress: Anon347[],
    name: string,
    redshift_security_group_id?: string|null,
    description?: string
  }) {
    this.ingress = ingress;
    this.name = name;
    this.redshift_security_group_id = redshift_security_group_id;
    this.description = description;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['ingress'] = this.ingress;
    ih['name'] = this.name;
    if (this.redshift_security_group_id !== null) {
      ih['redshift_security_group_id'] = this.redshift_security_group_id;
    }
    if (this.description !== 'Managed by Terraform') {
      ih['description'] = this.description;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Redshift_security_group';
  }
}

export class Redshift_snapshot_copy_grant implements PcoreValue {
  readonly snapshot_copy_grant_name: string;
  readonly redshift_snapshot_copy_grant_id: string|null;
  readonly kms_key_id: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    snapshot_copy_grant_name,
    redshift_snapshot_copy_grant_id = null,
    kms_key_id = null,
    tags = null
  }: {
    snapshot_copy_grant_name: string,
    redshift_snapshot_copy_grant_id?: string|null,
    kms_key_id?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.snapshot_copy_grant_name = snapshot_copy_grant_name;
    this.redshift_snapshot_copy_grant_id = redshift_snapshot_copy_grant_id;
    this.kms_key_id = kms_key_id;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['snapshot_copy_grant_name'] = this.snapshot_copy_grant_name;
    if (this.redshift_snapshot_copy_grant_id !== null) {
      ih['redshift_snapshot_copy_grant_id'] = this.redshift_snapshot_copy_grant_id;
    }
    if (this.kms_key_id !== null) {
      ih['kms_key_id'] = this.kms_key_id;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Redshift_snapshot_copy_grant';
  }
}

export class Redshift_subnet_group implements PcoreValue {
  readonly name: string;
  readonly subnet_ids: string[];
  readonly redshift_subnet_group_id: string|null;
  readonly description: string;
  readonly tags: {[s: string]: string}|null;

  constructor({
    name,
    subnet_ids,
    redshift_subnet_group_id = null,
    description = 'Managed by Terraform',
    tags = null
  }: {
    name: string,
    subnet_ids: string[],
    redshift_subnet_group_id?: string|null,
    description?: string,
    tags?: {[s: string]: string}|null
  }) {
    this.name = name;
    this.subnet_ids = subnet_ids;
    this.redshift_subnet_group_id = redshift_subnet_group_id;
    this.description = description;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['subnet_ids'] = this.subnet_ids;
    if (this.redshift_subnet_group_id !== null) {
      ih['redshift_subnet_group_id'] = this.redshift_subnet_group_id;
    }
    if (this.description !== 'Managed by Terraform') {
      ih['description'] = this.description;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Redshift_subnet_group';
  }
}

export class Resourcegroups_group implements PcoreValue {
  readonly name: string;
  readonly resource_query: Anon348;
  readonly resourcegroups_group_id: string|null;
  readonly arn: string|null;
  readonly description: string|null;

  constructor({
    name,
    resource_query,
    resourcegroups_group_id = null,
    arn = null,
    description = null
  }: {
    name: string,
    resource_query: Anon348,
    resourcegroups_group_id?: string|null,
    arn?: string|null,
    description?: string|null
  }) {
    this.name = name;
    this.resource_query = resource_query;
    this.resourcegroups_group_id = resourcegroups_group_id;
    this.arn = arn;
    this.description = description;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['resource_query'] = this.resource_query;
    if (this.resourcegroups_group_id !== null) {
      ih['resourcegroups_group_id'] = this.resourcegroups_group_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Resourcegroups_group';
  }
}

export class Route implements PcoreValue {
  readonly route_table_id: string;
  readonly route_id: string|null;
  readonly destination_cidr_block: string|null;
  readonly destination_ipv6_cidr_block: string|null;
  readonly destination_prefix_list_id: string|null;
  readonly egress_only_gateway_id: string|null;
  readonly gateway_id: string|null;
  readonly instance_id: string|null;
  readonly instance_owner_id: string|null;
  readonly nat_gateway_id: string|null;
  readonly network_interface_id: string|null;
  readonly origin: string|null;
  readonly state: string|null;
  readonly transit_gateway_id: string|null;
  readonly vpc_peering_connection_id: string|null;

  constructor({
    route_table_id,
    route_id = null,
    destination_cidr_block = null,
    destination_ipv6_cidr_block = null,
    destination_prefix_list_id = null,
    egress_only_gateway_id = null,
    gateway_id = null,
    instance_id = null,
    instance_owner_id = null,
    nat_gateway_id = null,
    network_interface_id = null,
    origin = null,
    state = null,
    transit_gateway_id = null,
    vpc_peering_connection_id = null
  }: {
    route_table_id: string,
    route_id?: string|null,
    destination_cidr_block?: string|null,
    destination_ipv6_cidr_block?: string|null,
    destination_prefix_list_id?: string|null,
    egress_only_gateway_id?: string|null,
    gateway_id?: string|null,
    instance_id?: string|null,
    instance_owner_id?: string|null,
    nat_gateway_id?: string|null,
    network_interface_id?: string|null,
    origin?: string|null,
    state?: string|null,
    transit_gateway_id?: string|null,
    vpc_peering_connection_id?: string|null
  }) {
    this.route_table_id = route_table_id;
    this.route_id = route_id;
    this.destination_cidr_block = destination_cidr_block;
    this.destination_ipv6_cidr_block = destination_ipv6_cidr_block;
    this.destination_prefix_list_id = destination_prefix_list_id;
    this.egress_only_gateway_id = egress_only_gateway_id;
    this.gateway_id = gateway_id;
    this.instance_id = instance_id;
    this.instance_owner_id = instance_owner_id;
    this.nat_gateway_id = nat_gateway_id;
    this.network_interface_id = network_interface_id;
    this.origin = origin;
    this.state = state;
    this.transit_gateway_id = transit_gateway_id;
    this.vpc_peering_connection_id = vpc_peering_connection_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['route_table_id'] = this.route_table_id;
    if (this.route_id !== null) {
      ih['route_id'] = this.route_id;
    }
    if (this.destination_cidr_block !== null) {
      ih['destination_cidr_block'] = this.destination_cidr_block;
    }
    if (this.destination_ipv6_cidr_block !== null) {
      ih['destination_ipv6_cidr_block'] = this.destination_ipv6_cidr_block;
    }
    if (this.destination_prefix_list_id !== null) {
      ih['destination_prefix_list_id'] = this.destination_prefix_list_id;
    }
    if (this.egress_only_gateway_id !== null) {
      ih['egress_only_gateway_id'] = this.egress_only_gateway_id;
    }
    if (this.gateway_id !== null) {
      ih['gateway_id'] = this.gateway_id;
    }
    if (this.instance_id !== null) {
      ih['instance_id'] = this.instance_id;
    }
    if (this.instance_owner_id !== null) {
      ih['instance_owner_id'] = this.instance_owner_id;
    }
    if (this.nat_gateway_id !== null) {
      ih['nat_gateway_id'] = this.nat_gateway_id;
    }
    if (this.network_interface_id !== null) {
      ih['network_interface_id'] = this.network_interface_id;
    }
    if (this.origin !== null) {
      ih['origin'] = this.origin;
    }
    if (this.state !== null) {
      ih['state'] = this.state;
    }
    if (this.transit_gateway_id !== null) {
      ih['transit_gateway_id'] = this.transit_gateway_id;
    }
    if (this.vpc_peering_connection_id !== null) {
      ih['vpc_peering_connection_id'] = this.vpc_peering_connection_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Route';
  }
}

export class Route53_delegation_set implements PcoreValue {
  readonly route53_delegation_set_id: string|null;
  readonly name_servers: string[]|null;
  readonly reference_name: string|null;

  constructor({
    route53_delegation_set_id = null,
    name_servers = null,
    reference_name = null
  }: {
    route53_delegation_set_id?: string|null,
    name_servers?: string[]|null,
    reference_name?: string|null
  }) {
    this.route53_delegation_set_id = route53_delegation_set_id;
    this.name_servers = name_servers;
    this.reference_name = reference_name;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.route53_delegation_set_id !== null) {
      ih['route53_delegation_set_id'] = this.route53_delegation_set_id;
    }
    if (this.name_servers !== null) {
      ih['name_servers'] = this.name_servers;
    }
    if (this.reference_name !== null) {
      ih['reference_name'] = this.reference_name;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Route53_delegation_set';
  }
}

export class Route53_health_check implements PcoreValue {
  readonly type: string;
  readonly route53_health_check_id: string|null;
  readonly child_health_threshold: number|null;
  readonly child_healthchecks: string[]|null;
  readonly cloudwatch_alarm_name: string|null;
  readonly cloudwatch_alarm_region: string|null;
  readonly enable_sni: boolean|null;
  readonly failure_threshold: number|null;
  readonly fqdn: string|null;
  readonly insufficient_data_health_status: string|null;
  readonly invert_healthcheck: boolean|null;
  readonly ip_address: string|null;
  readonly measure_latency: boolean;
  readonly port: number|null;
  readonly reference_name: string|null;
  readonly regions: string[]|null;
  readonly request_interval: number|null;
  readonly resource_path: string|null;
  readonly search_string: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    type,
    route53_health_check_id = null,
    child_health_threshold = null,
    child_healthchecks = null,
    cloudwatch_alarm_name = null,
    cloudwatch_alarm_region = null,
    enable_sni = null,
    failure_threshold = null,
    fqdn = null,
    insufficient_data_health_status = null,
    invert_healthcheck = null,
    ip_address = null,
    measure_latency = false,
    port = null,
    reference_name = null,
    regions = null,
    request_interval = null,
    resource_path = null,
    search_string = null,
    tags = null
  }: {
    type: string,
    route53_health_check_id?: string|null,
    child_health_threshold?: number|null,
    child_healthchecks?: string[]|null,
    cloudwatch_alarm_name?: string|null,
    cloudwatch_alarm_region?: string|null,
    enable_sni?: boolean|null,
    failure_threshold?: number|null,
    fqdn?: string|null,
    insufficient_data_health_status?: string|null,
    invert_healthcheck?: boolean|null,
    ip_address?: string|null,
    measure_latency?: boolean,
    port?: number|null,
    reference_name?: string|null,
    regions?: string[]|null,
    request_interval?: number|null,
    resource_path?: string|null,
    search_string?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.type = type;
    this.route53_health_check_id = route53_health_check_id;
    this.child_health_threshold = child_health_threshold;
    this.child_healthchecks = child_healthchecks;
    this.cloudwatch_alarm_name = cloudwatch_alarm_name;
    this.cloudwatch_alarm_region = cloudwatch_alarm_region;
    this.enable_sni = enable_sni;
    this.failure_threshold = failure_threshold;
    this.fqdn = fqdn;
    this.insufficient_data_health_status = insufficient_data_health_status;
    this.invert_healthcheck = invert_healthcheck;
    this.ip_address = ip_address;
    this.measure_latency = measure_latency;
    this.port = port;
    this.reference_name = reference_name;
    this.regions = regions;
    this.request_interval = request_interval;
    this.resource_path = resource_path;
    this.search_string = search_string;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['type'] = this.type;
    if (this.route53_health_check_id !== null) {
      ih['route53_health_check_id'] = this.route53_health_check_id;
    }
    if (this.child_health_threshold !== null) {
      ih['child_health_threshold'] = this.child_health_threshold;
    }
    if (this.child_healthchecks !== null) {
      ih['child_healthchecks'] = this.child_healthchecks;
    }
    if (this.cloudwatch_alarm_name !== null) {
      ih['cloudwatch_alarm_name'] = this.cloudwatch_alarm_name;
    }
    if (this.cloudwatch_alarm_region !== null) {
      ih['cloudwatch_alarm_region'] = this.cloudwatch_alarm_region;
    }
    if (this.enable_sni !== null) {
      ih['enable_sni'] = this.enable_sni;
    }
    if (this.failure_threshold !== null) {
      ih['failure_threshold'] = this.failure_threshold;
    }
    if (this.fqdn !== null) {
      ih['fqdn'] = this.fqdn;
    }
    if (this.insufficient_data_health_status !== null) {
      ih['insufficient_data_health_status'] = this.insufficient_data_health_status;
    }
    if (this.invert_healthcheck !== null) {
      ih['invert_healthcheck'] = this.invert_healthcheck;
    }
    if (this.ip_address !== null) {
      ih['ip_address'] = this.ip_address;
    }
    if (this.measure_latency !== false) {
      ih['measure_latency'] = this.measure_latency;
    }
    if (this.port !== null) {
      ih['port'] = this.port;
    }
    if (this.reference_name !== null) {
      ih['reference_name'] = this.reference_name;
    }
    if (this.regions !== null) {
      ih['regions'] = this.regions;
    }
    if (this.request_interval !== null) {
      ih['request_interval'] = this.request_interval;
    }
    if (this.resource_path !== null) {
      ih['resource_path'] = this.resource_path;
    }
    if (this.search_string !== null) {
      ih['search_string'] = this.search_string;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Route53_health_check';
  }
}

export class Route53_query_log implements PcoreValue {
  readonly cloudwatch_log_group_arn: string;
  readonly zone_id: string;
  readonly route53_query_log_id: string|null;

  constructor({
    cloudwatch_log_group_arn,
    zone_id,
    route53_query_log_id = null
  }: {
    cloudwatch_log_group_arn: string,
    zone_id: string,
    route53_query_log_id?: string|null
  }) {
    this.cloudwatch_log_group_arn = cloudwatch_log_group_arn;
    this.zone_id = zone_id;
    this.route53_query_log_id = route53_query_log_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['cloudwatch_log_group_arn'] = this.cloudwatch_log_group_arn;
    ih['zone_id'] = this.zone_id;
    if (this.route53_query_log_id !== null) {
      ih['route53_query_log_id'] = this.route53_query_log_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Route53_query_log';
  }
}

export class Route53_record implements PcoreValue {
  readonly name: string;
  readonly type: string;
  readonly zone_id: string;
  readonly route53_record_id: string|null;
  readonly alias: Anon349[]|null;
  readonly allow_overwrite: boolean;
  readonly failover_routing_policy: Anon316[]|null;
  readonly fqdn: string|null;
  readonly geolocation_routing_policy: Anon350[]|null;
  readonly health_check_id: string|null;
  readonly latency_routing_policy: Anon351[]|null;
  readonly multivalue_answer_routing_policy: boolean|null;
  readonly records: string[]|null;
  readonly set_identifier: string|null;
  readonly ttl: number|null;
  readonly weighted_routing_policy: Anon352[]|null;

  constructor({
    name,
    type,
    zone_id,
    route53_record_id = null,
    alias = null,
    allow_overwrite = true,
    failover_routing_policy = null,
    fqdn = null,
    geolocation_routing_policy = null,
    health_check_id = null,
    latency_routing_policy = null,
    multivalue_answer_routing_policy = null,
    records = null,
    set_identifier = null,
    ttl = null,
    weighted_routing_policy = null
  }: {
    name: string,
    type: string,
    zone_id: string,
    route53_record_id?: string|null,
    alias?: Anon349[]|null,
    allow_overwrite?: boolean,
    failover_routing_policy?: Anon316[]|null,
    fqdn?: string|null,
    geolocation_routing_policy?: Anon350[]|null,
    health_check_id?: string|null,
    latency_routing_policy?: Anon351[]|null,
    multivalue_answer_routing_policy?: boolean|null,
    records?: string[]|null,
    set_identifier?: string|null,
    ttl?: number|null,
    weighted_routing_policy?: Anon352[]|null
  }) {
    this.name = name;
    this.type = type;
    this.zone_id = zone_id;
    this.route53_record_id = route53_record_id;
    this.alias = alias;
    this.allow_overwrite = allow_overwrite;
    this.failover_routing_policy = failover_routing_policy;
    this.fqdn = fqdn;
    this.geolocation_routing_policy = geolocation_routing_policy;
    this.health_check_id = health_check_id;
    this.latency_routing_policy = latency_routing_policy;
    this.multivalue_answer_routing_policy = multivalue_answer_routing_policy;
    this.records = records;
    this.set_identifier = set_identifier;
    this.ttl = ttl;
    this.weighted_routing_policy = weighted_routing_policy;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['type'] = this.type;
    ih['zone_id'] = this.zone_id;
    if (this.route53_record_id !== null) {
      ih['route53_record_id'] = this.route53_record_id;
    }
    if (this.alias !== null) {
      ih['alias'] = this.alias;
    }
    if (this.allow_overwrite !== true) {
      ih['allow_overwrite'] = this.allow_overwrite;
    }
    if (this.failover_routing_policy !== null) {
      ih['failover_routing_policy'] = this.failover_routing_policy;
    }
    if (this.fqdn !== null) {
      ih['fqdn'] = this.fqdn;
    }
    if (this.geolocation_routing_policy !== null) {
      ih['geolocation_routing_policy'] = this.geolocation_routing_policy;
    }
    if (this.health_check_id !== null) {
      ih['health_check_id'] = this.health_check_id;
    }
    if (this.latency_routing_policy !== null) {
      ih['latency_routing_policy'] = this.latency_routing_policy;
    }
    if (this.multivalue_answer_routing_policy !== null) {
      ih['multivalue_answer_routing_policy'] = this.multivalue_answer_routing_policy;
    }
    if (this.records !== null) {
      ih['records'] = this.records;
    }
    if (this.set_identifier !== null) {
      ih['set_identifier'] = this.set_identifier;
    }
    if (this.ttl !== null) {
      ih['ttl'] = this.ttl;
    }
    if (this.weighted_routing_policy !== null) {
      ih['weighted_routing_policy'] = this.weighted_routing_policy;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Route53_record';
  }
}

export class Route53_zone implements PcoreValue {
  readonly name: string;
  readonly route53_zone_id: string|null;
  readonly comment: string;
  readonly delegation_set_id: string|null;
  readonly force_destroy: boolean;
  readonly name_servers: string[]|null;
  readonly tags: {[s: string]: string}|null;
  readonly vpc: Anon353[]|null;
  readonly zone_id: string|null;

  constructor({
    name,
    route53_zone_id = null,
    comment = 'Managed by Terraform',
    delegation_set_id = null,
    force_destroy = false,
    name_servers = null,
    tags = null,
    vpc = null,
    zone_id = null
  }: {
    name: string,
    route53_zone_id?: string|null,
    comment?: string,
    delegation_set_id?: string|null,
    force_destroy?: boolean,
    name_servers?: string[]|null,
    tags?: {[s: string]: string}|null,
    vpc?: Anon353[]|null,
    zone_id?: string|null
  }) {
    this.name = name;
    this.route53_zone_id = route53_zone_id;
    this.comment = comment;
    this.delegation_set_id = delegation_set_id;
    this.force_destroy = force_destroy;
    this.name_servers = name_servers;
    this.tags = tags;
    this.vpc = vpc;
    this.zone_id = zone_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.route53_zone_id !== null) {
      ih['route53_zone_id'] = this.route53_zone_id;
    }
    if (this.comment !== 'Managed by Terraform') {
      ih['comment'] = this.comment;
    }
    if (this.delegation_set_id !== null) {
      ih['delegation_set_id'] = this.delegation_set_id;
    }
    if (this.force_destroy !== false) {
      ih['force_destroy'] = this.force_destroy;
    }
    if (this.name_servers !== null) {
      ih['name_servers'] = this.name_servers;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpc !== null) {
      ih['vpc'] = this.vpc;
    }
    if (this.zone_id !== null) {
      ih['zone_id'] = this.zone_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Route53_zone';
  }
}

export class Route53_zone_association implements PcoreValue {
  readonly vpc_id: string;
  readonly zone_id: string;
  readonly route53_zone_association_id: string|null;
  readonly vpc_region: string|null;

  constructor({
    vpc_id,
    zone_id,
    route53_zone_association_id = null,
    vpc_region = null
  }: {
    vpc_id: string,
    zone_id: string,
    route53_zone_association_id?: string|null,
    vpc_region?: string|null
  }) {
    this.vpc_id = vpc_id;
    this.zone_id = zone_id;
    this.route53_zone_association_id = route53_zone_association_id;
    this.vpc_region = vpc_region;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['vpc_id'] = this.vpc_id;
    ih['zone_id'] = this.zone_id;
    if (this.route53_zone_association_id !== null) {
      ih['route53_zone_association_id'] = this.route53_zone_association_id;
    }
    if (this.vpc_region !== null) {
      ih['vpc_region'] = this.vpc_region;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Route53_zone_association';
  }
}

export class Route_table implements PcoreValue {
  readonly vpc_id: string;
  readonly route_table_id: string|null;
  readonly owner_id: string|null;
  readonly propagating_vgws: string[]|null;
  readonly route: Anon161[]|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    vpc_id,
    route_table_id = null,
    owner_id = null,
    propagating_vgws = null,
    route = null,
    tags = null
  }: {
    vpc_id: string,
    route_table_id?: string|null,
    owner_id?: string|null,
    propagating_vgws?: string[]|null,
    route?: Anon161[]|null,
    tags?: {[s: string]: string}|null
  }) {
    this.vpc_id = vpc_id;
    this.route_table_id = route_table_id;
    this.owner_id = owner_id;
    this.propagating_vgws = propagating_vgws;
    this.route = route;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['vpc_id'] = this.vpc_id;
    if (this.route_table_id !== null) {
      ih['route_table_id'] = this.route_table_id;
    }
    if (this.owner_id !== null) {
      ih['owner_id'] = this.owner_id;
    }
    if (this.propagating_vgws !== null) {
      ih['propagating_vgws'] = this.propagating_vgws;
    }
    if (this.route !== null) {
      ih['route'] = this.route;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Route_table';
  }
}

export class Route_table_association implements PcoreValue {
  readonly route_table_id: string;
  readonly subnet_id: string;
  readonly route_table_association_id: string|null;

  constructor({
    route_table_id,
    subnet_id,
    route_table_association_id = null
  }: {
    route_table_id: string,
    subnet_id: string,
    route_table_association_id?: string|null
  }) {
    this.route_table_id = route_table_id;
    this.subnet_id = subnet_id;
    this.route_table_association_id = route_table_association_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['route_table_id'] = this.route_table_id;
    ih['subnet_id'] = this.subnet_id;
    if (this.route_table_association_id !== null) {
      ih['route_table_association_id'] = this.route_table_association_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Route_table_association';
  }
}

export class S3_account_public_access_block implements PcoreValue {
  readonly s3_account_public_access_block_id: string|null;
  readonly account_id: string|null;
  readonly block_public_acls: boolean;
  readonly block_public_policy: boolean;
  readonly ignore_public_acls: boolean;
  readonly restrict_public_buckets: boolean;

  constructor({
    s3_account_public_access_block_id = null,
    account_id = null,
    block_public_acls = false,
    block_public_policy = false,
    ignore_public_acls = false,
    restrict_public_buckets = false
  }: {
    s3_account_public_access_block_id?: string|null,
    account_id?: string|null,
    block_public_acls?: boolean,
    block_public_policy?: boolean,
    ignore_public_acls?: boolean,
    restrict_public_buckets?: boolean
  }) {
    this.s3_account_public_access_block_id = s3_account_public_access_block_id;
    this.account_id = account_id;
    this.block_public_acls = block_public_acls;
    this.block_public_policy = block_public_policy;
    this.ignore_public_acls = ignore_public_acls;
    this.restrict_public_buckets = restrict_public_buckets;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.s3_account_public_access_block_id !== null) {
      ih['s3_account_public_access_block_id'] = this.s3_account_public_access_block_id;
    }
    if (this.account_id !== null) {
      ih['account_id'] = this.account_id;
    }
    if (this.block_public_acls !== false) {
      ih['block_public_acls'] = this.block_public_acls;
    }
    if (this.block_public_policy !== false) {
      ih['block_public_policy'] = this.block_public_policy;
    }
    if (this.ignore_public_acls !== false) {
      ih['ignore_public_acls'] = this.ignore_public_acls;
    }
    if (this.restrict_public_buckets !== false) {
      ih['restrict_public_buckets'] = this.restrict_public_buckets;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::S3_account_public_access_block';
  }
}

export class S3_bucket implements PcoreValue {
  readonly s3_bucket_id: string|null;
  readonly acceleration_status: string|null;
  readonly acl: string;
  readonly arn: string|null;
  readonly bucket: string|null;
  readonly bucket_domain_name: string|null;
  readonly bucket_prefix: string|null;
  readonly bucket_regional_domain_name: string|null;
  readonly cors_rule: Anon354[]|null;
  readonly force_destroy: boolean;
  readonly hosted_zone_id: string|null;
  readonly lifecycle_rule: Anon359[]|null;
  readonly logging: Anon360[]|null;
  readonly object_lock_configuration: Anon363|null;
  readonly policy: string|null;
  readonly region: string|null;
  readonly replication_configuration: Anon369|null;
  readonly request_payer: string|null;
  readonly server_side_encryption_configuration: Anon372|null;
  readonly tags: {[s: string]: string}|null;
  readonly versioning: Anon373|null;
  readonly website: Anon374|null;
  readonly website_domain: string|null;
  readonly website_endpoint: string|null;

  constructor({
    s3_bucket_id = null,
    acceleration_status = null,
    acl = 'private',
    arn = null,
    bucket = null,
    bucket_domain_name = null,
    bucket_prefix = null,
    bucket_regional_domain_name = null,
    cors_rule = null,
    force_destroy = false,
    hosted_zone_id = null,
    lifecycle_rule = null,
    logging = null,
    object_lock_configuration = null,
    policy = null,
    region = null,
    replication_configuration = null,
    request_payer = null,
    server_side_encryption_configuration = null,
    tags = null,
    versioning = null,
    website = null,
    website_domain = null,
    website_endpoint = null
  }: {
    s3_bucket_id?: string|null,
    acceleration_status?: string|null,
    acl?: string,
    arn?: string|null,
    bucket?: string|null,
    bucket_domain_name?: string|null,
    bucket_prefix?: string|null,
    bucket_regional_domain_name?: string|null,
    cors_rule?: Anon354[]|null,
    force_destroy?: boolean,
    hosted_zone_id?: string|null,
    lifecycle_rule?: Anon359[]|null,
    logging?: Anon360[]|null,
    object_lock_configuration?: Anon363|null,
    policy?: string|null,
    region?: string|null,
    replication_configuration?: Anon369|null,
    request_payer?: string|null,
    server_side_encryption_configuration?: Anon372|null,
    tags?: {[s: string]: string}|null,
    versioning?: Anon373|null,
    website?: Anon374|null,
    website_domain?: string|null,
    website_endpoint?: string|null
  }) {
    this.s3_bucket_id = s3_bucket_id;
    this.acceleration_status = acceleration_status;
    this.acl = acl;
    this.arn = arn;
    this.bucket = bucket;
    this.bucket_domain_name = bucket_domain_name;
    this.bucket_prefix = bucket_prefix;
    this.bucket_regional_domain_name = bucket_regional_domain_name;
    this.cors_rule = cors_rule;
    this.force_destroy = force_destroy;
    this.hosted_zone_id = hosted_zone_id;
    this.lifecycle_rule = lifecycle_rule;
    this.logging = logging;
    this.object_lock_configuration = object_lock_configuration;
    this.policy = policy;
    this.region = region;
    this.replication_configuration = replication_configuration;
    this.request_payer = request_payer;
    this.server_side_encryption_configuration = server_side_encryption_configuration;
    this.tags = tags;
    this.versioning = versioning;
    this.website = website;
    this.website_domain = website_domain;
    this.website_endpoint = website_endpoint;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.s3_bucket_id !== null) {
      ih['s3_bucket_id'] = this.s3_bucket_id;
    }
    if (this.acceleration_status !== null) {
      ih['acceleration_status'] = this.acceleration_status;
    }
    if (this.acl !== 'private') {
      ih['acl'] = this.acl;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.bucket !== null) {
      ih['bucket'] = this.bucket;
    }
    if (this.bucket_domain_name !== null) {
      ih['bucket_domain_name'] = this.bucket_domain_name;
    }
    if (this.bucket_prefix !== null) {
      ih['bucket_prefix'] = this.bucket_prefix;
    }
    if (this.bucket_regional_domain_name !== null) {
      ih['bucket_regional_domain_name'] = this.bucket_regional_domain_name;
    }
    if (this.cors_rule !== null) {
      ih['cors_rule'] = this.cors_rule;
    }
    if (this.force_destroy !== false) {
      ih['force_destroy'] = this.force_destroy;
    }
    if (this.hosted_zone_id !== null) {
      ih['hosted_zone_id'] = this.hosted_zone_id;
    }
    if (this.lifecycle_rule !== null) {
      ih['lifecycle_rule'] = this.lifecycle_rule;
    }
    if (this.logging !== null) {
      ih['logging'] = this.logging;
    }
    if (this.object_lock_configuration !== null) {
      ih['object_lock_configuration'] = this.object_lock_configuration;
    }
    if (this.policy !== null) {
      ih['policy'] = this.policy;
    }
    if (this.region !== null) {
      ih['region'] = this.region;
    }
    if (this.replication_configuration !== null) {
      ih['replication_configuration'] = this.replication_configuration;
    }
    if (this.request_payer !== null) {
      ih['request_payer'] = this.request_payer;
    }
    if (this.server_side_encryption_configuration !== null) {
      ih['server_side_encryption_configuration'] = this.server_side_encryption_configuration;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.versioning !== null) {
      ih['versioning'] = this.versioning;
    }
    if (this.website !== null) {
      ih['website'] = this.website;
    }
    if (this.website_domain !== null) {
      ih['website_domain'] = this.website_domain;
    }
    if (this.website_endpoint !== null) {
      ih['website_endpoint'] = this.website_endpoint;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::S3_bucket';
  }
}

export class S3_bucket_inventory implements PcoreValue {
  readonly bucket: string;
  readonly destination: Anon379;
  readonly included_object_versions: string;
  readonly name: string;
  readonly schedule: Anon380;
  readonly s3_bucket_inventory_id: string|null;
  readonly enabled: boolean;
  readonly filter: Anon381|null;
  readonly optional_fields: string[]|null;

  constructor({
    bucket,
    destination,
    included_object_versions,
    name,
    schedule,
    s3_bucket_inventory_id = null,
    enabled = true,
    filter = null,
    optional_fields = null
  }: {
    bucket: string,
    destination: Anon379,
    included_object_versions: string,
    name: string,
    schedule: Anon380,
    s3_bucket_inventory_id?: string|null,
    enabled?: boolean,
    filter?: Anon381|null,
    optional_fields?: string[]|null
  }) {
    this.bucket = bucket;
    this.destination = destination;
    this.included_object_versions = included_object_versions;
    this.name = name;
    this.schedule = schedule;
    this.s3_bucket_inventory_id = s3_bucket_inventory_id;
    this.enabled = enabled;
    this.filter = filter;
    this.optional_fields = optional_fields;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['bucket'] = this.bucket;
    ih['destination'] = this.destination;
    ih['included_object_versions'] = this.included_object_versions;
    ih['name'] = this.name;
    ih['schedule'] = this.schedule;
    if (this.s3_bucket_inventory_id !== null) {
      ih['s3_bucket_inventory_id'] = this.s3_bucket_inventory_id;
    }
    if (this.enabled !== true) {
      ih['enabled'] = this.enabled;
    }
    if (this.filter !== null) {
      ih['filter'] = this.filter;
    }
    if (this.optional_fields !== null) {
      ih['optional_fields'] = this.optional_fields;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::S3_bucket_inventory';
  }
}

export class S3_bucket_metric implements PcoreValue {
  readonly bucket: string;
  readonly name: string;
  readonly s3_bucket_metric_id: string|null;
  readonly filter: Anon366|null;

  constructor({
    bucket,
    name,
    s3_bucket_metric_id = null,
    filter = null
  }: {
    bucket: string,
    name: string,
    s3_bucket_metric_id?: string|null,
    filter?: Anon366|null
  }) {
    this.bucket = bucket;
    this.name = name;
    this.s3_bucket_metric_id = s3_bucket_metric_id;
    this.filter = filter;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['bucket'] = this.bucket;
    ih['name'] = this.name;
    if (this.s3_bucket_metric_id !== null) {
      ih['s3_bucket_metric_id'] = this.s3_bucket_metric_id;
    }
    if (this.filter !== null) {
      ih['filter'] = this.filter;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::S3_bucket_metric';
  }
}

export class S3_bucket_notification implements PcoreValue {
  readonly bucket: string;
  readonly s3_bucket_notification_id: string|null;
  readonly lambda_function: Anon382[]|null;
  readonly queue: Anon383[]|null;
  readonly topic: Anon384[]|null;

  constructor({
    bucket,
    s3_bucket_notification_id = null,
    lambda_function = null,
    queue = null,
    topic = null
  }: {
    bucket: string,
    s3_bucket_notification_id?: string|null,
    lambda_function?: Anon382[]|null,
    queue?: Anon383[]|null,
    topic?: Anon384[]|null
  }) {
    this.bucket = bucket;
    this.s3_bucket_notification_id = s3_bucket_notification_id;
    this.lambda_function = lambda_function;
    this.queue = queue;
    this.topic = topic;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['bucket'] = this.bucket;
    if (this.s3_bucket_notification_id !== null) {
      ih['s3_bucket_notification_id'] = this.s3_bucket_notification_id;
    }
    if (this.lambda_function !== null) {
      ih['lambda_function'] = this.lambda_function;
    }
    if (this.queue !== null) {
      ih['queue'] = this.queue;
    }
    if (this.topic !== null) {
      ih['topic'] = this.topic;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::S3_bucket_notification';
  }
}

export class S3_bucket_object implements PcoreValue {
  readonly bucket: string;
  readonly key: string;
  readonly s3_bucket_object_id: string|null;
  readonly acl: string;
  readonly cache_control: string|null;
  readonly content: string|null;
  readonly content_base64: string|null;
  readonly content_disposition: string|null;
  readonly content_encoding: string|null;
  readonly content_language: string|null;
  readonly content_type: string|null;
  readonly etag: string|null;
  readonly kms_key_id: string|null;
  readonly server_side_encryption: string|null;
  readonly source: string|null;
  readonly storage_class: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly version_id: string|null;
  readonly website_redirect: string|null;

  constructor({
    bucket,
    key,
    s3_bucket_object_id = null,
    acl = 'private',
    cache_control = null,
    content = null,
    content_base64 = null,
    content_disposition = null,
    content_encoding = null,
    content_language = null,
    content_type = null,
    etag = null,
    kms_key_id = null,
    server_side_encryption = null,
    source = null,
    storage_class = null,
    tags = null,
    version_id = null,
    website_redirect = null
  }: {
    bucket: string,
    key: string,
    s3_bucket_object_id?: string|null,
    acl?: string,
    cache_control?: string|null,
    content?: string|null,
    content_base64?: string|null,
    content_disposition?: string|null,
    content_encoding?: string|null,
    content_language?: string|null,
    content_type?: string|null,
    etag?: string|null,
    kms_key_id?: string|null,
    server_side_encryption?: string|null,
    source?: string|null,
    storage_class?: string|null,
    tags?: {[s: string]: string}|null,
    version_id?: string|null,
    website_redirect?: string|null
  }) {
    this.bucket = bucket;
    this.key = key;
    this.s3_bucket_object_id = s3_bucket_object_id;
    this.acl = acl;
    this.cache_control = cache_control;
    this.content = content;
    this.content_base64 = content_base64;
    this.content_disposition = content_disposition;
    this.content_encoding = content_encoding;
    this.content_language = content_language;
    this.content_type = content_type;
    this.etag = etag;
    this.kms_key_id = kms_key_id;
    this.server_side_encryption = server_side_encryption;
    this.source = source;
    this.storage_class = storage_class;
    this.tags = tags;
    this.version_id = version_id;
    this.website_redirect = website_redirect;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['bucket'] = this.bucket;
    ih['key'] = this.key;
    if (this.s3_bucket_object_id !== null) {
      ih['s3_bucket_object_id'] = this.s3_bucket_object_id;
    }
    if (this.acl !== 'private') {
      ih['acl'] = this.acl;
    }
    if (this.cache_control !== null) {
      ih['cache_control'] = this.cache_control;
    }
    if (this.content !== null) {
      ih['content'] = this.content;
    }
    if (this.content_base64 !== null) {
      ih['content_base64'] = this.content_base64;
    }
    if (this.content_disposition !== null) {
      ih['content_disposition'] = this.content_disposition;
    }
    if (this.content_encoding !== null) {
      ih['content_encoding'] = this.content_encoding;
    }
    if (this.content_language !== null) {
      ih['content_language'] = this.content_language;
    }
    if (this.content_type !== null) {
      ih['content_type'] = this.content_type;
    }
    if (this.etag !== null) {
      ih['etag'] = this.etag;
    }
    if (this.kms_key_id !== null) {
      ih['kms_key_id'] = this.kms_key_id;
    }
    if (this.server_side_encryption !== null) {
      ih['server_side_encryption'] = this.server_side_encryption;
    }
    if (this.source !== null) {
      ih['source'] = this.source;
    }
    if (this.storage_class !== null) {
      ih['storage_class'] = this.storage_class;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.version_id !== null) {
      ih['version_id'] = this.version_id;
    }
    if (this.website_redirect !== null) {
      ih['website_redirect'] = this.website_redirect;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::S3_bucket_object';
  }
}

export class S3_bucket_policy implements PcoreValue {
  readonly bucket: string;
  readonly policy: string;
  readonly s3_bucket_policy_id: string|null;

  constructor({
    bucket,
    policy,
    s3_bucket_policy_id = null
  }: {
    bucket: string,
    policy: string,
    s3_bucket_policy_id?: string|null
  }) {
    this.bucket = bucket;
    this.policy = policy;
    this.s3_bucket_policy_id = s3_bucket_policy_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['bucket'] = this.bucket;
    ih['policy'] = this.policy;
    if (this.s3_bucket_policy_id !== null) {
      ih['s3_bucket_policy_id'] = this.s3_bucket_policy_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::S3_bucket_policy';
  }
}

export class S3_bucket_public_access_block implements PcoreValue {
  readonly bucket: string;
  readonly s3_bucket_public_access_block_id: string|null;
  readonly block_public_acls: boolean;
  readonly block_public_policy: boolean;
  readonly ignore_public_acls: boolean;
  readonly restrict_public_buckets: boolean;

  constructor({
    bucket,
    s3_bucket_public_access_block_id = null,
    block_public_acls = false,
    block_public_policy = false,
    ignore_public_acls = false,
    restrict_public_buckets = false
  }: {
    bucket: string,
    s3_bucket_public_access_block_id?: string|null,
    block_public_acls?: boolean,
    block_public_policy?: boolean,
    ignore_public_acls?: boolean,
    restrict_public_buckets?: boolean
  }) {
    this.bucket = bucket;
    this.s3_bucket_public_access_block_id = s3_bucket_public_access_block_id;
    this.block_public_acls = block_public_acls;
    this.block_public_policy = block_public_policy;
    this.ignore_public_acls = ignore_public_acls;
    this.restrict_public_buckets = restrict_public_buckets;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['bucket'] = this.bucket;
    if (this.s3_bucket_public_access_block_id !== null) {
      ih['s3_bucket_public_access_block_id'] = this.s3_bucket_public_access_block_id;
    }
    if (this.block_public_acls !== false) {
      ih['block_public_acls'] = this.block_public_acls;
    }
    if (this.block_public_policy !== false) {
      ih['block_public_policy'] = this.block_public_policy;
    }
    if (this.ignore_public_acls !== false) {
      ih['ignore_public_acls'] = this.ignore_public_acls;
    }
    if (this.restrict_public_buckets !== false) {
      ih['restrict_public_buckets'] = this.restrict_public_buckets;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::S3_bucket_public_access_block';
  }
}

export class Sagemaker_notebook_instance implements PcoreValue {
  readonly instance_type: string;
  readonly name: string;
  readonly role_arn: string;
  readonly sagemaker_notebook_instance_id: string|null;
  readonly arn: string|null;
  readonly kms_key_id: string|null;
  readonly security_groups: string[]|null;
  readonly subnet_id: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    instance_type,
    name,
    role_arn,
    sagemaker_notebook_instance_id = null,
    arn = null,
    kms_key_id = null,
    security_groups = null,
    subnet_id = null,
    tags = null
  }: {
    instance_type: string,
    name: string,
    role_arn: string,
    sagemaker_notebook_instance_id?: string|null,
    arn?: string|null,
    kms_key_id?: string|null,
    security_groups?: string[]|null,
    subnet_id?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.instance_type = instance_type;
    this.name = name;
    this.role_arn = role_arn;
    this.sagemaker_notebook_instance_id = sagemaker_notebook_instance_id;
    this.arn = arn;
    this.kms_key_id = kms_key_id;
    this.security_groups = security_groups;
    this.subnet_id = subnet_id;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['instance_type'] = this.instance_type;
    ih['name'] = this.name;
    ih['role_arn'] = this.role_arn;
    if (this.sagemaker_notebook_instance_id !== null) {
      ih['sagemaker_notebook_instance_id'] = this.sagemaker_notebook_instance_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.kms_key_id !== null) {
      ih['kms_key_id'] = this.kms_key_id;
    }
    if (this.security_groups !== null) {
      ih['security_groups'] = this.security_groups;
    }
    if (this.subnet_id !== null) {
      ih['subnet_id'] = this.subnet_id;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Sagemaker_notebook_instance';
  }
}

export class Secretsmanager_secret implements PcoreValue {
  readonly secretsmanager_secret_id: string|null;
  readonly arn: string|null;
  readonly description: string|null;
  readonly kms_key_id: string|null;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly policy: string|null;
  readonly recovery_window_in_days: number;
  readonly rotation_enabled: boolean|null;
  readonly rotation_lambda_arn: string|null;
  readonly rotation_rules: Anon385|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    secretsmanager_secret_id = null,
    arn = null,
    description = null,
    kms_key_id = null,
    name = null,
    name_prefix = null,
    policy = null,
    recovery_window_in_days = 30,
    rotation_enabled = null,
    rotation_lambda_arn = null,
    rotation_rules = null,
    tags = null
  }: {
    secretsmanager_secret_id?: string|null,
    arn?: string|null,
    description?: string|null,
    kms_key_id?: string|null,
    name?: string|null,
    name_prefix?: string|null,
    policy?: string|null,
    recovery_window_in_days?: number,
    rotation_enabled?: boolean|null,
    rotation_lambda_arn?: string|null,
    rotation_rules?: Anon385|null,
    tags?: {[s: string]: string}|null
  }) {
    this.secretsmanager_secret_id = secretsmanager_secret_id;
    this.arn = arn;
    this.description = description;
    this.kms_key_id = kms_key_id;
    this.name = name;
    this.name_prefix = name_prefix;
    this.policy = policy;
    this.recovery_window_in_days = recovery_window_in_days;
    this.rotation_enabled = rotation_enabled;
    this.rotation_lambda_arn = rotation_lambda_arn;
    this.rotation_rules = rotation_rules;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.secretsmanager_secret_id !== null) {
      ih['secretsmanager_secret_id'] = this.secretsmanager_secret_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.kms_key_id !== null) {
      ih['kms_key_id'] = this.kms_key_id;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.policy !== null) {
      ih['policy'] = this.policy;
    }
    if (this.recovery_window_in_days !== 30) {
      ih['recovery_window_in_days'] = this.recovery_window_in_days;
    }
    if (this.rotation_enabled !== null) {
      ih['rotation_enabled'] = this.rotation_enabled;
    }
    if (this.rotation_lambda_arn !== null) {
      ih['rotation_lambda_arn'] = this.rotation_lambda_arn;
    }
    if (this.rotation_rules !== null) {
      ih['rotation_rules'] = this.rotation_rules;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Secretsmanager_secret';
  }
}

export class Secretsmanager_secret_version implements PcoreValue {
  readonly secret_id: string;
  readonly secretsmanager_secret_version_id: string|null;
  readonly arn: string|null;
  readonly secret_binary: string|null;
  readonly secret_string: string|null;
  readonly version_id: string|null;
  readonly version_stages: string[]|null;

  constructor({
    secret_id,
    secretsmanager_secret_version_id = null,
    arn = null,
    secret_binary = null,
    secret_string = null,
    version_id = null,
    version_stages = null
  }: {
    secret_id: string,
    secretsmanager_secret_version_id?: string|null,
    arn?: string|null,
    secret_binary?: string|null,
    secret_string?: string|null,
    version_id?: string|null,
    version_stages?: string[]|null
  }) {
    this.secret_id = secret_id;
    this.secretsmanager_secret_version_id = secretsmanager_secret_version_id;
    this.arn = arn;
    this.secret_binary = secret_binary;
    this.secret_string = secret_string;
    this.version_id = version_id;
    this.version_stages = version_stages;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['secret_id'] = this.secret_id;
    if (this.secretsmanager_secret_version_id !== null) {
      ih['secretsmanager_secret_version_id'] = this.secretsmanager_secret_version_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.secret_binary !== null) {
      ih['secret_binary'] = this.secret_binary;
    }
    if (this.secret_string !== null) {
      ih['secret_string'] = this.secret_string;
    }
    if (this.version_id !== null) {
      ih['version_id'] = this.version_id;
    }
    if (this.version_stages !== null) {
      ih['version_stages'] = this.version_stages;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Secretsmanager_secret_version';
  }
}

export class Security_group implements PcoreValue {
  readonly security_group_id: string|null;
  readonly arn: string|null;
  readonly description: string;
  readonly egress: Anon162[]|null;
  readonly ingress: Anon162[]|null;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly owner_id: string|null;
  readonly revoke_rules_on_delete: boolean;
  readonly tags: {[s: string]: string}|null;
  readonly vpc_id: string|null;

  constructor({
    security_group_id = null,
    arn = null,
    description = 'Managed by Terraform',
    egress = null,
    ingress = null,
    name = null,
    name_prefix = null,
    owner_id = null,
    revoke_rules_on_delete = false,
    tags = null,
    vpc_id = null
  }: {
    security_group_id?: string|null,
    arn?: string|null,
    description?: string,
    egress?: Anon162[]|null,
    ingress?: Anon162[]|null,
    name?: string|null,
    name_prefix?: string|null,
    owner_id?: string|null,
    revoke_rules_on_delete?: boolean,
    tags?: {[s: string]: string}|null,
    vpc_id?: string|null
  }) {
    this.security_group_id = security_group_id;
    this.arn = arn;
    this.description = description;
    this.egress = egress;
    this.ingress = ingress;
    this.name = name;
    this.name_prefix = name_prefix;
    this.owner_id = owner_id;
    this.revoke_rules_on_delete = revoke_rules_on_delete;
    this.tags = tags;
    this.vpc_id = vpc_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.security_group_id !== null) {
      ih['security_group_id'] = this.security_group_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== 'Managed by Terraform') {
      ih['description'] = this.description;
    }
    if (this.egress !== null) {
      ih['egress'] = this.egress;
    }
    if (this.ingress !== null) {
      ih['ingress'] = this.ingress;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.owner_id !== null) {
      ih['owner_id'] = this.owner_id;
    }
    if (this.revoke_rules_on_delete !== false) {
      ih['revoke_rules_on_delete'] = this.revoke_rules_on_delete;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpc_id !== null) {
      ih['vpc_id'] = this.vpc_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Security_group';
  }
}

export class Security_group_rule implements PcoreValue {
  readonly from_port: number;
  readonly protocol: string;
  readonly security_group_id: string;
  readonly to_port: number;
  readonly type: string;
  readonly security_group_rule_id: string|null;
  readonly cidr_blocks: string[]|null;
  readonly description: string|null;
  readonly ipv6_cidr_blocks: string[]|null;
  readonly prefix_list_ids: string[]|null;
  readonly self: boolean;
  readonly source_security_group_id: string|null;

  constructor({
    from_port,
    protocol,
    security_group_id,
    to_port,
    type,
    security_group_rule_id = null,
    cidr_blocks = null,
    description = null,
    ipv6_cidr_blocks = null,
    prefix_list_ids = null,
    self = false,
    source_security_group_id = null
  }: {
    from_port: number,
    protocol: string,
    security_group_id: string,
    to_port: number,
    type: string,
    security_group_rule_id?: string|null,
    cidr_blocks?: string[]|null,
    description?: string|null,
    ipv6_cidr_blocks?: string[]|null,
    prefix_list_ids?: string[]|null,
    self?: boolean,
    source_security_group_id?: string|null
  }) {
    this.from_port = from_port;
    this.protocol = protocol;
    this.security_group_id = security_group_id;
    this.to_port = to_port;
    this.type = type;
    this.security_group_rule_id = security_group_rule_id;
    this.cidr_blocks = cidr_blocks;
    this.description = description;
    this.ipv6_cidr_blocks = ipv6_cidr_blocks;
    this.prefix_list_ids = prefix_list_ids;
    this.self = self;
    this.source_security_group_id = source_security_group_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['from_port'] = this.from_port;
    ih['protocol'] = this.protocol;
    ih['security_group_id'] = this.security_group_id;
    ih['to_port'] = this.to_port;
    ih['type'] = this.type;
    if (this.security_group_rule_id !== null) {
      ih['security_group_rule_id'] = this.security_group_rule_id;
    }
    if (this.cidr_blocks !== null) {
      ih['cidr_blocks'] = this.cidr_blocks;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.ipv6_cidr_blocks !== null) {
      ih['ipv6_cidr_blocks'] = this.ipv6_cidr_blocks;
    }
    if (this.prefix_list_ids !== null) {
      ih['prefix_list_ids'] = this.prefix_list_ids;
    }
    if (this.self !== false) {
      ih['self'] = this.self;
    }
    if (this.source_security_group_id !== null) {
      ih['source_security_group_id'] = this.source_security_group_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Security_group_rule';
  }
}

export class Securityhub_account implements PcoreValue {
  readonly securityhub_account_id: string|null;

  constructor({
    securityhub_account_id = null
  }: {
    securityhub_account_id?: string|null
  }) {
    this.securityhub_account_id = securityhub_account_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.securityhub_account_id !== null) {
      ih['securityhub_account_id'] = this.securityhub_account_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Securityhub_account';
  }
}

export class Securityhub_product_subscription implements PcoreValue {
  readonly product_arn: string;
  readonly securityhub_product_subscription_id: string|null;
  readonly arn: string|null;

  constructor({
    product_arn,
    securityhub_product_subscription_id = null,
    arn = null
  }: {
    product_arn: string,
    securityhub_product_subscription_id?: string|null,
    arn?: string|null
  }) {
    this.product_arn = product_arn;
    this.securityhub_product_subscription_id = securityhub_product_subscription_id;
    this.arn = arn;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['product_arn'] = this.product_arn;
    if (this.securityhub_product_subscription_id !== null) {
      ih['securityhub_product_subscription_id'] = this.securityhub_product_subscription_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Securityhub_product_subscription';
  }
}

export class Securityhub_standards_subscription implements PcoreValue {
  readonly standards_arn: string;
  readonly securityhub_standards_subscription_id: string|null;

  constructor({
    standards_arn,
    securityhub_standards_subscription_id = null
  }: {
    standards_arn: string,
    securityhub_standards_subscription_id?: string|null
  }) {
    this.standards_arn = standards_arn;
    this.securityhub_standards_subscription_id = securityhub_standards_subscription_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['standards_arn'] = this.standards_arn;
    if (this.securityhub_standards_subscription_id !== null) {
      ih['securityhub_standards_subscription_id'] = this.securityhub_standards_subscription_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Securityhub_standards_subscription';
  }
}

export class Service_discovery_http_namespace implements PcoreValue {
  readonly name: string;
  readonly service_discovery_http_namespace_id: string|null;
  readonly arn: string|null;
  readonly description: string|null;

  constructor({
    name,
    service_discovery_http_namespace_id = null,
    arn = null,
    description = null
  }: {
    name: string,
    service_discovery_http_namespace_id?: string|null,
    arn?: string|null,
    description?: string|null
  }) {
    this.name = name;
    this.service_discovery_http_namespace_id = service_discovery_http_namespace_id;
    this.arn = arn;
    this.description = description;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.service_discovery_http_namespace_id !== null) {
      ih['service_discovery_http_namespace_id'] = this.service_discovery_http_namespace_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Service_discovery_http_namespace';
  }
}

export class Service_discovery_private_dns_namespace implements PcoreValue {
  readonly name: string;
  readonly vpc: string;
  readonly service_discovery_private_dns_namespace_id: string|null;
  readonly arn: string|null;
  readonly description: string|null;
  readonly hosted_zone: string|null;

  constructor({
    name,
    vpc,
    service_discovery_private_dns_namespace_id = null,
    arn = null,
    description = null,
    hosted_zone = null
  }: {
    name: string,
    vpc: string,
    service_discovery_private_dns_namespace_id?: string|null,
    arn?: string|null,
    description?: string|null,
    hosted_zone?: string|null
  }) {
    this.name = name;
    this.vpc = vpc;
    this.service_discovery_private_dns_namespace_id = service_discovery_private_dns_namespace_id;
    this.arn = arn;
    this.description = description;
    this.hosted_zone = hosted_zone;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['vpc'] = this.vpc;
    if (this.service_discovery_private_dns_namespace_id !== null) {
      ih['service_discovery_private_dns_namespace_id'] = this.service_discovery_private_dns_namespace_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.hosted_zone !== null) {
      ih['hosted_zone'] = this.hosted_zone;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Service_discovery_private_dns_namespace';
  }
}

export class Service_discovery_public_dns_namespace implements PcoreValue {
  readonly name: string;
  readonly service_discovery_public_dns_namespace_id: string|null;
  readonly arn: string|null;
  readonly description: string|null;
  readonly hosted_zone: string|null;

  constructor({
    name,
    service_discovery_public_dns_namespace_id = null,
    arn = null,
    description = null,
    hosted_zone = null
  }: {
    name: string,
    service_discovery_public_dns_namespace_id?: string|null,
    arn?: string|null,
    description?: string|null,
    hosted_zone?: string|null
  }) {
    this.name = name;
    this.service_discovery_public_dns_namespace_id = service_discovery_public_dns_namespace_id;
    this.arn = arn;
    this.description = description;
    this.hosted_zone = hosted_zone;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.service_discovery_public_dns_namespace_id !== null) {
      ih['service_discovery_public_dns_namespace_id'] = this.service_discovery_public_dns_namespace_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.hosted_zone !== null) {
      ih['hosted_zone'] = this.hosted_zone;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Service_discovery_public_dns_namespace';
  }
}

export class Service_discovery_service implements PcoreValue {
  readonly name: string;
  readonly service_discovery_service_id: string|null;
  readonly arn: string|null;
  readonly description: string|null;
  readonly dns_config: Anon387|null;
  readonly health_check_config: Anon388|null;
  readonly health_check_custom_config: Anon389|null;

  constructor({
    name,
    service_discovery_service_id = null,
    arn = null,
    description = null,
    dns_config = null,
    health_check_config = null,
    health_check_custom_config = null
  }: {
    name: string,
    service_discovery_service_id?: string|null,
    arn?: string|null,
    description?: string|null,
    dns_config?: Anon387|null,
    health_check_config?: Anon388|null,
    health_check_custom_config?: Anon389|null
  }) {
    this.name = name;
    this.service_discovery_service_id = service_discovery_service_id;
    this.arn = arn;
    this.description = description;
    this.dns_config = dns_config;
    this.health_check_config = health_check_config;
    this.health_check_custom_config = health_check_custom_config;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.service_discovery_service_id !== null) {
      ih['service_discovery_service_id'] = this.service_discovery_service_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.dns_config !== null) {
      ih['dns_config'] = this.dns_config;
    }
    if (this.health_check_config !== null) {
      ih['health_check_config'] = this.health_check_config;
    }
    if (this.health_check_custom_config !== null) {
      ih['health_check_custom_config'] = this.health_check_custom_config;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Service_discovery_service';
  }
}

export class Servicecatalog_portfolio implements PcoreValue {
  readonly name: string;
  readonly servicecatalog_portfolio_id: string|null;
  readonly arn: string|null;
  readonly created_time: string|null;
  readonly description: string|null;
  readonly provider_name: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    name,
    servicecatalog_portfolio_id = null,
    arn = null,
    created_time = null,
    description = null,
    provider_name = null,
    tags = null
  }: {
    name: string,
    servicecatalog_portfolio_id?: string|null,
    arn?: string|null,
    created_time?: string|null,
    description?: string|null,
    provider_name?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.name = name;
    this.servicecatalog_portfolio_id = servicecatalog_portfolio_id;
    this.arn = arn;
    this.created_time = created_time;
    this.description = description;
    this.provider_name = provider_name;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.servicecatalog_portfolio_id !== null) {
      ih['servicecatalog_portfolio_id'] = this.servicecatalog_portfolio_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.created_time !== null) {
      ih['created_time'] = this.created_time;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.provider_name !== null) {
      ih['provider_name'] = this.provider_name;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Servicecatalog_portfolio';
  }
}

export class Ses_active_receipt_rule_set implements PcoreValue {
  readonly rule_set_name: string;
  readonly ses_active_receipt_rule_set_id: string|null;

  constructor({
    rule_set_name,
    ses_active_receipt_rule_set_id = null
  }: {
    rule_set_name: string,
    ses_active_receipt_rule_set_id?: string|null
  }) {
    this.rule_set_name = rule_set_name;
    this.ses_active_receipt_rule_set_id = ses_active_receipt_rule_set_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['rule_set_name'] = this.rule_set_name;
    if (this.ses_active_receipt_rule_set_id !== null) {
      ih['ses_active_receipt_rule_set_id'] = this.ses_active_receipt_rule_set_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ses_active_receipt_rule_set';
  }
}

export class Ses_configuration_set implements PcoreValue {
  readonly name: string;
  readonly ses_configuration_set_id: string|null;

  constructor({
    name,
    ses_configuration_set_id = null
  }: {
    name: string,
    ses_configuration_set_id?: string|null
  }) {
    this.name = name;
    this.ses_configuration_set_id = ses_configuration_set_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.ses_configuration_set_id !== null) {
      ih['ses_configuration_set_id'] = this.ses_configuration_set_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ses_configuration_set';
  }
}

export class Ses_domain_dkim implements PcoreValue {
  readonly domain: string;
  readonly ses_domain_dkim_id: string|null;
  readonly dkim_tokens: string[]|null;

  constructor({
    domain,
    ses_domain_dkim_id = null,
    dkim_tokens = null
  }: {
    domain: string,
    ses_domain_dkim_id?: string|null,
    dkim_tokens?: string[]|null
  }) {
    this.domain = domain;
    this.ses_domain_dkim_id = ses_domain_dkim_id;
    this.dkim_tokens = dkim_tokens;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['domain'] = this.domain;
    if (this.ses_domain_dkim_id !== null) {
      ih['ses_domain_dkim_id'] = this.ses_domain_dkim_id;
    }
    if (this.dkim_tokens !== null) {
      ih['dkim_tokens'] = this.dkim_tokens;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ses_domain_dkim';
  }
}

export class Ses_domain_identity implements PcoreValue {
  readonly domain: string;
  readonly ses_domain_identity_id: string|null;
  readonly arn: string|null;
  readonly verification_token: string|null;

  constructor({
    domain,
    ses_domain_identity_id = null,
    arn = null,
    verification_token = null
  }: {
    domain: string,
    ses_domain_identity_id?: string|null,
    arn?: string|null,
    verification_token?: string|null
  }) {
    this.domain = domain;
    this.ses_domain_identity_id = ses_domain_identity_id;
    this.arn = arn;
    this.verification_token = verification_token;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['domain'] = this.domain;
    if (this.ses_domain_identity_id !== null) {
      ih['ses_domain_identity_id'] = this.ses_domain_identity_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.verification_token !== null) {
      ih['verification_token'] = this.verification_token;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ses_domain_identity';
  }
}

export class Ses_domain_identity_verification implements PcoreValue {
  readonly domain: string;
  readonly ses_domain_identity_verification_id: string|null;
  readonly arn: string|null;

  constructor({
    domain,
    ses_domain_identity_verification_id = null,
    arn = null
  }: {
    domain: string,
    ses_domain_identity_verification_id?: string|null,
    arn?: string|null
  }) {
    this.domain = domain;
    this.ses_domain_identity_verification_id = ses_domain_identity_verification_id;
    this.arn = arn;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['domain'] = this.domain;
    if (this.ses_domain_identity_verification_id !== null) {
      ih['ses_domain_identity_verification_id'] = this.ses_domain_identity_verification_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ses_domain_identity_verification';
  }
}

export class Ses_domain_mail_from implements PcoreValue {
  readonly domain: string;
  readonly mail_from_domain: string;
  readonly ses_domain_mail_from_id: string|null;
  readonly behavior_on_mx_failure: string;

  constructor({
    domain,
    mail_from_domain,
    ses_domain_mail_from_id = null,
    behavior_on_mx_failure = 'UseDefaultValue'
  }: {
    domain: string,
    mail_from_domain: string,
    ses_domain_mail_from_id?: string|null,
    behavior_on_mx_failure?: string
  }) {
    this.domain = domain;
    this.mail_from_domain = mail_from_domain;
    this.ses_domain_mail_from_id = ses_domain_mail_from_id;
    this.behavior_on_mx_failure = behavior_on_mx_failure;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['domain'] = this.domain;
    ih['mail_from_domain'] = this.mail_from_domain;
    if (this.ses_domain_mail_from_id !== null) {
      ih['ses_domain_mail_from_id'] = this.ses_domain_mail_from_id;
    }
    if (this.behavior_on_mx_failure !== 'UseDefaultValue') {
      ih['behavior_on_mx_failure'] = this.behavior_on_mx_failure;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ses_domain_mail_from';
  }
}

export class Ses_event_destination implements PcoreValue {
  readonly configuration_set_name: string;
  readonly matching_types: string[];
  readonly name: string;
  readonly ses_event_destination_id: string|null;
  readonly cloudwatch_destination: Anon390[]|null;
  readonly enabled: boolean;
  readonly kinesis_destination: Anon391|null;
  readonly sns_destination: Anon392|null;

  constructor({
    configuration_set_name,
    matching_types,
    name,
    ses_event_destination_id = null,
    cloudwatch_destination = null,
    enabled = false,
    kinesis_destination = null,
    sns_destination = null
  }: {
    configuration_set_name: string,
    matching_types: string[],
    name: string,
    ses_event_destination_id?: string|null,
    cloudwatch_destination?: Anon390[]|null,
    enabled?: boolean,
    kinesis_destination?: Anon391|null,
    sns_destination?: Anon392|null
  }) {
    this.configuration_set_name = configuration_set_name;
    this.matching_types = matching_types;
    this.name = name;
    this.ses_event_destination_id = ses_event_destination_id;
    this.cloudwatch_destination = cloudwatch_destination;
    this.enabled = enabled;
    this.kinesis_destination = kinesis_destination;
    this.sns_destination = sns_destination;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['configuration_set_name'] = this.configuration_set_name;
    ih['matching_types'] = this.matching_types;
    ih['name'] = this.name;
    if (this.ses_event_destination_id !== null) {
      ih['ses_event_destination_id'] = this.ses_event_destination_id;
    }
    if (this.cloudwatch_destination !== null) {
      ih['cloudwatch_destination'] = this.cloudwatch_destination;
    }
    if (this.enabled !== false) {
      ih['enabled'] = this.enabled;
    }
    if (this.kinesis_destination !== null) {
      ih['kinesis_destination'] = this.kinesis_destination;
    }
    if (this.sns_destination !== null) {
      ih['sns_destination'] = this.sns_destination;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ses_event_destination';
  }
}

export class Ses_identity_notification_topic implements PcoreValue {
  readonly identity: string;
  readonly notification_type: string;
  readonly ses_identity_notification_topic_id: string|null;
  readonly topic_arn: string|null;

  constructor({
    identity,
    notification_type,
    ses_identity_notification_topic_id = null,
    topic_arn = null
  }: {
    identity: string,
    notification_type: string,
    ses_identity_notification_topic_id?: string|null,
    topic_arn?: string|null
  }) {
    this.identity = identity;
    this.notification_type = notification_type;
    this.ses_identity_notification_topic_id = ses_identity_notification_topic_id;
    this.topic_arn = topic_arn;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['identity'] = this.identity;
    ih['notification_type'] = this.notification_type;
    if (this.ses_identity_notification_topic_id !== null) {
      ih['ses_identity_notification_topic_id'] = this.ses_identity_notification_topic_id;
    }
    if (this.topic_arn !== null) {
      ih['topic_arn'] = this.topic_arn;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ses_identity_notification_topic';
  }
}

export class Ses_receipt_filter implements PcoreValue {
  readonly cidr: string;
  readonly name: string;
  readonly policy: string;
  readonly ses_receipt_filter_id: string|null;

  constructor({
    cidr,
    name,
    policy,
    ses_receipt_filter_id = null
  }: {
    cidr: string,
    name: string,
    policy: string,
    ses_receipt_filter_id?: string|null
  }) {
    this.cidr = cidr;
    this.name = name;
    this.policy = policy;
    this.ses_receipt_filter_id = ses_receipt_filter_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['cidr'] = this.cidr;
    ih['name'] = this.name;
    ih['policy'] = this.policy;
    if (this.ses_receipt_filter_id !== null) {
      ih['ses_receipt_filter_id'] = this.ses_receipt_filter_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ses_receipt_filter';
  }
}

export class Ses_receipt_rule implements PcoreValue {
  readonly name: string;
  readonly rule_set_name: string;
  readonly ses_receipt_rule_id: string|null;
  readonly add_header_action: Anon393[]|null;
  readonly after: string|null;
  readonly bounce_action: Anon394[]|null;
  readonly enabled: boolean|null;
  readonly lambda_action: Anon395[]|null;
  readonly recipients: string[]|null;
  readonly s3_action: Anon396[]|null;
  readonly scan_enabled: boolean|null;
  readonly sns_action: Anon397[]|null;
  readonly stop_action: Anon398[]|null;
  readonly tls_policy: string|null;
  readonly workmail_action: Anon399[]|null;

  constructor({
    name,
    rule_set_name,
    ses_receipt_rule_id = null,
    add_header_action = null,
    after = null,
    bounce_action = null,
    enabled = null,
    lambda_action = null,
    recipients = null,
    s3_action = null,
    scan_enabled = null,
    sns_action = null,
    stop_action = null,
    tls_policy = null,
    workmail_action = null
  }: {
    name: string,
    rule_set_name: string,
    ses_receipt_rule_id?: string|null,
    add_header_action?: Anon393[]|null,
    after?: string|null,
    bounce_action?: Anon394[]|null,
    enabled?: boolean|null,
    lambda_action?: Anon395[]|null,
    recipients?: string[]|null,
    s3_action?: Anon396[]|null,
    scan_enabled?: boolean|null,
    sns_action?: Anon397[]|null,
    stop_action?: Anon398[]|null,
    tls_policy?: string|null,
    workmail_action?: Anon399[]|null
  }) {
    this.name = name;
    this.rule_set_name = rule_set_name;
    this.ses_receipt_rule_id = ses_receipt_rule_id;
    this.add_header_action = add_header_action;
    this.after = after;
    this.bounce_action = bounce_action;
    this.enabled = enabled;
    this.lambda_action = lambda_action;
    this.recipients = recipients;
    this.s3_action = s3_action;
    this.scan_enabled = scan_enabled;
    this.sns_action = sns_action;
    this.stop_action = stop_action;
    this.tls_policy = tls_policy;
    this.workmail_action = workmail_action;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['rule_set_name'] = this.rule_set_name;
    if (this.ses_receipt_rule_id !== null) {
      ih['ses_receipt_rule_id'] = this.ses_receipt_rule_id;
    }
    if (this.add_header_action !== null) {
      ih['add_header_action'] = this.add_header_action;
    }
    if (this.after !== null) {
      ih['after'] = this.after;
    }
    if (this.bounce_action !== null) {
      ih['bounce_action'] = this.bounce_action;
    }
    if (this.enabled !== null) {
      ih['enabled'] = this.enabled;
    }
    if (this.lambda_action !== null) {
      ih['lambda_action'] = this.lambda_action;
    }
    if (this.recipients !== null) {
      ih['recipients'] = this.recipients;
    }
    if (this.s3_action !== null) {
      ih['s3_action'] = this.s3_action;
    }
    if (this.scan_enabled !== null) {
      ih['scan_enabled'] = this.scan_enabled;
    }
    if (this.sns_action !== null) {
      ih['sns_action'] = this.sns_action;
    }
    if (this.stop_action !== null) {
      ih['stop_action'] = this.stop_action;
    }
    if (this.tls_policy !== null) {
      ih['tls_policy'] = this.tls_policy;
    }
    if (this.workmail_action !== null) {
      ih['workmail_action'] = this.workmail_action;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ses_receipt_rule';
  }
}

export class Ses_receipt_rule_set implements PcoreValue {
  readonly rule_set_name: string;
  readonly ses_receipt_rule_set_id: string|null;

  constructor({
    rule_set_name,
    ses_receipt_rule_set_id = null
  }: {
    rule_set_name: string,
    ses_receipt_rule_set_id?: string|null
  }) {
    this.rule_set_name = rule_set_name;
    this.ses_receipt_rule_set_id = ses_receipt_rule_set_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['rule_set_name'] = this.rule_set_name;
    if (this.ses_receipt_rule_set_id !== null) {
      ih['ses_receipt_rule_set_id'] = this.ses_receipt_rule_set_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ses_receipt_rule_set';
  }
}

export class Ses_template implements PcoreValue {
  readonly name: string;
  readonly ses_template_id: string|null;
  readonly html: string|null;
  readonly subject: string|null;
  readonly text: string|null;

  constructor({
    name,
    ses_template_id = null,
    html = null,
    subject = null,
    text = null
  }: {
    name: string,
    ses_template_id?: string|null,
    html?: string|null,
    subject?: string|null,
    text?: string|null
  }) {
    this.name = name;
    this.ses_template_id = ses_template_id;
    this.html = html;
    this.subject = subject;
    this.text = text;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.ses_template_id !== null) {
      ih['ses_template_id'] = this.ses_template_id;
    }
    if (this.html !== null) {
      ih['html'] = this.html;
    }
    if (this.subject !== null) {
      ih['subject'] = this.subject;
    }
    if (this.text !== null) {
      ih['text'] = this.text;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ses_template';
  }
}

export class Sfn_activity implements PcoreValue {
  readonly name: string;
  readonly sfn_activity_id: string|null;
  readonly creation_date: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    name,
    sfn_activity_id = null,
    creation_date = null,
    tags = null
  }: {
    name: string,
    sfn_activity_id?: string|null,
    creation_date?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.name = name;
    this.sfn_activity_id = sfn_activity_id;
    this.creation_date = creation_date;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.sfn_activity_id !== null) {
      ih['sfn_activity_id'] = this.sfn_activity_id;
    }
    if (this.creation_date !== null) {
      ih['creation_date'] = this.creation_date;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Sfn_activity';
  }
}

export class Sfn_state_machine implements PcoreValue {
  readonly definition: string;
  readonly name: string;
  readonly role_arn: string;
  readonly sfn_state_machine_id: string|null;
  readonly creation_date: string|null;
  readonly status: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    definition,
    name,
    role_arn,
    sfn_state_machine_id = null,
    creation_date = null,
    status = null,
    tags = null
  }: {
    definition: string,
    name: string,
    role_arn: string,
    sfn_state_machine_id?: string|null,
    creation_date?: string|null,
    status?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.definition = definition;
    this.name = name;
    this.role_arn = role_arn;
    this.sfn_state_machine_id = sfn_state_machine_id;
    this.creation_date = creation_date;
    this.status = status;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['definition'] = this.definition;
    ih['name'] = this.name;
    ih['role_arn'] = this.role_arn;
    if (this.sfn_state_machine_id !== null) {
      ih['sfn_state_machine_id'] = this.sfn_state_machine_id;
    }
    if (this.creation_date !== null) {
      ih['creation_date'] = this.creation_date;
    }
    if (this.status !== null) {
      ih['status'] = this.status;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Sfn_state_machine';
  }
}

export class Simpledb_domain implements PcoreValue {
  readonly name: string;
  readonly simpledb_domain_id: string|null;

  constructor({
    name,
    simpledb_domain_id = null
  }: {
    name: string,
    simpledb_domain_id?: string|null
  }) {
    this.name = name;
    this.simpledb_domain_id = simpledb_domain_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.simpledb_domain_id !== null) {
      ih['simpledb_domain_id'] = this.simpledb_domain_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Simpledb_domain';
  }
}

export class Snapshot_create_volume_permission implements PcoreValue {
  readonly account_id: string;
  readonly snapshot_id: string;
  readonly snapshot_create_volume_permission_id: string|null;

  constructor({
    account_id,
    snapshot_id,
    snapshot_create_volume_permission_id = null
  }: {
    account_id: string,
    snapshot_id: string,
    snapshot_create_volume_permission_id?: string|null
  }) {
    this.account_id = account_id;
    this.snapshot_id = snapshot_id;
    this.snapshot_create_volume_permission_id = snapshot_create_volume_permission_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['account_id'] = this.account_id;
    ih['snapshot_id'] = this.snapshot_id;
    if (this.snapshot_create_volume_permission_id !== null) {
      ih['snapshot_create_volume_permission_id'] = this.snapshot_create_volume_permission_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Snapshot_create_volume_permission';
  }
}

export class Sns_platform_application implements PcoreValue {
  readonly name: string;
  readonly platform: string;
  readonly platform_credential: string;
  readonly sns_platform_application_id: string|null;
  readonly arn: string|null;
  readonly event_delivery_failure_topic_arn: string|null;
  readonly event_endpoint_created_topic_arn: string|null;
  readonly event_endpoint_deleted_topic_arn: string|null;
  readonly event_endpoint_updated_topic_arn: string|null;
  readonly failure_feedback_role_arn: string|null;
  readonly platform_principal: string|null;
  readonly success_feedback_role_arn: string|null;
  readonly success_feedback_sample_rate: string|null;

  constructor({
    name,
    platform,
    platform_credential,
    sns_platform_application_id = null,
    arn = null,
    event_delivery_failure_topic_arn = null,
    event_endpoint_created_topic_arn = null,
    event_endpoint_deleted_topic_arn = null,
    event_endpoint_updated_topic_arn = null,
    failure_feedback_role_arn = null,
    platform_principal = null,
    success_feedback_role_arn = null,
    success_feedback_sample_rate = null
  }: {
    name: string,
    platform: string,
    platform_credential: string,
    sns_platform_application_id?: string|null,
    arn?: string|null,
    event_delivery_failure_topic_arn?: string|null,
    event_endpoint_created_topic_arn?: string|null,
    event_endpoint_deleted_topic_arn?: string|null,
    event_endpoint_updated_topic_arn?: string|null,
    failure_feedback_role_arn?: string|null,
    platform_principal?: string|null,
    success_feedback_role_arn?: string|null,
    success_feedback_sample_rate?: string|null
  }) {
    this.name = name;
    this.platform = platform;
    this.platform_credential = platform_credential;
    this.sns_platform_application_id = sns_platform_application_id;
    this.arn = arn;
    this.event_delivery_failure_topic_arn = event_delivery_failure_topic_arn;
    this.event_endpoint_created_topic_arn = event_endpoint_created_topic_arn;
    this.event_endpoint_deleted_topic_arn = event_endpoint_deleted_topic_arn;
    this.event_endpoint_updated_topic_arn = event_endpoint_updated_topic_arn;
    this.failure_feedback_role_arn = failure_feedback_role_arn;
    this.platform_principal = platform_principal;
    this.success_feedback_role_arn = success_feedback_role_arn;
    this.success_feedback_sample_rate = success_feedback_sample_rate;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['platform'] = this.platform;
    ih['platform_credential'] = this.platform_credential;
    if (this.sns_platform_application_id !== null) {
      ih['sns_platform_application_id'] = this.sns_platform_application_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.event_delivery_failure_topic_arn !== null) {
      ih['event_delivery_failure_topic_arn'] = this.event_delivery_failure_topic_arn;
    }
    if (this.event_endpoint_created_topic_arn !== null) {
      ih['event_endpoint_created_topic_arn'] = this.event_endpoint_created_topic_arn;
    }
    if (this.event_endpoint_deleted_topic_arn !== null) {
      ih['event_endpoint_deleted_topic_arn'] = this.event_endpoint_deleted_topic_arn;
    }
    if (this.event_endpoint_updated_topic_arn !== null) {
      ih['event_endpoint_updated_topic_arn'] = this.event_endpoint_updated_topic_arn;
    }
    if (this.failure_feedback_role_arn !== null) {
      ih['failure_feedback_role_arn'] = this.failure_feedback_role_arn;
    }
    if (this.platform_principal !== null) {
      ih['platform_principal'] = this.platform_principal;
    }
    if (this.success_feedback_role_arn !== null) {
      ih['success_feedback_role_arn'] = this.success_feedback_role_arn;
    }
    if (this.success_feedback_sample_rate !== null) {
      ih['success_feedback_sample_rate'] = this.success_feedback_sample_rate;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Sns_platform_application';
  }
}

export class Sns_sms_preferences implements PcoreValue {
  readonly sns_sms_preferences_id: string|null;
  readonly default_sender_id: string|null;
  readonly default_sms_type: string|null;
  readonly delivery_status_iam_role_arn: string|null;
  readonly delivery_status_success_sampling_rate: string|null;
  readonly monthly_spend_limit: string|null;
  readonly usage_report_s3_bucket: string|null;

  constructor({
    sns_sms_preferences_id = null,
    default_sender_id = null,
    default_sms_type = null,
    delivery_status_iam_role_arn = null,
    delivery_status_success_sampling_rate = null,
    monthly_spend_limit = null,
    usage_report_s3_bucket = null
  }: {
    sns_sms_preferences_id?: string|null,
    default_sender_id?: string|null,
    default_sms_type?: string|null,
    delivery_status_iam_role_arn?: string|null,
    delivery_status_success_sampling_rate?: string|null,
    monthly_spend_limit?: string|null,
    usage_report_s3_bucket?: string|null
  }) {
    this.sns_sms_preferences_id = sns_sms_preferences_id;
    this.default_sender_id = default_sender_id;
    this.default_sms_type = default_sms_type;
    this.delivery_status_iam_role_arn = delivery_status_iam_role_arn;
    this.delivery_status_success_sampling_rate = delivery_status_success_sampling_rate;
    this.monthly_spend_limit = monthly_spend_limit;
    this.usage_report_s3_bucket = usage_report_s3_bucket;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.sns_sms_preferences_id !== null) {
      ih['sns_sms_preferences_id'] = this.sns_sms_preferences_id;
    }
    if (this.default_sender_id !== null) {
      ih['default_sender_id'] = this.default_sender_id;
    }
    if (this.default_sms_type !== null) {
      ih['default_sms_type'] = this.default_sms_type;
    }
    if (this.delivery_status_iam_role_arn !== null) {
      ih['delivery_status_iam_role_arn'] = this.delivery_status_iam_role_arn;
    }
    if (this.delivery_status_success_sampling_rate !== null) {
      ih['delivery_status_success_sampling_rate'] = this.delivery_status_success_sampling_rate;
    }
    if (this.monthly_spend_limit !== null) {
      ih['monthly_spend_limit'] = this.monthly_spend_limit;
    }
    if (this.usage_report_s3_bucket !== null) {
      ih['usage_report_s3_bucket'] = this.usage_report_s3_bucket;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Sns_sms_preferences';
  }
}

export class Sns_topic implements PcoreValue {
  readonly sns_topic_id: string|null;
  readonly application_failure_feedback_role_arn: string|null;
  readonly application_success_feedback_role_arn: string|null;
  readonly application_success_feedback_sample_rate: number|null;
  readonly arn: string|null;
  readonly delivery_policy: string|null;
  readonly display_name: string|null;
  readonly http_failure_feedback_role_arn: string|null;
  readonly http_success_feedback_role_arn: string|null;
  readonly http_success_feedback_sample_rate: number|null;
  readonly kms_master_key_id: string|null;
  readonly lambda_failure_feedback_role_arn: string|null;
  readonly lambda_success_feedback_role_arn: string|null;
  readonly lambda_success_feedback_sample_rate: number|null;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly policy: string|null;
  readonly sqs_failure_feedback_role_arn: string|null;
  readonly sqs_success_feedback_role_arn: string|null;
  readonly sqs_success_feedback_sample_rate: number|null;

  constructor({
    sns_topic_id = null,
    application_failure_feedback_role_arn = null,
    application_success_feedback_role_arn = null,
    application_success_feedback_sample_rate = null,
    arn = null,
    delivery_policy = null,
    display_name = null,
    http_failure_feedback_role_arn = null,
    http_success_feedback_role_arn = null,
    http_success_feedback_sample_rate = null,
    kms_master_key_id = null,
    lambda_failure_feedback_role_arn = null,
    lambda_success_feedback_role_arn = null,
    lambda_success_feedback_sample_rate = null,
    name = null,
    name_prefix = null,
    policy = null,
    sqs_failure_feedback_role_arn = null,
    sqs_success_feedback_role_arn = null,
    sqs_success_feedback_sample_rate = null
  }: {
    sns_topic_id?: string|null,
    application_failure_feedback_role_arn?: string|null,
    application_success_feedback_role_arn?: string|null,
    application_success_feedback_sample_rate?: number|null,
    arn?: string|null,
    delivery_policy?: string|null,
    display_name?: string|null,
    http_failure_feedback_role_arn?: string|null,
    http_success_feedback_role_arn?: string|null,
    http_success_feedback_sample_rate?: number|null,
    kms_master_key_id?: string|null,
    lambda_failure_feedback_role_arn?: string|null,
    lambda_success_feedback_role_arn?: string|null,
    lambda_success_feedback_sample_rate?: number|null,
    name?: string|null,
    name_prefix?: string|null,
    policy?: string|null,
    sqs_failure_feedback_role_arn?: string|null,
    sqs_success_feedback_role_arn?: string|null,
    sqs_success_feedback_sample_rate?: number|null
  }) {
    this.sns_topic_id = sns_topic_id;
    this.application_failure_feedback_role_arn = application_failure_feedback_role_arn;
    this.application_success_feedback_role_arn = application_success_feedback_role_arn;
    this.application_success_feedback_sample_rate = application_success_feedback_sample_rate;
    this.arn = arn;
    this.delivery_policy = delivery_policy;
    this.display_name = display_name;
    this.http_failure_feedback_role_arn = http_failure_feedback_role_arn;
    this.http_success_feedback_role_arn = http_success_feedback_role_arn;
    this.http_success_feedback_sample_rate = http_success_feedback_sample_rate;
    this.kms_master_key_id = kms_master_key_id;
    this.lambda_failure_feedback_role_arn = lambda_failure_feedback_role_arn;
    this.lambda_success_feedback_role_arn = lambda_success_feedback_role_arn;
    this.lambda_success_feedback_sample_rate = lambda_success_feedback_sample_rate;
    this.name = name;
    this.name_prefix = name_prefix;
    this.policy = policy;
    this.sqs_failure_feedback_role_arn = sqs_failure_feedback_role_arn;
    this.sqs_success_feedback_role_arn = sqs_success_feedback_role_arn;
    this.sqs_success_feedback_sample_rate = sqs_success_feedback_sample_rate;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.sns_topic_id !== null) {
      ih['sns_topic_id'] = this.sns_topic_id;
    }
    if (this.application_failure_feedback_role_arn !== null) {
      ih['application_failure_feedback_role_arn'] = this.application_failure_feedback_role_arn;
    }
    if (this.application_success_feedback_role_arn !== null) {
      ih['application_success_feedback_role_arn'] = this.application_success_feedback_role_arn;
    }
    if (this.application_success_feedback_sample_rate !== null) {
      ih['application_success_feedback_sample_rate'] = this.application_success_feedback_sample_rate;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.delivery_policy !== null) {
      ih['delivery_policy'] = this.delivery_policy;
    }
    if (this.display_name !== null) {
      ih['display_name'] = this.display_name;
    }
    if (this.http_failure_feedback_role_arn !== null) {
      ih['http_failure_feedback_role_arn'] = this.http_failure_feedback_role_arn;
    }
    if (this.http_success_feedback_role_arn !== null) {
      ih['http_success_feedback_role_arn'] = this.http_success_feedback_role_arn;
    }
    if (this.http_success_feedback_sample_rate !== null) {
      ih['http_success_feedback_sample_rate'] = this.http_success_feedback_sample_rate;
    }
    if (this.kms_master_key_id !== null) {
      ih['kms_master_key_id'] = this.kms_master_key_id;
    }
    if (this.lambda_failure_feedback_role_arn !== null) {
      ih['lambda_failure_feedback_role_arn'] = this.lambda_failure_feedback_role_arn;
    }
    if (this.lambda_success_feedback_role_arn !== null) {
      ih['lambda_success_feedback_role_arn'] = this.lambda_success_feedback_role_arn;
    }
    if (this.lambda_success_feedback_sample_rate !== null) {
      ih['lambda_success_feedback_sample_rate'] = this.lambda_success_feedback_sample_rate;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.policy !== null) {
      ih['policy'] = this.policy;
    }
    if (this.sqs_failure_feedback_role_arn !== null) {
      ih['sqs_failure_feedback_role_arn'] = this.sqs_failure_feedback_role_arn;
    }
    if (this.sqs_success_feedback_role_arn !== null) {
      ih['sqs_success_feedback_role_arn'] = this.sqs_success_feedback_role_arn;
    }
    if (this.sqs_success_feedback_sample_rate !== null) {
      ih['sqs_success_feedback_sample_rate'] = this.sqs_success_feedback_sample_rate;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Sns_topic';
  }
}

export class Sns_topic_policy implements PcoreValue {
  readonly arn: string;
  readonly policy: string;
  readonly sns_topic_policy_id: string|null;

  constructor({
    arn,
    policy,
    sns_topic_policy_id = null
  }: {
    arn: string,
    policy: string,
    sns_topic_policy_id?: string|null
  }) {
    this.arn = arn;
    this.policy = policy;
    this.sns_topic_policy_id = sns_topic_policy_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['arn'] = this.arn;
    ih['policy'] = this.policy;
    if (this.sns_topic_policy_id !== null) {
      ih['sns_topic_policy_id'] = this.sns_topic_policy_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Sns_topic_policy';
  }
}

export class Sns_topic_subscription implements PcoreValue {
  readonly endpoint: string;
  readonly protocol: string;
  readonly topic_arn: string;
  readonly sns_topic_subscription_id: string|null;
  readonly arn: string|null;
  readonly confirmation_timeout_in_minutes: number;
  readonly delivery_policy: string|null;
  readonly endpoint_auto_confirms: boolean;
  readonly filter_policy: string|null;
  readonly raw_message_delivery: boolean;

  constructor({
    endpoint,
    protocol,
    topic_arn,
    sns_topic_subscription_id = null,
    arn = null,
    confirmation_timeout_in_minutes = 1,
    delivery_policy = null,
    endpoint_auto_confirms = false,
    filter_policy = null,
    raw_message_delivery = false
  }: {
    endpoint: string,
    protocol: string,
    topic_arn: string,
    sns_topic_subscription_id?: string|null,
    arn?: string|null,
    confirmation_timeout_in_minutes?: number,
    delivery_policy?: string|null,
    endpoint_auto_confirms?: boolean,
    filter_policy?: string|null,
    raw_message_delivery?: boolean
  }) {
    this.endpoint = endpoint;
    this.protocol = protocol;
    this.topic_arn = topic_arn;
    this.sns_topic_subscription_id = sns_topic_subscription_id;
    this.arn = arn;
    this.confirmation_timeout_in_minutes = confirmation_timeout_in_minutes;
    this.delivery_policy = delivery_policy;
    this.endpoint_auto_confirms = endpoint_auto_confirms;
    this.filter_policy = filter_policy;
    this.raw_message_delivery = raw_message_delivery;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['endpoint'] = this.endpoint;
    ih['protocol'] = this.protocol;
    ih['topic_arn'] = this.topic_arn;
    if (this.sns_topic_subscription_id !== null) {
      ih['sns_topic_subscription_id'] = this.sns_topic_subscription_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.confirmation_timeout_in_minutes !== 1) {
      ih['confirmation_timeout_in_minutes'] = this.confirmation_timeout_in_minutes;
    }
    if (this.delivery_policy !== null) {
      ih['delivery_policy'] = this.delivery_policy;
    }
    if (this.endpoint_auto_confirms !== false) {
      ih['endpoint_auto_confirms'] = this.endpoint_auto_confirms;
    }
    if (this.filter_policy !== null) {
      ih['filter_policy'] = this.filter_policy;
    }
    if (this.raw_message_delivery !== false) {
      ih['raw_message_delivery'] = this.raw_message_delivery;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Sns_topic_subscription';
  }
}

export class Spot_datafeed_subscription implements PcoreValue {
  readonly bucket: string;
  readonly spot_datafeed_subscription_id: string|null;
  readonly prefix: string|null;

  constructor({
    bucket,
    spot_datafeed_subscription_id = null,
    prefix = null
  }: {
    bucket: string,
    spot_datafeed_subscription_id?: string|null,
    prefix?: string|null
  }) {
    this.bucket = bucket;
    this.spot_datafeed_subscription_id = spot_datafeed_subscription_id;
    this.prefix = prefix;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['bucket'] = this.bucket;
    if (this.spot_datafeed_subscription_id !== null) {
      ih['spot_datafeed_subscription_id'] = this.spot_datafeed_subscription_id;
    }
    if (this.prefix !== null) {
      ih['prefix'] = this.prefix;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Spot_datafeed_subscription';
  }
}

export class Spot_fleet_request implements PcoreValue {
  readonly iam_fleet_role: string;
  readonly launch_specification: Anon401[];
  readonly target_capacity: number;
  readonly spot_fleet_request_id: string|null;
  readonly allocation_strategy: string;
  readonly client_token: string|null;
  readonly excess_capacity_termination_policy: string;
  readonly fleet_type: string;
  readonly instance_interruption_behaviour: string;
  readonly instance_pools_to_use_count: number;
  readonly load_balancers: string[]|null;
  readonly replace_unhealthy_instances: boolean;
  readonly spot_price: string|null;
  readonly spot_request_state: string|null;
  readonly target_group_arns: string[]|null;
  readonly terminate_instances_with_expiration: boolean|null;
  readonly valid_from: |null;
  readonly valid_until: |null;
  readonly wait_for_fulfillment: boolean;

  constructor({
    iam_fleet_role,
    launch_specification,
    target_capacity,
    spot_fleet_request_id = null,
    allocation_strategy = 'lowestPrice',
    client_token = null,
    excess_capacity_termination_policy = 'Default',
    fleet_type = 'maintain',
    instance_interruption_behaviour = 'terminate',
    instance_pools_to_use_count = 1,
    load_balancers = null,
    replace_unhealthy_instances = false,
    spot_price = null,
    spot_request_state = null,
    target_group_arns = null,
    terminate_instances_with_expiration = null,
    valid_from = null,
    valid_until = null,
    wait_for_fulfillment = false
  }: {
    iam_fleet_role: string,
    launch_specification: Anon401[],
    target_capacity: number,
    spot_fleet_request_id?: string|null,
    allocation_strategy?: string,
    client_token?: string|null,
    excess_capacity_termination_policy?: string,
    fleet_type?: string,
    instance_interruption_behaviour?: string,
    instance_pools_to_use_count?: number,
    load_balancers?: string[]|null,
    replace_unhealthy_instances?: boolean,
    spot_price?: string|null,
    spot_request_state?: string|null,
    target_group_arns?: string[]|null,
    terminate_instances_with_expiration?: boolean|null,
    valid_from?: |null,
    valid_until?: |null,
    wait_for_fulfillment?: boolean
  }) {
    this.iam_fleet_role = iam_fleet_role;
    this.launch_specification = launch_specification;
    this.target_capacity = target_capacity;
    this.spot_fleet_request_id = spot_fleet_request_id;
    this.allocation_strategy = allocation_strategy;
    this.client_token = client_token;
    this.excess_capacity_termination_policy = excess_capacity_termination_policy;
    this.fleet_type = fleet_type;
    this.instance_interruption_behaviour = instance_interruption_behaviour;
    this.instance_pools_to_use_count = instance_pools_to_use_count;
    this.load_balancers = load_balancers;
    this.replace_unhealthy_instances = replace_unhealthy_instances;
    this.spot_price = spot_price;
    this.spot_request_state = spot_request_state;
    this.target_group_arns = target_group_arns;
    this.terminate_instances_with_expiration = terminate_instances_with_expiration;
    this.valid_from = valid_from;
    this.valid_until = valid_until;
    this.wait_for_fulfillment = wait_for_fulfillment;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['iam_fleet_role'] = this.iam_fleet_role;
    ih['launch_specification'] = this.launch_specification;
    ih['target_capacity'] = this.target_capacity;
    if (this.spot_fleet_request_id !== null) {
      ih['spot_fleet_request_id'] = this.spot_fleet_request_id;
    }
    if (this.allocation_strategy !== 'lowestPrice') {
      ih['allocation_strategy'] = this.allocation_strategy;
    }
    if (this.client_token !== null) {
      ih['client_token'] = this.client_token;
    }
    if (this.excess_capacity_termination_policy !== 'Default') {
      ih['excess_capacity_termination_policy'] = this.excess_capacity_termination_policy;
    }
    if (this.fleet_type !== 'maintain') {
      ih['fleet_type'] = this.fleet_type;
    }
    if (this.instance_interruption_behaviour !== 'terminate') {
      ih['instance_interruption_behaviour'] = this.instance_interruption_behaviour;
    }
    if (this.instance_pools_to_use_count !== 1) {
      ih['instance_pools_to_use_count'] = this.instance_pools_to_use_count;
    }
    if (this.load_balancers !== null) {
      ih['load_balancers'] = this.load_balancers;
    }
    if (this.replace_unhealthy_instances !== false) {
      ih['replace_unhealthy_instances'] = this.replace_unhealthy_instances;
    }
    if (this.spot_price !== null) {
      ih['spot_price'] = this.spot_price;
    }
    if (this.spot_request_state !== null) {
      ih['spot_request_state'] = this.spot_request_state;
    }
    if (this.target_group_arns !== null) {
      ih['target_group_arns'] = this.target_group_arns;
    }
    if (this.terminate_instances_with_expiration !== null) {
      ih['terminate_instances_with_expiration'] = this.terminate_instances_with_expiration;
    }
    if (this.valid_from !== null) {
      ih['valid_from'] = this.valid_from;
    }
    if (this.valid_until !== null) {
      ih['valid_until'] = this.valid_until;
    }
    if (this.wait_for_fulfillment !== false) {
      ih['wait_for_fulfillment'] = this.wait_for_fulfillment;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Spot_fleet_request';
  }
}

export class Spot_instance_request implements PcoreValue {
  readonly ami: string;
  readonly instance_type: string;
  readonly spot_instance_request_id: string|null;
  readonly arn: string|null;
  readonly associate_public_ip_address: boolean|null;
  readonly availability_zone: string|null;
  readonly block_duration_minutes: number|null;
  readonly cpu_core_count: number|null;
  readonly cpu_threads_per_core: number|null;
  readonly credit_specification: Anon253|null;
  readonly disable_api_termination: boolean|null;
  readonly ebs_block_device: Anon254[]|null;
  readonly ebs_optimized: boolean|null;
  readonly ephemeral_block_device: Anon255[]|null;
  readonly get_password_data: boolean;
  readonly host_id: string|null;
  readonly iam_instance_profile: string|null;
  readonly instance_initiated_shutdown_behavior: string|null;
  readonly instance_interruption_behaviour: string;
  readonly instance_state: string|null;
  readonly ipv6_address_count: number|null;
  readonly ipv6_addresses: string[]|null;
  readonly key_name: string|null;
  readonly launch_group: string|null;
  readonly monitoring: boolean|null;
  readonly network_interface: Anon256[]|null;
  readonly password_data: string|null;
  readonly placement_group: string|null;
  readonly primary_network_interface_id: string|null;
  readonly private_dns: string|null;
  readonly private_ip: string|null;
  readonly public_dns: string|null;
  readonly public_ip: string|null;
  readonly root_block_device: Anon257|null;
  readonly security_groups: string[]|null;
  readonly source_dest_check: boolean;
  readonly spot_bid_status: string|null;
  readonly spot_instance_id: string|null;
  readonly spot_price: string|null;
  readonly spot_request_state: string|null;
  readonly spot_type: string;
  readonly subnet_id: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly tenancy: string|null;
  readonly user_data: string|null;
  readonly user_data_base64: string|null;
  readonly valid_from: |null;
  readonly valid_until: |null;
  readonly volume_tags: {[s: string]: string}|null;
  readonly vpc_security_group_ids: string[]|null;
  readonly wait_for_fulfillment: boolean;

  constructor({
    ami,
    instance_type,
    spot_instance_request_id = null,
    arn = null,
    associate_public_ip_address = null,
    availability_zone = null,
    block_duration_minutes = null,
    cpu_core_count = null,
    cpu_threads_per_core = null,
    credit_specification = null,
    disable_api_termination = null,
    ebs_block_device = null,
    ebs_optimized = null,
    ephemeral_block_device = null,
    get_password_data = false,
    host_id = null,
    iam_instance_profile = null,
    instance_initiated_shutdown_behavior = null,
    instance_interruption_behaviour = 'terminate',
    instance_state = null,
    ipv6_address_count = null,
    ipv6_addresses = null,
    key_name = null,
    launch_group = null,
    monitoring = null,
    network_interface = null,
    password_data = null,
    placement_group = null,
    primary_network_interface_id = null,
    private_dns = null,
    private_ip = null,
    public_dns = null,
    public_ip = null,
    root_block_device = null,
    security_groups = null,
    source_dest_check = true,
    spot_bid_status = null,
    spot_instance_id = null,
    spot_price = null,
    spot_request_state = null,
    spot_type = 'persistent',
    subnet_id = null,
    tags = null,
    tenancy = null,
    user_data = null,
    user_data_base64 = null,
    valid_from = null,
    valid_until = null,
    volume_tags = null,
    vpc_security_group_ids = null,
    wait_for_fulfillment = false
  }: {
    ami: string,
    instance_type: string,
    spot_instance_request_id?: string|null,
    arn?: string|null,
    associate_public_ip_address?: boolean|null,
    availability_zone?: string|null,
    block_duration_minutes?: number|null,
    cpu_core_count?: number|null,
    cpu_threads_per_core?: number|null,
    credit_specification?: Anon253|null,
    disable_api_termination?: boolean|null,
    ebs_block_device?: Anon254[]|null,
    ebs_optimized?: boolean|null,
    ephemeral_block_device?: Anon255[]|null,
    get_password_data?: boolean,
    host_id?: string|null,
    iam_instance_profile?: string|null,
    instance_initiated_shutdown_behavior?: string|null,
    instance_interruption_behaviour?: string,
    instance_state?: string|null,
    ipv6_address_count?: number|null,
    ipv6_addresses?: string[]|null,
    key_name?: string|null,
    launch_group?: string|null,
    monitoring?: boolean|null,
    network_interface?: Anon256[]|null,
    password_data?: string|null,
    placement_group?: string|null,
    primary_network_interface_id?: string|null,
    private_dns?: string|null,
    private_ip?: string|null,
    public_dns?: string|null,
    public_ip?: string|null,
    root_block_device?: Anon257|null,
    security_groups?: string[]|null,
    source_dest_check?: boolean,
    spot_bid_status?: string|null,
    spot_instance_id?: string|null,
    spot_price?: string|null,
    spot_request_state?: string|null,
    spot_type?: string,
    subnet_id?: string|null,
    tags?: {[s: string]: string}|null,
    tenancy?: string|null,
    user_data?: string|null,
    user_data_base64?: string|null,
    valid_from?: |null,
    valid_until?: |null,
    volume_tags?: {[s: string]: string}|null,
    vpc_security_group_ids?: string[]|null,
    wait_for_fulfillment?: boolean
  }) {
    this.ami = ami;
    this.instance_type = instance_type;
    this.spot_instance_request_id = spot_instance_request_id;
    this.arn = arn;
    this.associate_public_ip_address = associate_public_ip_address;
    this.availability_zone = availability_zone;
    this.block_duration_minutes = block_duration_minutes;
    this.cpu_core_count = cpu_core_count;
    this.cpu_threads_per_core = cpu_threads_per_core;
    this.credit_specification = credit_specification;
    this.disable_api_termination = disable_api_termination;
    this.ebs_block_device = ebs_block_device;
    this.ebs_optimized = ebs_optimized;
    this.ephemeral_block_device = ephemeral_block_device;
    this.get_password_data = get_password_data;
    this.host_id = host_id;
    this.iam_instance_profile = iam_instance_profile;
    this.instance_initiated_shutdown_behavior = instance_initiated_shutdown_behavior;
    this.instance_interruption_behaviour = instance_interruption_behaviour;
    this.instance_state = instance_state;
    this.ipv6_address_count = ipv6_address_count;
    this.ipv6_addresses = ipv6_addresses;
    this.key_name = key_name;
    this.launch_group = launch_group;
    this.monitoring = monitoring;
    this.network_interface = network_interface;
    this.password_data = password_data;
    this.placement_group = placement_group;
    this.primary_network_interface_id = primary_network_interface_id;
    this.private_dns = private_dns;
    this.private_ip = private_ip;
    this.public_dns = public_dns;
    this.public_ip = public_ip;
    this.root_block_device = root_block_device;
    this.security_groups = security_groups;
    this.source_dest_check = source_dest_check;
    this.spot_bid_status = spot_bid_status;
    this.spot_instance_id = spot_instance_id;
    this.spot_price = spot_price;
    this.spot_request_state = spot_request_state;
    this.spot_type = spot_type;
    this.subnet_id = subnet_id;
    this.tags = tags;
    this.tenancy = tenancy;
    this.user_data = user_data;
    this.user_data_base64 = user_data_base64;
    this.valid_from = valid_from;
    this.valid_until = valid_until;
    this.volume_tags = volume_tags;
    this.vpc_security_group_ids = vpc_security_group_ids;
    this.wait_for_fulfillment = wait_for_fulfillment;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['ami'] = this.ami;
    ih['instance_type'] = this.instance_type;
    if (this.spot_instance_request_id !== null) {
      ih['spot_instance_request_id'] = this.spot_instance_request_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.associate_public_ip_address !== null) {
      ih['associate_public_ip_address'] = this.associate_public_ip_address;
    }
    if (this.availability_zone !== null) {
      ih['availability_zone'] = this.availability_zone;
    }
    if (this.block_duration_minutes !== null) {
      ih['block_duration_minutes'] = this.block_duration_minutes;
    }
    if (this.cpu_core_count !== null) {
      ih['cpu_core_count'] = this.cpu_core_count;
    }
    if (this.cpu_threads_per_core !== null) {
      ih['cpu_threads_per_core'] = this.cpu_threads_per_core;
    }
    if (this.credit_specification !== null) {
      ih['credit_specification'] = this.credit_specification;
    }
    if (this.disable_api_termination !== null) {
      ih['disable_api_termination'] = this.disable_api_termination;
    }
    if (this.ebs_block_device !== null) {
      ih['ebs_block_device'] = this.ebs_block_device;
    }
    if (this.ebs_optimized !== null) {
      ih['ebs_optimized'] = this.ebs_optimized;
    }
    if (this.ephemeral_block_device !== null) {
      ih['ephemeral_block_device'] = this.ephemeral_block_device;
    }
    if (this.get_password_data !== false) {
      ih['get_password_data'] = this.get_password_data;
    }
    if (this.host_id !== null) {
      ih['host_id'] = this.host_id;
    }
    if (this.iam_instance_profile !== null) {
      ih['iam_instance_profile'] = this.iam_instance_profile;
    }
    if (this.instance_initiated_shutdown_behavior !== null) {
      ih['instance_initiated_shutdown_behavior'] = this.instance_initiated_shutdown_behavior;
    }
    if (this.instance_interruption_behaviour !== 'terminate') {
      ih['instance_interruption_behaviour'] = this.instance_interruption_behaviour;
    }
    if (this.instance_state !== null) {
      ih['instance_state'] = this.instance_state;
    }
    if (this.ipv6_address_count !== null) {
      ih['ipv6_address_count'] = this.ipv6_address_count;
    }
    if (this.ipv6_addresses !== null) {
      ih['ipv6_addresses'] = this.ipv6_addresses;
    }
    if (this.key_name !== null) {
      ih['key_name'] = this.key_name;
    }
    if (this.launch_group !== null) {
      ih['launch_group'] = this.launch_group;
    }
    if (this.monitoring !== null) {
      ih['monitoring'] = this.monitoring;
    }
    if (this.network_interface !== null) {
      ih['network_interface'] = this.network_interface;
    }
    if (this.password_data !== null) {
      ih['password_data'] = this.password_data;
    }
    if (this.placement_group !== null) {
      ih['placement_group'] = this.placement_group;
    }
    if (this.primary_network_interface_id !== null) {
      ih['primary_network_interface_id'] = this.primary_network_interface_id;
    }
    if (this.private_dns !== null) {
      ih['private_dns'] = this.private_dns;
    }
    if (this.private_ip !== null) {
      ih['private_ip'] = this.private_ip;
    }
    if (this.public_dns !== null) {
      ih['public_dns'] = this.public_dns;
    }
    if (this.public_ip !== null) {
      ih['public_ip'] = this.public_ip;
    }
    if (this.root_block_device !== null) {
      ih['root_block_device'] = this.root_block_device;
    }
    if (this.security_groups !== null) {
      ih['security_groups'] = this.security_groups;
    }
    if (this.source_dest_check !== true) {
      ih['source_dest_check'] = this.source_dest_check;
    }
    if (this.spot_bid_status !== null) {
      ih['spot_bid_status'] = this.spot_bid_status;
    }
    if (this.spot_instance_id !== null) {
      ih['spot_instance_id'] = this.spot_instance_id;
    }
    if (this.spot_price !== null) {
      ih['spot_price'] = this.spot_price;
    }
    if (this.spot_request_state !== null) {
      ih['spot_request_state'] = this.spot_request_state;
    }
    if (this.spot_type !== 'persistent') {
      ih['spot_type'] = this.spot_type;
    }
    if (this.subnet_id !== null) {
      ih['subnet_id'] = this.subnet_id;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.tenancy !== null) {
      ih['tenancy'] = this.tenancy;
    }
    if (this.user_data !== null) {
      ih['user_data'] = this.user_data;
    }
    if (this.user_data_base64 !== null) {
      ih['user_data_base64'] = this.user_data_base64;
    }
    if (this.valid_from !== null) {
      ih['valid_from'] = this.valid_from;
    }
    if (this.valid_until !== null) {
      ih['valid_until'] = this.valid_until;
    }
    if (this.volume_tags !== null) {
      ih['volume_tags'] = this.volume_tags;
    }
    if (this.vpc_security_group_ids !== null) {
      ih['vpc_security_group_ids'] = this.vpc_security_group_ids;
    }
    if (this.wait_for_fulfillment !== false) {
      ih['wait_for_fulfillment'] = this.wait_for_fulfillment;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Spot_instance_request';
  }
}

export class Sqs_queue implements PcoreValue {
  readonly sqs_queue_id: string|null;
  readonly arn: string|null;
  readonly content_based_deduplication: boolean;
  readonly delay_seconds: number;
  readonly fifo_queue: boolean;
  readonly kms_data_key_reuse_period_seconds: number|null;
  readonly kms_master_key_id: string|null;
  readonly max_message_size: number;
  readonly message_retention_seconds: number;
  readonly name: string|null;
  readonly name_prefix: string|null;
  readonly policy: string|null;
  readonly receive_wait_time_seconds: number;
  readonly redrive_policy: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly visibility_timeout_seconds: number;

  constructor({
    sqs_queue_id = null,
    arn = null,
    content_based_deduplication = false,
    delay_seconds = 0,
    fifo_queue = false,
    kms_data_key_reuse_period_seconds = null,
    kms_master_key_id = null,
    max_message_size = 262144,
    message_retention_seconds = 345600,
    name = null,
    name_prefix = null,
    policy = null,
    receive_wait_time_seconds = 0,
    redrive_policy = null,
    tags = null,
    visibility_timeout_seconds = 30
  }: {
    sqs_queue_id?: string|null,
    arn?: string|null,
    content_based_deduplication?: boolean,
    delay_seconds?: number,
    fifo_queue?: boolean,
    kms_data_key_reuse_period_seconds?: number|null,
    kms_master_key_id?: string|null,
    max_message_size?: number,
    message_retention_seconds?: number,
    name?: string|null,
    name_prefix?: string|null,
    policy?: string|null,
    receive_wait_time_seconds?: number,
    redrive_policy?: string|null,
    tags?: {[s: string]: string}|null,
    visibility_timeout_seconds?: number
  }) {
    this.sqs_queue_id = sqs_queue_id;
    this.arn = arn;
    this.content_based_deduplication = content_based_deduplication;
    this.delay_seconds = delay_seconds;
    this.fifo_queue = fifo_queue;
    this.kms_data_key_reuse_period_seconds = kms_data_key_reuse_period_seconds;
    this.kms_master_key_id = kms_master_key_id;
    this.max_message_size = max_message_size;
    this.message_retention_seconds = message_retention_seconds;
    this.name = name;
    this.name_prefix = name_prefix;
    this.policy = policy;
    this.receive_wait_time_seconds = receive_wait_time_seconds;
    this.redrive_policy = redrive_policy;
    this.tags = tags;
    this.visibility_timeout_seconds = visibility_timeout_seconds;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.sqs_queue_id !== null) {
      ih['sqs_queue_id'] = this.sqs_queue_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.content_based_deduplication !== false) {
      ih['content_based_deduplication'] = this.content_based_deduplication;
    }
    if (this.delay_seconds !== 0) {
      ih['delay_seconds'] = this.delay_seconds;
    }
    if (this.fifo_queue !== false) {
      ih['fifo_queue'] = this.fifo_queue;
    }
    if (this.kms_data_key_reuse_period_seconds !== null) {
      ih['kms_data_key_reuse_period_seconds'] = this.kms_data_key_reuse_period_seconds;
    }
    if (this.kms_master_key_id !== null) {
      ih['kms_master_key_id'] = this.kms_master_key_id;
    }
    if (this.max_message_size !== 262144) {
      ih['max_message_size'] = this.max_message_size;
    }
    if (this.message_retention_seconds !== 345600) {
      ih['message_retention_seconds'] = this.message_retention_seconds;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    if (this.policy !== null) {
      ih['policy'] = this.policy;
    }
    if (this.receive_wait_time_seconds !== 0) {
      ih['receive_wait_time_seconds'] = this.receive_wait_time_seconds;
    }
    if (this.redrive_policy !== null) {
      ih['redrive_policy'] = this.redrive_policy;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.visibility_timeout_seconds !== 30) {
      ih['visibility_timeout_seconds'] = this.visibility_timeout_seconds;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Sqs_queue';
  }
}

export class Sqs_queue_policy implements PcoreValue {
  readonly policy: string;
  readonly queue_url: string;
  readonly sqs_queue_policy_id: string|null;

  constructor({
    policy,
    queue_url,
    sqs_queue_policy_id = null
  }: {
    policy: string,
    queue_url: string,
    sqs_queue_policy_id?: string|null
  }) {
    this.policy = policy;
    this.queue_url = queue_url;
    this.sqs_queue_policy_id = sqs_queue_policy_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['policy'] = this.policy;
    ih['queue_url'] = this.queue_url;
    if (this.sqs_queue_policy_id !== null) {
      ih['sqs_queue_policy_id'] = this.sqs_queue_policy_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Sqs_queue_policy';
  }
}

export class Ssm_activation implements PcoreValue {
  readonly iam_role: string;
  readonly ssm_activation_id: string|null;
  readonly activation_code: string|null;
  readonly description: string|null;
  readonly expiration_date: |null;
  readonly expired: string|null;
  readonly name: string|null;
  readonly registration_count: number|null;
  readonly registration_limit: number|null;

  constructor({
    iam_role,
    ssm_activation_id = null,
    activation_code = null,
    description = null,
    expiration_date = null,
    expired = null,
    name = null,
    registration_count = null,
    registration_limit = null
  }: {
    iam_role: string,
    ssm_activation_id?: string|null,
    activation_code?: string|null,
    description?: string|null,
    expiration_date?: |null,
    expired?: string|null,
    name?: string|null,
    registration_count?: number|null,
    registration_limit?: number|null
  }) {
    this.iam_role = iam_role;
    this.ssm_activation_id = ssm_activation_id;
    this.activation_code = activation_code;
    this.description = description;
    this.expiration_date = expiration_date;
    this.expired = expired;
    this.name = name;
    this.registration_count = registration_count;
    this.registration_limit = registration_limit;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['iam_role'] = this.iam_role;
    if (this.ssm_activation_id !== null) {
      ih['ssm_activation_id'] = this.ssm_activation_id;
    }
    if (this.activation_code !== null) {
      ih['activation_code'] = this.activation_code;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.expiration_date !== null) {
      ih['expiration_date'] = this.expiration_date;
    }
    if (this.expired !== null) {
      ih['expired'] = this.expired;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.registration_count !== null) {
      ih['registration_count'] = this.registration_count;
    }
    if (this.registration_limit !== null) {
      ih['registration_limit'] = this.registration_limit;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ssm_activation';
  }
}

export class Ssm_association implements PcoreValue {
  readonly name: string;
  readonly ssm_association_id: string|null;
  readonly association_id: string|null;
  readonly association_name: string|null;
  readonly document_version: string|null;
  readonly instance_id: string|null;
  readonly output_location: Anon402|null;
  readonly parameters: {[s: string]: string}|null;
  readonly schedule_expression: string|null;
  readonly targets: Anon89[]|null;

  constructor({
    name,
    ssm_association_id = null,
    association_id = null,
    association_name = null,
    document_version = null,
    instance_id = null,
    output_location = null,
    parameters = null,
    schedule_expression = null,
    targets = null
  }: {
    name: string,
    ssm_association_id?: string|null,
    association_id?: string|null,
    association_name?: string|null,
    document_version?: string|null,
    instance_id?: string|null,
    output_location?: Anon402|null,
    parameters?: {[s: string]: string}|null,
    schedule_expression?: string|null,
    targets?: Anon89[]|null
  }) {
    this.name = name;
    this.ssm_association_id = ssm_association_id;
    this.association_id = association_id;
    this.association_name = association_name;
    this.document_version = document_version;
    this.instance_id = instance_id;
    this.output_location = output_location;
    this.parameters = parameters;
    this.schedule_expression = schedule_expression;
    this.targets = targets;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.ssm_association_id !== null) {
      ih['ssm_association_id'] = this.ssm_association_id;
    }
    if (this.association_id !== null) {
      ih['association_id'] = this.association_id;
    }
    if (this.association_name !== null) {
      ih['association_name'] = this.association_name;
    }
    if (this.document_version !== null) {
      ih['document_version'] = this.document_version;
    }
    if (this.instance_id !== null) {
      ih['instance_id'] = this.instance_id;
    }
    if (this.output_location !== null) {
      ih['output_location'] = this.output_location;
    }
    if (this.parameters !== null) {
      ih['parameters'] = this.parameters;
    }
    if (this.schedule_expression !== null) {
      ih['schedule_expression'] = this.schedule_expression;
    }
    if (this.targets !== null) {
      ih['targets'] = this.targets;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ssm_association';
  }
}

export class Ssm_document implements PcoreValue {
  readonly content: string;
  readonly document_type: string;
  readonly name: string;
  readonly ssm_document_id: string|null;
  readonly arn: string|null;
  readonly created_date: string|null;
  readonly default_version: string|null;
  readonly description: string|null;
  readonly document_format: string;
  readonly hash: string|null;
  readonly hash_type: string|null;
  readonly latest_version: string|null;
  readonly owner: string|null;
  readonly parameter: Anon403[]|null;
  readonly permissions: {[s: string]: Anon404}|null;
  readonly platform_types: string[]|null;
  readonly schema_version: string|null;
  readonly status: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    content,
    document_type,
    name,
    ssm_document_id = null,
    arn = null,
    created_date = null,
    default_version = null,
    description = null,
    document_format = 'JSON',
    hash = null,
    hash_type = null,
    latest_version = null,
    owner = null,
    parameter = null,
    permissions = null,
    platform_types = null,
    schema_version = null,
    status = null,
    tags = null
  }: {
    content: string,
    document_type: string,
    name: string,
    ssm_document_id?: string|null,
    arn?: string|null,
    created_date?: string|null,
    default_version?: string|null,
    description?: string|null,
    document_format?: string,
    hash?: string|null,
    hash_type?: string|null,
    latest_version?: string|null,
    owner?: string|null,
    parameter?: Anon403[]|null,
    permissions?: {[s: string]: Anon404}|null,
    platform_types?: string[]|null,
    schema_version?: string|null,
    status?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.content = content;
    this.document_type = document_type;
    this.name = name;
    this.ssm_document_id = ssm_document_id;
    this.arn = arn;
    this.created_date = created_date;
    this.default_version = default_version;
    this.description = description;
    this.document_format = document_format;
    this.hash = hash;
    this.hash_type = hash_type;
    this.latest_version = latest_version;
    this.owner = owner;
    this.parameter = parameter;
    this.permissions = permissions;
    this.platform_types = platform_types;
    this.schema_version = schema_version;
    this.status = status;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['content'] = this.content;
    ih['document_type'] = this.document_type;
    ih['name'] = this.name;
    if (this.ssm_document_id !== null) {
      ih['ssm_document_id'] = this.ssm_document_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.created_date !== null) {
      ih['created_date'] = this.created_date;
    }
    if (this.default_version !== null) {
      ih['default_version'] = this.default_version;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.document_format !== 'JSON') {
      ih['document_format'] = this.document_format;
    }
    if (this.hash !== null) {
      ih['hash'] = this.hash;
    }
    if (this.hash_type !== null) {
      ih['hash_type'] = this.hash_type;
    }
    if (this.latest_version !== null) {
      ih['latest_version'] = this.latest_version;
    }
    if (this.owner !== null) {
      ih['owner'] = this.owner;
    }
    if (this.parameter !== null) {
      ih['parameter'] = this.parameter;
    }
    if (this.permissions !== null) {
      ih['permissions'] = this.permissions;
    }
    if (this.platform_types !== null) {
      ih['platform_types'] = this.platform_types;
    }
    if (this.schema_version !== null) {
      ih['schema_version'] = this.schema_version;
    }
    if (this.status !== null) {
      ih['status'] = this.status;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ssm_document';
  }
}

export class Ssm_maintenance_window implements PcoreValue {
  readonly cutoff: number;
  readonly duration: number;
  readonly name: string;
  readonly schedule: string;
  readonly ssm_maintenance_window_id: string|null;
  readonly allow_unassociated_targets: boolean;
  readonly enabled: boolean;
  readonly end_date: string|null;
  readonly schedule_timezone: string|null;
  readonly start_date: string|null;

  constructor({
    cutoff,
    duration,
    name,
    schedule,
    ssm_maintenance_window_id = null,
    allow_unassociated_targets = false,
    enabled = true,
    end_date = null,
    schedule_timezone = null,
    start_date = null
  }: {
    cutoff: number,
    duration: number,
    name: string,
    schedule: string,
    ssm_maintenance_window_id?: string|null,
    allow_unassociated_targets?: boolean,
    enabled?: boolean,
    end_date?: string|null,
    schedule_timezone?: string|null,
    start_date?: string|null
  }) {
    this.cutoff = cutoff;
    this.duration = duration;
    this.name = name;
    this.schedule = schedule;
    this.ssm_maintenance_window_id = ssm_maintenance_window_id;
    this.allow_unassociated_targets = allow_unassociated_targets;
    this.enabled = enabled;
    this.end_date = end_date;
    this.schedule_timezone = schedule_timezone;
    this.start_date = start_date;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['cutoff'] = this.cutoff;
    ih['duration'] = this.duration;
    ih['name'] = this.name;
    ih['schedule'] = this.schedule;
    if (this.ssm_maintenance_window_id !== null) {
      ih['ssm_maintenance_window_id'] = this.ssm_maintenance_window_id;
    }
    if (this.allow_unassociated_targets !== false) {
      ih['allow_unassociated_targets'] = this.allow_unassociated_targets;
    }
    if (this.enabled !== true) {
      ih['enabled'] = this.enabled;
    }
    if (this.end_date !== null) {
      ih['end_date'] = this.end_date;
    }
    if (this.schedule_timezone !== null) {
      ih['schedule_timezone'] = this.schedule_timezone;
    }
    if (this.start_date !== null) {
      ih['start_date'] = this.start_date;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ssm_maintenance_window';
  }
}

export class Ssm_maintenance_window_target implements PcoreValue {
  readonly resource_type: string;
  readonly targets: Anon89[];
  readonly window_id: string;
  readonly ssm_maintenance_window_target_id: string|null;
  readonly owner_information: string|null;

  constructor({
    resource_type,
    targets,
    window_id,
    ssm_maintenance_window_target_id = null,
    owner_information = null
  }: {
    resource_type: string,
    targets: Anon89[],
    window_id: string,
    ssm_maintenance_window_target_id?: string|null,
    owner_information?: string|null
  }) {
    this.resource_type = resource_type;
    this.targets = targets;
    this.window_id = window_id;
    this.ssm_maintenance_window_target_id = ssm_maintenance_window_target_id;
    this.owner_information = owner_information;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['resource_type'] = this.resource_type;
    ih['targets'] = this.targets;
    ih['window_id'] = this.window_id;
    if (this.ssm_maintenance_window_target_id !== null) {
      ih['ssm_maintenance_window_target_id'] = this.ssm_maintenance_window_target_id;
    }
    if (this.owner_information !== null) {
      ih['owner_information'] = this.owner_information;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ssm_maintenance_window_target';
  }
}

export class Ssm_maintenance_window_task implements PcoreValue {
  readonly max_concurrency: string;
  readonly max_errors: string;
  readonly service_role_arn: string;
  readonly targets: Anon89[];
  readonly task_arn: string;
  readonly task_type: string;
  readonly window_id: string;
  readonly ssm_maintenance_window_task_id: string|null;
  readonly description: string|null;
  readonly logging_info: Anon405|null;
  readonly name: string|null;
  readonly priority: number|null;
  readonly task_parameters: Anon406[]|null;

  constructor({
    max_concurrency,
    max_errors,
    service_role_arn,
    targets,
    task_arn,
    task_type,
    window_id,
    ssm_maintenance_window_task_id = null,
    description = null,
    logging_info = null,
    name = null,
    priority = null,
    task_parameters = null
  }: {
    max_concurrency: string,
    max_errors: string,
    service_role_arn: string,
    targets: Anon89[],
    task_arn: string,
    task_type: string,
    window_id: string,
    ssm_maintenance_window_task_id?: string|null,
    description?: string|null,
    logging_info?: Anon405|null,
    name?: string|null,
    priority?: number|null,
    task_parameters?: Anon406[]|null
  }) {
    this.max_concurrency = max_concurrency;
    this.max_errors = max_errors;
    this.service_role_arn = service_role_arn;
    this.targets = targets;
    this.task_arn = task_arn;
    this.task_type = task_type;
    this.window_id = window_id;
    this.ssm_maintenance_window_task_id = ssm_maintenance_window_task_id;
    this.description = description;
    this.logging_info = logging_info;
    this.name = name;
    this.priority = priority;
    this.task_parameters = task_parameters;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['max_concurrency'] = this.max_concurrency;
    ih['max_errors'] = this.max_errors;
    ih['service_role_arn'] = this.service_role_arn;
    ih['targets'] = this.targets;
    ih['task_arn'] = this.task_arn;
    ih['task_type'] = this.task_type;
    ih['window_id'] = this.window_id;
    if (this.ssm_maintenance_window_task_id !== null) {
      ih['ssm_maintenance_window_task_id'] = this.ssm_maintenance_window_task_id;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.logging_info !== null) {
      ih['logging_info'] = this.logging_info;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.priority !== null) {
      ih['priority'] = this.priority;
    }
    if (this.task_parameters !== null) {
      ih['task_parameters'] = this.task_parameters;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ssm_maintenance_window_task';
  }
}

export class Ssm_parameter implements PcoreValue {
  readonly name: string;
  readonly type: string;
  readonly value: string;
  readonly ssm_parameter_id: string|null;
  readonly allowed_pattern: string|null;
  readonly arn: string|null;
  readonly description: string|null;
  readonly key_id: string|null;
  readonly overwrite: boolean|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    name,
    type,
    value,
    ssm_parameter_id = null,
    allowed_pattern = null,
    arn = null,
    description = null,
    key_id = null,
    overwrite = null,
    tags = null
  }: {
    name: string,
    type: string,
    value: string,
    ssm_parameter_id?: string|null,
    allowed_pattern?: string|null,
    arn?: string|null,
    description?: string|null,
    key_id?: string|null,
    overwrite?: boolean|null,
    tags?: {[s: string]: string}|null
  }) {
    this.name = name;
    this.type = type;
    this.value = value;
    this.ssm_parameter_id = ssm_parameter_id;
    this.allowed_pattern = allowed_pattern;
    this.arn = arn;
    this.description = description;
    this.key_id = key_id;
    this.overwrite = overwrite;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    ih['type'] = this.type;
    ih['value'] = this.value;
    if (this.ssm_parameter_id !== null) {
      ih['ssm_parameter_id'] = this.ssm_parameter_id;
    }
    if (this.allowed_pattern !== null) {
      ih['allowed_pattern'] = this.allowed_pattern;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.key_id !== null) {
      ih['key_id'] = this.key_id;
    }
    if (this.overwrite !== null) {
      ih['overwrite'] = this.overwrite;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ssm_parameter';
  }
}

export class Ssm_patch_baseline implements PcoreValue {
  readonly name: string;
  readonly ssm_patch_baseline_id: string|null;
  readonly approval_rule: Anon407[]|null;
  readonly approved_patches: string[]|null;
  readonly approved_patches_compliance_level: string;
  readonly description: string|null;
  readonly global_filter: Anon89[]|null;
  readonly operating_system: string;
  readonly rejected_patches: string[]|null;

  constructor({
    name,
    ssm_patch_baseline_id = null,
    approval_rule = null,
    approved_patches = null,
    approved_patches_compliance_level = 'UNSPECIFIED',
    description = null,
    global_filter = null,
    operating_system = 'WINDOWS',
    rejected_patches = null
  }: {
    name: string,
    ssm_patch_baseline_id?: string|null,
    approval_rule?: Anon407[]|null,
    approved_patches?: string[]|null,
    approved_patches_compliance_level?: string,
    description?: string|null,
    global_filter?: Anon89[]|null,
    operating_system?: string,
    rejected_patches?: string[]|null
  }) {
    this.name = name;
    this.ssm_patch_baseline_id = ssm_patch_baseline_id;
    this.approval_rule = approval_rule;
    this.approved_patches = approved_patches;
    this.approved_patches_compliance_level = approved_patches_compliance_level;
    this.description = description;
    this.global_filter = global_filter;
    this.operating_system = operating_system;
    this.rejected_patches = rejected_patches;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.ssm_patch_baseline_id !== null) {
      ih['ssm_patch_baseline_id'] = this.ssm_patch_baseline_id;
    }
    if (this.approval_rule !== null) {
      ih['approval_rule'] = this.approval_rule;
    }
    if (this.approved_patches !== null) {
      ih['approved_patches'] = this.approved_patches;
    }
    if (this.approved_patches_compliance_level !== 'UNSPECIFIED') {
      ih['approved_patches_compliance_level'] = this.approved_patches_compliance_level;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.global_filter !== null) {
      ih['global_filter'] = this.global_filter;
    }
    if (this.operating_system !== 'WINDOWS') {
      ih['operating_system'] = this.operating_system;
    }
    if (this.rejected_patches !== null) {
      ih['rejected_patches'] = this.rejected_patches;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ssm_patch_baseline';
  }
}

export class Ssm_patch_group implements PcoreValue {
  readonly baseline_id: string;
  readonly patch_group: string;
  readonly ssm_patch_group_id: string|null;

  constructor({
    baseline_id,
    patch_group,
    ssm_patch_group_id = null
  }: {
    baseline_id: string,
    patch_group: string,
    ssm_patch_group_id?: string|null
  }) {
    this.baseline_id = baseline_id;
    this.patch_group = patch_group;
    this.ssm_patch_group_id = ssm_patch_group_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['baseline_id'] = this.baseline_id;
    ih['patch_group'] = this.patch_group;
    if (this.ssm_patch_group_id !== null) {
      ih['ssm_patch_group_id'] = this.ssm_patch_group_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ssm_patch_group';
  }
}

export class Ssm_resource_data_sync implements PcoreValue {
  readonly name: string;
  readonly ssm_resource_data_sync_id: string|null;
  readonly s3_destination: Anon408|null;

  constructor({
    name,
    ssm_resource_data_sync_id = null,
    s3_destination = null
  }: {
    name: string,
    ssm_resource_data_sync_id?: string|null,
    s3_destination?: Anon408|null
  }) {
    this.name = name;
    this.ssm_resource_data_sync_id = ssm_resource_data_sync_id;
    this.s3_destination = s3_destination;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.ssm_resource_data_sync_id !== null) {
      ih['ssm_resource_data_sync_id'] = this.ssm_resource_data_sync_id;
    }
    if (this.s3_destination !== null) {
      ih['s3_destination'] = this.s3_destination;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Ssm_resource_data_sync';
  }
}

export class Storagegateway_cache implements PcoreValue {
  readonly disk_id: string;
  readonly gateway_arn: string;
  readonly storagegateway_cache_id: string|null;

  constructor({
    disk_id,
    gateway_arn,
    storagegateway_cache_id = null
  }: {
    disk_id: string,
    gateway_arn: string,
    storagegateway_cache_id?: string|null
  }) {
    this.disk_id = disk_id;
    this.gateway_arn = gateway_arn;
    this.storagegateway_cache_id = storagegateway_cache_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['disk_id'] = this.disk_id;
    ih['gateway_arn'] = this.gateway_arn;
    if (this.storagegateway_cache_id !== null) {
      ih['storagegateway_cache_id'] = this.storagegateway_cache_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Storagegateway_cache';
  }
}

export class Storagegateway_cached_iscsi_volume implements PcoreValue {
  readonly gateway_arn: string;
  readonly network_interface_id: string;
  readonly target_name: string;
  readonly volume_size_in_bytes: number;
  readonly storagegateway_cached_iscsi_volume_id: string|null;
  readonly arn: string|null;
  readonly chap_enabled: boolean|null;
  readonly lun_number: number|null;
  readonly network_interface_port: number|null;
  readonly snapshot_id: string|null;
  readonly source_volume_arn: string|null;
  readonly target_arn: string|null;
  readonly volume_arn: string|null;
  readonly volume_id: string|null;

  constructor({
    gateway_arn,
    network_interface_id,
    target_name,
    volume_size_in_bytes,
    storagegateway_cached_iscsi_volume_id = null,
    arn = null,
    chap_enabled = null,
    lun_number = null,
    network_interface_port = null,
    snapshot_id = null,
    source_volume_arn = null,
    target_arn = null,
    volume_arn = null,
    volume_id = null
  }: {
    gateway_arn: string,
    network_interface_id: string,
    target_name: string,
    volume_size_in_bytes: number,
    storagegateway_cached_iscsi_volume_id?: string|null,
    arn?: string|null,
    chap_enabled?: boolean|null,
    lun_number?: number|null,
    network_interface_port?: number|null,
    snapshot_id?: string|null,
    source_volume_arn?: string|null,
    target_arn?: string|null,
    volume_arn?: string|null,
    volume_id?: string|null
  }) {
    this.gateway_arn = gateway_arn;
    this.network_interface_id = network_interface_id;
    this.target_name = target_name;
    this.volume_size_in_bytes = volume_size_in_bytes;
    this.storagegateway_cached_iscsi_volume_id = storagegateway_cached_iscsi_volume_id;
    this.arn = arn;
    this.chap_enabled = chap_enabled;
    this.lun_number = lun_number;
    this.network_interface_port = network_interface_port;
    this.snapshot_id = snapshot_id;
    this.source_volume_arn = source_volume_arn;
    this.target_arn = target_arn;
    this.volume_arn = volume_arn;
    this.volume_id = volume_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['gateway_arn'] = this.gateway_arn;
    ih['network_interface_id'] = this.network_interface_id;
    ih['target_name'] = this.target_name;
    ih['volume_size_in_bytes'] = this.volume_size_in_bytes;
    if (this.storagegateway_cached_iscsi_volume_id !== null) {
      ih['storagegateway_cached_iscsi_volume_id'] = this.storagegateway_cached_iscsi_volume_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.chap_enabled !== null) {
      ih['chap_enabled'] = this.chap_enabled;
    }
    if (this.lun_number !== null) {
      ih['lun_number'] = this.lun_number;
    }
    if (this.network_interface_port !== null) {
      ih['network_interface_port'] = this.network_interface_port;
    }
    if (this.snapshot_id !== null) {
      ih['snapshot_id'] = this.snapshot_id;
    }
    if (this.source_volume_arn !== null) {
      ih['source_volume_arn'] = this.source_volume_arn;
    }
    if (this.target_arn !== null) {
      ih['target_arn'] = this.target_arn;
    }
    if (this.volume_arn !== null) {
      ih['volume_arn'] = this.volume_arn;
    }
    if (this.volume_id !== null) {
      ih['volume_id'] = this.volume_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Storagegateway_cached_iscsi_volume';
  }
}

export class Storagegateway_gateway implements PcoreValue {
  readonly gateway_name: string;
  readonly gateway_timezone: string;
  readonly storagegateway_gateway_id: string|null;
  readonly activation_key: string|null;
  readonly arn: string|null;
  readonly gateway_id: string|null;
  readonly gateway_ip_address: string|null;
  readonly gateway_type: string;
  readonly medium_changer_type: string|null;
  readonly smb_active_directory_settings: Anon409|null;
  readonly smb_guest_password: string|null;
  readonly tape_drive_type: string|null;

  constructor({
    gateway_name,
    gateway_timezone,
    storagegateway_gateway_id = null,
    activation_key = null,
    arn = null,
    gateway_id = null,
    gateway_ip_address = null,
    gateway_type = 'STORED',
    medium_changer_type = null,
    smb_active_directory_settings = null,
    smb_guest_password = null,
    tape_drive_type = null
  }: {
    gateway_name: string,
    gateway_timezone: string,
    storagegateway_gateway_id?: string|null,
    activation_key?: string|null,
    arn?: string|null,
    gateway_id?: string|null,
    gateway_ip_address?: string|null,
    gateway_type?: string,
    medium_changer_type?: string|null,
    smb_active_directory_settings?: Anon409|null,
    smb_guest_password?: string|null,
    tape_drive_type?: string|null
  }) {
    this.gateway_name = gateway_name;
    this.gateway_timezone = gateway_timezone;
    this.storagegateway_gateway_id = storagegateway_gateway_id;
    this.activation_key = activation_key;
    this.arn = arn;
    this.gateway_id = gateway_id;
    this.gateway_ip_address = gateway_ip_address;
    this.gateway_type = gateway_type;
    this.medium_changer_type = medium_changer_type;
    this.smb_active_directory_settings = smb_active_directory_settings;
    this.smb_guest_password = smb_guest_password;
    this.tape_drive_type = tape_drive_type;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['gateway_name'] = this.gateway_name;
    ih['gateway_timezone'] = this.gateway_timezone;
    if (this.storagegateway_gateway_id !== null) {
      ih['storagegateway_gateway_id'] = this.storagegateway_gateway_id;
    }
    if (this.activation_key !== null) {
      ih['activation_key'] = this.activation_key;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.gateway_id !== null) {
      ih['gateway_id'] = this.gateway_id;
    }
    if (this.gateway_ip_address !== null) {
      ih['gateway_ip_address'] = this.gateway_ip_address;
    }
    if (this.gateway_type !== 'STORED') {
      ih['gateway_type'] = this.gateway_type;
    }
    if (this.medium_changer_type !== null) {
      ih['medium_changer_type'] = this.medium_changer_type;
    }
    if (this.smb_active_directory_settings !== null) {
      ih['smb_active_directory_settings'] = this.smb_active_directory_settings;
    }
    if (this.smb_guest_password !== null) {
      ih['smb_guest_password'] = this.smb_guest_password;
    }
    if (this.tape_drive_type !== null) {
      ih['tape_drive_type'] = this.tape_drive_type;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Storagegateway_gateway';
  }
}

export class Storagegateway_nfs_file_share implements PcoreValue {
  readonly client_list: string[];
  readonly gateway_arn: string;
  readonly location_arn: string;
  readonly role_arn: string;
  readonly storagegateway_nfs_file_share_id: string|null;
  readonly arn: string|null;
  readonly default_storage_class: string;
  readonly fileshare_id: string|null;
  readonly guess_mime_type_enabled: boolean;
  readonly kms_encrypted: boolean;
  readonly kms_key_arn: string|null;
  readonly nfs_file_share_defaults: Anon410|null;
  readonly object_acl: string;
  readonly read_only: boolean;
  readonly requester_pays: boolean;
  readonly squash: string;

  constructor({
    client_list,
    gateway_arn,
    location_arn,
    role_arn,
    storagegateway_nfs_file_share_id = null,
    arn = null,
    default_storage_class = 'S3_STANDARD',
    fileshare_id = null,
    guess_mime_type_enabled = true,
    kms_encrypted = false,
    kms_key_arn = null,
    nfs_file_share_defaults = null,
    object_acl = 'private',
    read_only = false,
    requester_pays = false,
    squash = 'RootSquash'
  }: {
    client_list: string[],
    gateway_arn: string,
    location_arn: string,
    role_arn: string,
    storagegateway_nfs_file_share_id?: string|null,
    arn?: string|null,
    default_storage_class?: string,
    fileshare_id?: string|null,
    guess_mime_type_enabled?: boolean,
    kms_encrypted?: boolean,
    kms_key_arn?: string|null,
    nfs_file_share_defaults?: Anon410|null,
    object_acl?: string,
    read_only?: boolean,
    requester_pays?: boolean,
    squash?: string
  }) {
    this.client_list = client_list;
    this.gateway_arn = gateway_arn;
    this.location_arn = location_arn;
    this.role_arn = role_arn;
    this.storagegateway_nfs_file_share_id = storagegateway_nfs_file_share_id;
    this.arn = arn;
    this.default_storage_class = default_storage_class;
    this.fileshare_id = fileshare_id;
    this.guess_mime_type_enabled = guess_mime_type_enabled;
    this.kms_encrypted = kms_encrypted;
    this.kms_key_arn = kms_key_arn;
    this.nfs_file_share_defaults = nfs_file_share_defaults;
    this.object_acl = object_acl;
    this.read_only = read_only;
    this.requester_pays = requester_pays;
    this.squash = squash;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['client_list'] = this.client_list;
    ih['gateway_arn'] = this.gateway_arn;
    ih['location_arn'] = this.location_arn;
    ih['role_arn'] = this.role_arn;
    if (this.storagegateway_nfs_file_share_id !== null) {
      ih['storagegateway_nfs_file_share_id'] = this.storagegateway_nfs_file_share_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.default_storage_class !== 'S3_STANDARD') {
      ih['default_storage_class'] = this.default_storage_class;
    }
    if (this.fileshare_id !== null) {
      ih['fileshare_id'] = this.fileshare_id;
    }
    if (this.guess_mime_type_enabled !== true) {
      ih['guess_mime_type_enabled'] = this.guess_mime_type_enabled;
    }
    if (this.kms_encrypted !== false) {
      ih['kms_encrypted'] = this.kms_encrypted;
    }
    if (this.kms_key_arn !== null) {
      ih['kms_key_arn'] = this.kms_key_arn;
    }
    if (this.nfs_file_share_defaults !== null) {
      ih['nfs_file_share_defaults'] = this.nfs_file_share_defaults;
    }
    if (this.object_acl !== 'private') {
      ih['object_acl'] = this.object_acl;
    }
    if (this.read_only !== false) {
      ih['read_only'] = this.read_only;
    }
    if (this.requester_pays !== false) {
      ih['requester_pays'] = this.requester_pays;
    }
    if (this.squash !== 'RootSquash') {
      ih['squash'] = this.squash;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Storagegateway_nfs_file_share';
  }
}

export class Storagegateway_smb_file_share implements PcoreValue {
  readonly gateway_arn: string;
  readonly location_arn: string;
  readonly role_arn: string;
  readonly storagegateway_smb_file_share_id: string|null;
  readonly arn: string|null;
  readonly authentication: string;
  readonly default_storage_class: string;
  readonly fileshare_id: string|null;
  readonly guess_mime_type_enabled: boolean;
  readonly invalid_user_list: string[]|null;
  readonly kms_encrypted: boolean;
  readonly kms_key_arn: string|null;
  readonly object_acl: string;
  readonly read_only: boolean;
  readonly requester_pays: boolean;
  readonly valid_user_list: string[]|null;

  constructor({
    gateway_arn,
    location_arn,
    role_arn,
    storagegateway_smb_file_share_id = null,
    arn = null,
    authentication = 'ActiveDirectory',
    default_storage_class = 'S3_STANDARD',
    fileshare_id = null,
    guess_mime_type_enabled = true,
    invalid_user_list = null,
    kms_encrypted = false,
    kms_key_arn = null,
    object_acl = 'private',
    read_only = false,
    requester_pays = false,
    valid_user_list = null
  }: {
    gateway_arn: string,
    location_arn: string,
    role_arn: string,
    storagegateway_smb_file_share_id?: string|null,
    arn?: string|null,
    authentication?: string,
    default_storage_class?: string,
    fileshare_id?: string|null,
    guess_mime_type_enabled?: boolean,
    invalid_user_list?: string[]|null,
    kms_encrypted?: boolean,
    kms_key_arn?: string|null,
    object_acl?: string,
    read_only?: boolean,
    requester_pays?: boolean,
    valid_user_list?: string[]|null
  }) {
    this.gateway_arn = gateway_arn;
    this.location_arn = location_arn;
    this.role_arn = role_arn;
    this.storagegateway_smb_file_share_id = storagegateway_smb_file_share_id;
    this.arn = arn;
    this.authentication = authentication;
    this.default_storage_class = default_storage_class;
    this.fileshare_id = fileshare_id;
    this.guess_mime_type_enabled = guess_mime_type_enabled;
    this.invalid_user_list = invalid_user_list;
    this.kms_encrypted = kms_encrypted;
    this.kms_key_arn = kms_key_arn;
    this.object_acl = object_acl;
    this.read_only = read_only;
    this.requester_pays = requester_pays;
    this.valid_user_list = valid_user_list;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['gateway_arn'] = this.gateway_arn;
    ih['location_arn'] = this.location_arn;
    ih['role_arn'] = this.role_arn;
    if (this.storagegateway_smb_file_share_id !== null) {
      ih['storagegateway_smb_file_share_id'] = this.storagegateway_smb_file_share_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.authentication !== 'ActiveDirectory') {
      ih['authentication'] = this.authentication;
    }
    if (this.default_storage_class !== 'S3_STANDARD') {
      ih['default_storage_class'] = this.default_storage_class;
    }
    if (this.fileshare_id !== null) {
      ih['fileshare_id'] = this.fileshare_id;
    }
    if (this.guess_mime_type_enabled !== true) {
      ih['guess_mime_type_enabled'] = this.guess_mime_type_enabled;
    }
    if (this.invalid_user_list !== null) {
      ih['invalid_user_list'] = this.invalid_user_list;
    }
    if (this.kms_encrypted !== false) {
      ih['kms_encrypted'] = this.kms_encrypted;
    }
    if (this.kms_key_arn !== null) {
      ih['kms_key_arn'] = this.kms_key_arn;
    }
    if (this.object_acl !== 'private') {
      ih['object_acl'] = this.object_acl;
    }
    if (this.read_only !== false) {
      ih['read_only'] = this.read_only;
    }
    if (this.requester_pays !== false) {
      ih['requester_pays'] = this.requester_pays;
    }
    if (this.valid_user_list !== null) {
      ih['valid_user_list'] = this.valid_user_list;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Storagegateway_smb_file_share';
  }
}

export class Storagegateway_upload_buffer implements PcoreValue {
  readonly disk_id: string;
  readonly gateway_arn: string;
  readonly storagegateway_upload_buffer_id: string|null;

  constructor({
    disk_id,
    gateway_arn,
    storagegateway_upload_buffer_id = null
  }: {
    disk_id: string,
    gateway_arn: string,
    storagegateway_upload_buffer_id?: string|null
  }) {
    this.disk_id = disk_id;
    this.gateway_arn = gateway_arn;
    this.storagegateway_upload_buffer_id = storagegateway_upload_buffer_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['disk_id'] = this.disk_id;
    ih['gateway_arn'] = this.gateway_arn;
    if (this.storagegateway_upload_buffer_id !== null) {
      ih['storagegateway_upload_buffer_id'] = this.storagegateway_upload_buffer_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Storagegateway_upload_buffer';
  }
}

export class Storagegateway_working_storage implements PcoreValue {
  readonly disk_id: string;
  readonly gateway_arn: string;
  readonly storagegateway_working_storage_id: string|null;

  constructor({
    disk_id,
    gateway_arn,
    storagegateway_working_storage_id = null
  }: {
    disk_id: string,
    gateway_arn: string,
    storagegateway_working_storage_id?: string|null
  }) {
    this.disk_id = disk_id;
    this.gateway_arn = gateway_arn;
    this.storagegateway_working_storage_id = storagegateway_working_storage_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['disk_id'] = this.disk_id;
    ih['gateway_arn'] = this.gateway_arn;
    if (this.storagegateway_working_storage_id !== null) {
      ih['storagegateway_working_storage_id'] = this.storagegateway_working_storage_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Storagegateway_working_storage';
  }
}

export class Subnet implements PcoreValue {
  readonly cidr_block: string;
  readonly vpc_id: string;
  readonly subnet_id: string|null;
  readonly arn: string|null;
  readonly assign_ipv6_address_on_creation: boolean;
  readonly availability_zone: string|null;
  readonly availability_zone_id: string|null;
  readonly ipv6_cidr_block: string|null;
  readonly ipv6_cidr_block_association_id: string|null;
  readonly map_public_ip_on_launch: boolean;
  readonly owner_id: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    cidr_block,
    vpc_id,
    subnet_id = null,
    arn = null,
    assign_ipv6_address_on_creation = false,
    availability_zone = null,
    availability_zone_id = null,
    ipv6_cidr_block = null,
    ipv6_cidr_block_association_id = null,
    map_public_ip_on_launch = false,
    owner_id = null,
    tags = null
  }: {
    cidr_block: string,
    vpc_id: string,
    subnet_id?: string|null,
    arn?: string|null,
    assign_ipv6_address_on_creation?: boolean,
    availability_zone?: string|null,
    availability_zone_id?: string|null,
    ipv6_cidr_block?: string|null,
    ipv6_cidr_block_association_id?: string|null,
    map_public_ip_on_launch?: boolean,
    owner_id?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.cidr_block = cidr_block;
    this.vpc_id = vpc_id;
    this.subnet_id = subnet_id;
    this.arn = arn;
    this.assign_ipv6_address_on_creation = assign_ipv6_address_on_creation;
    this.availability_zone = availability_zone;
    this.availability_zone_id = availability_zone_id;
    this.ipv6_cidr_block = ipv6_cidr_block;
    this.ipv6_cidr_block_association_id = ipv6_cidr_block_association_id;
    this.map_public_ip_on_launch = map_public_ip_on_launch;
    this.owner_id = owner_id;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['cidr_block'] = this.cidr_block;
    ih['vpc_id'] = this.vpc_id;
    if (this.subnet_id !== null) {
      ih['subnet_id'] = this.subnet_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.assign_ipv6_address_on_creation !== false) {
      ih['assign_ipv6_address_on_creation'] = this.assign_ipv6_address_on_creation;
    }
    if (this.availability_zone !== null) {
      ih['availability_zone'] = this.availability_zone;
    }
    if (this.availability_zone_id !== null) {
      ih['availability_zone_id'] = this.availability_zone_id;
    }
    if (this.ipv6_cidr_block !== null) {
      ih['ipv6_cidr_block'] = this.ipv6_cidr_block;
    }
    if (this.ipv6_cidr_block_association_id !== null) {
      ih['ipv6_cidr_block_association_id'] = this.ipv6_cidr_block_association_id;
    }
    if (this.map_public_ip_on_launch !== false) {
      ih['map_public_ip_on_launch'] = this.map_public_ip_on_launch;
    }
    if (this.owner_id !== null) {
      ih['owner_id'] = this.owner_id;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Subnet';
  }
}

export class Swf_domain implements PcoreValue {
  readonly workflow_execution_retention_period_in_days: string;
  readonly swf_domain_id: string|null;
  readonly description: string|null;
  readonly name: string|null;
  readonly name_prefix: string|null;

  constructor({
    workflow_execution_retention_period_in_days,
    swf_domain_id = null,
    description = null,
    name = null,
    name_prefix = null
  }: {
    workflow_execution_retention_period_in_days: string,
    swf_domain_id?: string|null,
    description?: string|null,
    name?: string|null,
    name_prefix?: string|null
  }) {
    this.workflow_execution_retention_period_in_days = workflow_execution_retention_period_in_days;
    this.swf_domain_id = swf_domain_id;
    this.description = description;
    this.name = name;
    this.name_prefix = name_prefix;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['workflow_execution_retention_period_in_days'] = this.workflow_execution_retention_period_in_days;
    if (this.swf_domain_id !== null) {
      ih['swf_domain_id'] = this.swf_domain_id;
    }
    if (this.description !== null) {
      ih['description'] = this.description;
    }
    if (this.name !== null) {
      ih['name'] = this.name;
    }
    if (this.name_prefix !== null) {
      ih['name_prefix'] = this.name_prefix;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Swf_domain';
  }
}

export class Transfer_server implements PcoreValue {
  readonly transfer_server_id: string|null;
  readonly arn: string|null;
  readonly endpoint: string|null;
  readonly force_destroy: boolean;
  readonly identity_provider_type: string;
  readonly invocation_role: string|null;
  readonly logging_role: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly url: string|null;

  constructor({
    transfer_server_id = null,
    arn = null,
    endpoint = null,
    force_destroy = false,
    identity_provider_type = 'SERVICE_MANAGED',
    invocation_role = null,
    logging_role = null,
    tags = null,
    url = null
  }: {
    transfer_server_id?: string|null,
    arn?: string|null,
    endpoint?: string|null,
    force_destroy?: boolean,
    identity_provider_type?: string,
    invocation_role?: string|null,
    logging_role?: string|null,
    tags?: {[s: string]: string}|null,
    url?: string|null
  }) {
    this.transfer_server_id = transfer_server_id;
    this.arn = arn;
    this.endpoint = endpoint;
    this.force_destroy = force_destroy;
    this.identity_provider_type = identity_provider_type;
    this.invocation_role = invocation_role;
    this.logging_role = logging_role;
    this.tags = tags;
    this.url = url;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.transfer_server_id !== null) {
      ih['transfer_server_id'] = this.transfer_server_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.endpoint !== null) {
      ih['endpoint'] = this.endpoint;
    }
    if (this.force_destroy !== false) {
      ih['force_destroy'] = this.force_destroy;
    }
    if (this.identity_provider_type !== 'SERVICE_MANAGED') {
      ih['identity_provider_type'] = this.identity_provider_type;
    }
    if (this.invocation_role !== null) {
      ih['invocation_role'] = this.invocation_role;
    }
    if (this.logging_role !== null) {
      ih['logging_role'] = this.logging_role;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.url !== null) {
      ih['url'] = this.url;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Transfer_server';
  }
}

export class Transfer_ssh_key implements PcoreValue {
  readonly body: string;
  readonly server_id: string;
  readonly user_name: string;
  readonly transfer_ssh_key_id: string|null;

  constructor({
    body,
    server_id,
    user_name,
    transfer_ssh_key_id = null
  }: {
    body: string,
    server_id: string,
    user_name: string,
    transfer_ssh_key_id?: string|null
  }) {
    this.body = body;
    this.server_id = server_id;
    this.user_name = user_name;
    this.transfer_ssh_key_id = transfer_ssh_key_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['body'] = this.body;
    ih['server_id'] = this.server_id;
    ih['user_name'] = this.user_name;
    if (this.transfer_ssh_key_id !== null) {
      ih['transfer_ssh_key_id'] = this.transfer_ssh_key_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Transfer_ssh_key';
  }
}

export class Transfer_user implements PcoreValue {
  readonly role: string;
  readonly server_id: string;
  readonly user_name: string;
  readonly transfer_user_id: string|null;
  readonly arn: string|null;
  readonly home_directory: string|null;
  readonly policy: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    role,
    server_id,
    user_name,
    transfer_user_id = null,
    arn = null,
    home_directory = null,
    policy = null,
    tags = null
  }: {
    role: string,
    server_id: string,
    user_name: string,
    transfer_user_id?: string|null,
    arn?: string|null,
    home_directory?: string|null,
    policy?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.role = role;
    this.server_id = server_id;
    this.user_name = user_name;
    this.transfer_user_id = transfer_user_id;
    this.arn = arn;
    this.home_directory = home_directory;
    this.policy = policy;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['role'] = this.role;
    ih['server_id'] = this.server_id;
    ih['user_name'] = this.user_name;
    if (this.transfer_user_id !== null) {
      ih['transfer_user_id'] = this.transfer_user_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.home_directory !== null) {
      ih['home_directory'] = this.home_directory;
    }
    if (this.policy !== null) {
      ih['policy'] = this.policy;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Transfer_user';
  }
}

export class Volume_attachment implements PcoreValue {
  readonly device_name: string;
  readonly instance_id: string;
  readonly volume_id: string;
  readonly volume_attachment_id: string|null;
  readonly force_detach: boolean|null;
  readonly skip_destroy: boolean|null;

  constructor({
    device_name,
    instance_id,
    volume_id,
    volume_attachment_id = null,
    force_detach = null,
    skip_destroy = null
  }: {
    device_name: string,
    instance_id: string,
    volume_id: string,
    volume_attachment_id?: string|null,
    force_detach?: boolean|null,
    skip_destroy?: boolean|null
  }) {
    this.device_name = device_name;
    this.instance_id = instance_id;
    this.volume_id = volume_id;
    this.volume_attachment_id = volume_attachment_id;
    this.force_detach = force_detach;
    this.skip_destroy = skip_destroy;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['device_name'] = this.device_name;
    ih['instance_id'] = this.instance_id;
    ih['volume_id'] = this.volume_id;
    if (this.volume_attachment_id !== null) {
      ih['volume_attachment_id'] = this.volume_attachment_id;
    }
    if (this.force_detach !== null) {
      ih['force_detach'] = this.force_detach;
    }
    if (this.skip_destroy !== null) {
      ih['skip_destroy'] = this.skip_destroy;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Volume_attachment';
  }
}

export class Vpc implements PcoreValue {
  readonly cidr_block: string;
  readonly vpc_id: string|null;
  readonly arn: string|null;
  readonly assign_generated_ipv6_cidr_block: boolean;
  readonly default_network_acl_id: string|null;
  readonly default_route_table_id: string|null;
  readonly default_security_group_id: string|null;
  readonly dhcp_options_id: string|null;
  readonly enable_classiclink: boolean|null;
  readonly enable_classiclink_dns_support: boolean|null;
  readonly enable_dns_hostnames: boolean|null;
  readonly enable_dns_support: boolean;
  readonly instance_tenancy: string;
  readonly ipv6_association_id: string|null;
  readonly ipv6_cidr_block: string|null;
  readonly main_route_table_id: string|null;
  readonly owner_id: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    cidr_block,
    vpc_id = null,
    arn = null,
    assign_generated_ipv6_cidr_block = false,
    default_network_acl_id = null,
    default_route_table_id = null,
    default_security_group_id = null,
    dhcp_options_id = null,
    enable_classiclink = null,
    enable_classiclink_dns_support = null,
    enable_dns_hostnames = null,
    enable_dns_support = true,
    instance_tenancy = 'default',
    ipv6_association_id = null,
    ipv6_cidr_block = null,
    main_route_table_id = null,
    owner_id = null,
    tags = null
  }: {
    cidr_block: string,
    vpc_id?: string|null,
    arn?: string|null,
    assign_generated_ipv6_cidr_block?: boolean,
    default_network_acl_id?: string|null,
    default_route_table_id?: string|null,
    default_security_group_id?: string|null,
    dhcp_options_id?: string|null,
    enable_classiclink?: boolean|null,
    enable_classiclink_dns_support?: boolean|null,
    enable_dns_hostnames?: boolean|null,
    enable_dns_support?: boolean,
    instance_tenancy?: string,
    ipv6_association_id?: string|null,
    ipv6_cidr_block?: string|null,
    main_route_table_id?: string|null,
    owner_id?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.cidr_block = cidr_block;
    this.vpc_id = vpc_id;
    this.arn = arn;
    this.assign_generated_ipv6_cidr_block = assign_generated_ipv6_cidr_block;
    this.default_network_acl_id = default_network_acl_id;
    this.default_route_table_id = default_route_table_id;
    this.default_security_group_id = default_security_group_id;
    this.dhcp_options_id = dhcp_options_id;
    this.enable_classiclink = enable_classiclink;
    this.enable_classiclink_dns_support = enable_classiclink_dns_support;
    this.enable_dns_hostnames = enable_dns_hostnames;
    this.enable_dns_support = enable_dns_support;
    this.instance_tenancy = instance_tenancy;
    this.ipv6_association_id = ipv6_association_id;
    this.ipv6_cidr_block = ipv6_cidr_block;
    this.main_route_table_id = main_route_table_id;
    this.owner_id = owner_id;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['cidr_block'] = this.cidr_block;
    if (this.vpc_id !== null) {
      ih['vpc_id'] = this.vpc_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.assign_generated_ipv6_cidr_block !== false) {
      ih['assign_generated_ipv6_cidr_block'] = this.assign_generated_ipv6_cidr_block;
    }
    if (this.default_network_acl_id !== null) {
      ih['default_network_acl_id'] = this.default_network_acl_id;
    }
    if (this.default_route_table_id !== null) {
      ih['default_route_table_id'] = this.default_route_table_id;
    }
    if (this.default_security_group_id !== null) {
      ih['default_security_group_id'] = this.default_security_group_id;
    }
    if (this.dhcp_options_id !== null) {
      ih['dhcp_options_id'] = this.dhcp_options_id;
    }
    if (this.enable_classiclink !== null) {
      ih['enable_classiclink'] = this.enable_classiclink;
    }
    if (this.enable_classiclink_dns_support !== null) {
      ih['enable_classiclink_dns_support'] = this.enable_classiclink_dns_support;
    }
    if (this.enable_dns_hostnames !== null) {
      ih['enable_dns_hostnames'] = this.enable_dns_hostnames;
    }
    if (this.enable_dns_support !== true) {
      ih['enable_dns_support'] = this.enable_dns_support;
    }
    if (this.instance_tenancy !== 'default') {
      ih['instance_tenancy'] = this.instance_tenancy;
    }
    if (this.ipv6_association_id !== null) {
      ih['ipv6_association_id'] = this.ipv6_association_id;
    }
    if (this.ipv6_cidr_block !== null) {
      ih['ipv6_cidr_block'] = this.ipv6_cidr_block;
    }
    if (this.main_route_table_id !== null) {
      ih['main_route_table_id'] = this.main_route_table_id;
    }
    if (this.owner_id !== null) {
      ih['owner_id'] = this.owner_id;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Vpc';
  }
}

export class Vpc_dhcp_options implements PcoreValue {
  readonly vpc_dhcp_options_id: string|null;
  readonly domain_name: string|null;
  readonly domain_name_servers: string[]|null;
  readonly netbios_name_servers: string[]|null;
  readonly netbios_node_type: string|null;
  readonly ntp_servers: string[]|null;
  readonly owner_id: string|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    vpc_dhcp_options_id = null,
    domain_name = null,
    domain_name_servers = null,
    netbios_name_servers = null,
    netbios_node_type = null,
    ntp_servers = null,
    owner_id = null,
    tags = null
  }: {
    vpc_dhcp_options_id?: string|null,
    domain_name?: string|null,
    domain_name_servers?: string[]|null,
    netbios_name_servers?: string[]|null,
    netbios_node_type?: string|null,
    ntp_servers?: string[]|null,
    owner_id?: string|null,
    tags?: {[s: string]: string}|null
  }) {
    this.vpc_dhcp_options_id = vpc_dhcp_options_id;
    this.domain_name = domain_name;
    this.domain_name_servers = domain_name_servers;
    this.netbios_name_servers = netbios_name_servers;
    this.netbios_node_type = netbios_node_type;
    this.ntp_servers = ntp_servers;
    this.owner_id = owner_id;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.vpc_dhcp_options_id !== null) {
      ih['vpc_dhcp_options_id'] = this.vpc_dhcp_options_id;
    }
    if (this.domain_name !== null) {
      ih['domain_name'] = this.domain_name;
    }
    if (this.domain_name_servers !== null) {
      ih['domain_name_servers'] = this.domain_name_servers;
    }
    if (this.netbios_name_servers !== null) {
      ih['netbios_name_servers'] = this.netbios_name_servers;
    }
    if (this.netbios_node_type !== null) {
      ih['netbios_node_type'] = this.netbios_node_type;
    }
    if (this.ntp_servers !== null) {
      ih['ntp_servers'] = this.ntp_servers;
    }
    if (this.owner_id !== null) {
      ih['owner_id'] = this.owner_id;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Vpc_dhcp_options';
  }
}

export class Vpc_dhcp_options_association implements PcoreValue {
  readonly dhcp_options_id: string;
  readonly vpc_id: string;
  readonly vpc_dhcp_options_association_id: string|null;

  constructor({
    dhcp_options_id,
    vpc_id,
    vpc_dhcp_options_association_id = null
  }: {
    dhcp_options_id: string,
    vpc_id: string,
    vpc_dhcp_options_association_id?: string|null
  }) {
    this.dhcp_options_id = dhcp_options_id;
    this.vpc_id = vpc_id;
    this.vpc_dhcp_options_association_id = vpc_dhcp_options_association_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['dhcp_options_id'] = this.dhcp_options_id;
    ih['vpc_id'] = this.vpc_id;
    if (this.vpc_dhcp_options_association_id !== null) {
      ih['vpc_dhcp_options_association_id'] = this.vpc_dhcp_options_association_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Vpc_dhcp_options_association';
  }
}

export class Vpc_endpoint implements PcoreValue {
  readonly service_name: string;
  readonly vpc_id: string;
  readonly vpc_endpoint_id: string|null;
  readonly auto_accept: boolean|null;
  readonly cidr_blocks: string[]|null;
  readonly dns_entry: Anon411[]|null;
  readonly network_interface_ids: string[]|null;
  readonly policy: string|null;
  readonly prefix_list_id: string|null;
  readonly private_dns_enabled: boolean;
  readonly route_table_ids: string[]|null;
  readonly security_group_ids: string[]|null;
  readonly state: string|null;
  readonly subnet_ids: string[]|null;
  readonly vpc_endpoint_type: string;

  constructor({
    service_name,
    vpc_id,
    vpc_endpoint_id = null,
    auto_accept = null,
    cidr_blocks = null,
    dns_entry = null,
    network_interface_ids = null,
    policy = null,
    prefix_list_id = null,
    private_dns_enabled = false,
    route_table_ids = null,
    security_group_ids = null,
    state = null,
    subnet_ids = null,
    vpc_endpoint_type = 'Gateway'
  }: {
    service_name: string,
    vpc_id: string,
    vpc_endpoint_id?: string|null,
    auto_accept?: boolean|null,
    cidr_blocks?: string[]|null,
    dns_entry?: Anon411[]|null,
    network_interface_ids?: string[]|null,
    policy?: string|null,
    prefix_list_id?: string|null,
    private_dns_enabled?: boolean,
    route_table_ids?: string[]|null,
    security_group_ids?: string[]|null,
    state?: string|null,
    subnet_ids?: string[]|null,
    vpc_endpoint_type?: string
  }) {
    this.service_name = service_name;
    this.vpc_id = vpc_id;
    this.vpc_endpoint_id = vpc_endpoint_id;
    this.auto_accept = auto_accept;
    this.cidr_blocks = cidr_blocks;
    this.dns_entry = dns_entry;
    this.network_interface_ids = network_interface_ids;
    this.policy = policy;
    this.prefix_list_id = prefix_list_id;
    this.private_dns_enabled = private_dns_enabled;
    this.route_table_ids = route_table_ids;
    this.security_group_ids = security_group_ids;
    this.state = state;
    this.subnet_ids = subnet_ids;
    this.vpc_endpoint_type = vpc_endpoint_type;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['service_name'] = this.service_name;
    ih['vpc_id'] = this.vpc_id;
    if (this.vpc_endpoint_id !== null) {
      ih['vpc_endpoint_id'] = this.vpc_endpoint_id;
    }
    if (this.auto_accept !== null) {
      ih['auto_accept'] = this.auto_accept;
    }
    if (this.cidr_blocks !== null) {
      ih['cidr_blocks'] = this.cidr_blocks;
    }
    if (this.dns_entry !== null) {
      ih['dns_entry'] = this.dns_entry;
    }
    if (this.network_interface_ids !== null) {
      ih['network_interface_ids'] = this.network_interface_ids;
    }
    if (this.policy !== null) {
      ih['policy'] = this.policy;
    }
    if (this.prefix_list_id !== null) {
      ih['prefix_list_id'] = this.prefix_list_id;
    }
    if (this.private_dns_enabled !== false) {
      ih['private_dns_enabled'] = this.private_dns_enabled;
    }
    if (this.route_table_ids !== null) {
      ih['route_table_ids'] = this.route_table_ids;
    }
    if (this.security_group_ids !== null) {
      ih['security_group_ids'] = this.security_group_ids;
    }
    if (this.state !== null) {
      ih['state'] = this.state;
    }
    if (this.subnet_ids !== null) {
      ih['subnet_ids'] = this.subnet_ids;
    }
    if (this.vpc_endpoint_type !== 'Gateway') {
      ih['vpc_endpoint_type'] = this.vpc_endpoint_type;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Vpc_endpoint';
  }
}

export class Vpc_endpoint_connection_notification implements PcoreValue {
  readonly connection_events: string[];
  readonly connection_notification_arn: string;
  readonly vpc_endpoint_connection_notification_id: string|null;
  readonly notification_type: string|null;
  readonly state: string|null;
  readonly vpc_endpoint_id: string|null;
  readonly vpc_endpoint_service_id: string|null;

  constructor({
    connection_events,
    connection_notification_arn,
    vpc_endpoint_connection_notification_id = null,
    notification_type = null,
    state = null,
    vpc_endpoint_id = null,
    vpc_endpoint_service_id = null
  }: {
    connection_events: string[],
    connection_notification_arn: string,
    vpc_endpoint_connection_notification_id?: string|null,
    notification_type?: string|null,
    state?: string|null,
    vpc_endpoint_id?: string|null,
    vpc_endpoint_service_id?: string|null
  }) {
    this.connection_events = connection_events;
    this.connection_notification_arn = connection_notification_arn;
    this.vpc_endpoint_connection_notification_id = vpc_endpoint_connection_notification_id;
    this.notification_type = notification_type;
    this.state = state;
    this.vpc_endpoint_id = vpc_endpoint_id;
    this.vpc_endpoint_service_id = vpc_endpoint_service_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['connection_events'] = this.connection_events;
    ih['connection_notification_arn'] = this.connection_notification_arn;
    if (this.vpc_endpoint_connection_notification_id !== null) {
      ih['vpc_endpoint_connection_notification_id'] = this.vpc_endpoint_connection_notification_id;
    }
    if (this.notification_type !== null) {
      ih['notification_type'] = this.notification_type;
    }
    if (this.state !== null) {
      ih['state'] = this.state;
    }
    if (this.vpc_endpoint_id !== null) {
      ih['vpc_endpoint_id'] = this.vpc_endpoint_id;
    }
    if (this.vpc_endpoint_service_id !== null) {
      ih['vpc_endpoint_service_id'] = this.vpc_endpoint_service_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Vpc_endpoint_connection_notification';
  }
}

export class Vpc_endpoint_route_table_association implements PcoreValue {
  readonly route_table_id: string;
  readonly vpc_endpoint_id: string;
  readonly vpc_endpoint_route_table_association_id: string|null;

  constructor({
    route_table_id,
    vpc_endpoint_id,
    vpc_endpoint_route_table_association_id = null
  }: {
    route_table_id: string,
    vpc_endpoint_id: string,
    vpc_endpoint_route_table_association_id?: string|null
  }) {
    this.route_table_id = route_table_id;
    this.vpc_endpoint_id = vpc_endpoint_id;
    this.vpc_endpoint_route_table_association_id = vpc_endpoint_route_table_association_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['route_table_id'] = this.route_table_id;
    ih['vpc_endpoint_id'] = this.vpc_endpoint_id;
    if (this.vpc_endpoint_route_table_association_id !== null) {
      ih['vpc_endpoint_route_table_association_id'] = this.vpc_endpoint_route_table_association_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Vpc_endpoint_route_table_association';
  }
}

export class Vpc_endpoint_service implements PcoreValue {
  readonly acceptance_required: boolean;
  readonly network_load_balancer_arns: string[];
  readonly vpc_endpoint_service_id: string|null;
  readonly allowed_principals: string[]|null;
  readonly availability_zones: string[]|null;
  readonly base_endpoint_dns_names: string[]|null;
  readonly private_dns_name: string|null;
  readonly service_name: string|null;
  readonly service_type: string|null;
  readonly state: string|null;

  constructor({
    acceptance_required,
    network_load_balancer_arns,
    vpc_endpoint_service_id = null,
    allowed_principals = null,
    availability_zones = null,
    base_endpoint_dns_names = null,
    private_dns_name = null,
    service_name = null,
    service_type = null,
    state = null
  }: {
    acceptance_required: boolean,
    network_load_balancer_arns: string[],
    vpc_endpoint_service_id?: string|null,
    allowed_principals?: string[]|null,
    availability_zones?: string[]|null,
    base_endpoint_dns_names?: string[]|null,
    private_dns_name?: string|null,
    service_name?: string|null,
    service_type?: string|null,
    state?: string|null
  }) {
    this.acceptance_required = acceptance_required;
    this.network_load_balancer_arns = network_load_balancer_arns;
    this.vpc_endpoint_service_id = vpc_endpoint_service_id;
    this.allowed_principals = allowed_principals;
    this.availability_zones = availability_zones;
    this.base_endpoint_dns_names = base_endpoint_dns_names;
    this.private_dns_name = private_dns_name;
    this.service_name = service_name;
    this.service_type = service_type;
    this.state = state;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['acceptance_required'] = this.acceptance_required;
    ih['network_load_balancer_arns'] = this.network_load_balancer_arns;
    if (this.vpc_endpoint_service_id !== null) {
      ih['vpc_endpoint_service_id'] = this.vpc_endpoint_service_id;
    }
    if (this.allowed_principals !== null) {
      ih['allowed_principals'] = this.allowed_principals;
    }
    if (this.availability_zones !== null) {
      ih['availability_zones'] = this.availability_zones;
    }
    if (this.base_endpoint_dns_names !== null) {
      ih['base_endpoint_dns_names'] = this.base_endpoint_dns_names;
    }
    if (this.private_dns_name !== null) {
      ih['private_dns_name'] = this.private_dns_name;
    }
    if (this.service_name !== null) {
      ih['service_name'] = this.service_name;
    }
    if (this.service_type !== null) {
      ih['service_type'] = this.service_type;
    }
    if (this.state !== null) {
      ih['state'] = this.state;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Vpc_endpoint_service';
  }
}

export class Vpc_endpoint_service_allowed_principal implements PcoreValue {
  readonly principal_arn: string;
  readonly vpc_endpoint_service_id: string;
  readonly vpc_endpoint_service_allowed_principal_id: string|null;

  constructor({
    principal_arn,
    vpc_endpoint_service_id,
    vpc_endpoint_service_allowed_principal_id = null
  }: {
    principal_arn: string,
    vpc_endpoint_service_id: string,
    vpc_endpoint_service_allowed_principal_id?: string|null
  }) {
    this.principal_arn = principal_arn;
    this.vpc_endpoint_service_id = vpc_endpoint_service_id;
    this.vpc_endpoint_service_allowed_principal_id = vpc_endpoint_service_allowed_principal_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['principal_arn'] = this.principal_arn;
    ih['vpc_endpoint_service_id'] = this.vpc_endpoint_service_id;
    if (this.vpc_endpoint_service_allowed_principal_id !== null) {
      ih['vpc_endpoint_service_allowed_principal_id'] = this.vpc_endpoint_service_allowed_principal_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Vpc_endpoint_service_allowed_principal';
  }
}

export class Vpc_endpoint_subnet_association implements PcoreValue {
  readonly subnet_id: string;
  readonly vpc_endpoint_id: string;
  readonly vpc_endpoint_subnet_association_id: string|null;

  constructor({
    subnet_id,
    vpc_endpoint_id,
    vpc_endpoint_subnet_association_id = null
  }: {
    subnet_id: string,
    vpc_endpoint_id: string,
    vpc_endpoint_subnet_association_id?: string|null
  }) {
    this.subnet_id = subnet_id;
    this.vpc_endpoint_id = vpc_endpoint_id;
    this.vpc_endpoint_subnet_association_id = vpc_endpoint_subnet_association_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['subnet_id'] = this.subnet_id;
    ih['vpc_endpoint_id'] = this.vpc_endpoint_id;
    if (this.vpc_endpoint_subnet_association_id !== null) {
      ih['vpc_endpoint_subnet_association_id'] = this.vpc_endpoint_subnet_association_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Vpc_endpoint_subnet_association';
  }
}

export class Vpc_ipv4_cidr_block_association implements PcoreValue {
  readonly cidr_block: string;
  readonly vpc_id: string;
  readonly vpc_ipv4_cidr_block_association_id: string|null;

  constructor({
    cidr_block,
    vpc_id,
    vpc_ipv4_cidr_block_association_id = null
  }: {
    cidr_block: string,
    vpc_id: string,
    vpc_ipv4_cidr_block_association_id?: string|null
  }) {
    this.cidr_block = cidr_block;
    this.vpc_id = vpc_id;
    this.vpc_ipv4_cidr_block_association_id = vpc_ipv4_cidr_block_association_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['cidr_block'] = this.cidr_block;
    ih['vpc_id'] = this.vpc_id;
    if (this.vpc_ipv4_cidr_block_association_id !== null) {
      ih['vpc_ipv4_cidr_block_association_id'] = this.vpc_ipv4_cidr_block_association_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Vpc_ipv4_cidr_block_association';
  }
}

export class Vpc_peering_connection implements PcoreValue {
  readonly peer_vpc_id: string;
  readonly vpc_id: string;
  readonly vpc_peering_connection_id: string|null;
  readonly accept_status: string|null;
  readonly accepter: Anon412|null;
  readonly auto_accept: boolean|null;
  readonly peer_owner_id: string|null;
  readonly peer_region: string|null;
  readonly requester: Anon412|null;
  readonly tags: {[s: string]: string}|null;

  constructor({
    peer_vpc_id,
    vpc_id,
    vpc_peering_connection_id = null,
    accept_status = null,
    accepter = null,
    auto_accept = null,
    peer_owner_id = null,
    peer_region = null,
    requester = null,
    tags = null
  }: {
    peer_vpc_id: string,
    vpc_id: string,
    vpc_peering_connection_id?: string|null,
    accept_status?: string|null,
    accepter?: Anon412|null,
    auto_accept?: boolean|null,
    peer_owner_id?: string|null,
    peer_region?: string|null,
    requester?: Anon412|null,
    tags?: {[s: string]: string}|null
  }) {
    this.peer_vpc_id = peer_vpc_id;
    this.vpc_id = vpc_id;
    this.vpc_peering_connection_id = vpc_peering_connection_id;
    this.accept_status = accept_status;
    this.accepter = accepter;
    this.auto_accept = auto_accept;
    this.peer_owner_id = peer_owner_id;
    this.peer_region = peer_region;
    this.requester = requester;
    this.tags = tags;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['peer_vpc_id'] = this.peer_vpc_id;
    ih['vpc_id'] = this.vpc_id;
    if (this.vpc_peering_connection_id !== null) {
      ih['vpc_peering_connection_id'] = this.vpc_peering_connection_id;
    }
    if (this.accept_status !== null) {
      ih['accept_status'] = this.accept_status;
    }
    if (this.accepter !== null) {
      ih['accepter'] = this.accepter;
    }
    if (this.auto_accept !== null) {
      ih['auto_accept'] = this.auto_accept;
    }
    if (this.peer_owner_id !== null) {
      ih['peer_owner_id'] = this.peer_owner_id;
    }
    if (this.peer_region !== null) {
      ih['peer_region'] = this.peer_region;
    }
    if (this.requester !== null) {
      ih['requester'] = this.requester;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Vpc_peering_connection';
  }
}

export class Vpc_peering_connection_accepter implements PcoreValue {
  readonly vpc_peering_connection_id: string;
  readonly vpc_peering_connection_accepter_id: string|null;
  readonly accept_status: string|null;
  readonly accepter: Anon412|null;
  readonly auto_accept: boolean|null;
  readonly peer_owner_id: string|null;
  readonly peer_region: string|null;
  readonly peer_vpc_id: string|null;
  readonly requester: Anon412|null;
  readonly tags: {[s: string]: string}|null;
  readonly vpc_id: string|null;

  constructor({
    vpc_peering_connection_id,
    vpc_peering_connection_accepter_id = null,
    accept_status = null,
    accepter = null,
    auto_accept = null,
    peer_owner_id = null,
    peer_region = null,
    peer_vpc_id = null,
    requester = null,
    tags = null,
    vpc_id = null
  }: {
    vpc_peering_connection_id: string,
    vpc_peering_connection_accepter_id?: string|null,
    accept_status?: string|null,
    accepter?: Anon412|null,
    auto_accept?: boolean|null,
    peer_owner_id?: string|null,
    peer_region?: string|null,
    peer_vpc_id?: string|null,
    requester?: Anon412|null,
    tags?: {[s: string]: string}|null,
    vpc_id?: string|null
  }) {
    this.vpc_peering_connection_id = vpc_peering_connection_id;
    this.vpc_peering_connection_accepter_id = vpc_peering_connection_accepter_id;
    this.accept_status = accept_status;
    this.accepter = accepter;
    this.auto_accept = auto_accept;
    this.peer_owner_id = peer_owner_id;
    this.peer_region = peer_region;
    this.peer_vpc_id = peer_vpc_id;
    this.requester = requester;
    this.tags = tags;
    this.vpc_id = vpc_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['vpc_peering_connection_id'] = this.vpc_peering_connection_id;
    if (this.vpc_peering_connection_accepter_id !== null) {
      ih['vpc_peering_connection_accepter_id'] = this.vpc_peering_connection_accepter_id;
    }
    if (this.accept_status !== null) {
      ih['accept_status'] = this.accept_status;
    }
    if (this.accepter !== null) {
      ih['accepter'] = this.accepter;
    }
    if (this.auto_accept !== null) {
      ih['auto_accept'] = this.auto_accept;
    }
    if (this.peer_owner_id !== null) {
      ih['peer_owner_id'] = this.peer_owner_id;
    }
    if (this.peer_region !== null) {
      ih['peer_region'] = this.peer_region;
    }
    if (this.peer_vpc_id !== null) {
      ih['peer_vpc_id'] = this.peer_vpc_id;
    }
    if (this.requester !== null) {
      ih['requester'] = this.requester;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpc_id !== null) {
      ih['vpc_id'] = this.vpc_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Vpc_peering_connection_accepter';
  }
}

export class Vpc_peering_connection_options implements PcoreValue {
  readonly vpc_peering_connection_id: string;
  readonly vpc_peering_connection_options_id: string|null;
  readonly accepter: Anon412|null;
  readonly requester: Anon412|null;

  constructor({
    vpc_peering_connection_id,
    vpc_peering_connection_options_id = null,
    accepter = null,
    requester = null
  }: {
    vpc_peering_connection_id: string,
    vpc_peering_connection_options_id?: string|null,
    accepter?: Anon412|null,
    requester?: Anon412|null
  }) {
    this.vpc_peering_connection_id = vpc_peering_connection_id;
    this.vpc_peering_connection_options_id = vpc_peering_connection_options_id;
    this.accepter = accepter;
    this.requester = requester;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['vpc_peering_connection_id'] = this.vpc_peering_connection_id;
    if (this.vpc_peering_connection_options_id !== null) {
      ih['vpc_peering_connection_options_id'] = this.vpc_peering_connection_options_id;
    }
    if (this.accepter !== null) {
      ih['accepter'] = this.accepter;
    }
    if (this.requester !== null) {
      ih['requester'] = this.requester;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Vpc_peering_connection_options';
  }
}

export class Vpn_connection implements PcoreValue {
  readonly customer_gateway_id: string;
  readonly type: string;
  readonly vpn_connection_id: string|null;
  readonly customer_gateway_configuration: string|null;
  readonly routes: Anon413[]|null;
  readonly static_routes_only: boolean|null;
  readonly tags: {[s: string]: string}|null;
  readonly transit_gateway_id: string|null;
  readonly tunnel1_address: string|null;
  readonly tunnel1_bgp_asn: string|null;
  readonly tunnel1_bgp_holdtime: number|null;
  readonly tunnel1_cgw_inside_address: string|null;
  readonly tunnel1_inside_cidr: string|null;
  readonly tunnel1_preshared_key: string|null;
  readonly tunnel1_vgw_inside_address: string|null;
  readonly tunnel2_address: string|null;
  readonly tunnel2_bgp_asn: string|null;
  readonly tunnel2_bgp_holdtime: number|null;
  readonly tunnel2_cgw_inside_address: string|null;
  readonly tunnel2_inside_cidr: string|null;
  readonly tunnel2_preshared_key: string|null;
  readonly tunnel2_vgw_inside_address: string|null;
  readonly vgw_telemetry: Anon414[]|null;
  readonly vpn_gateway_id: string|null;

  constructor({
    customer_gateway_id,
    type,
    vpn_connection_id = null,
    customer_gateway_configuration = null,
    routes = null,
    static_routes_only = null,
    tags = null,
    transit_gateway_id = null,
    tunnel1_address = null,
    tunnel1_bgp_asn = null,
    tunnel1_bgp_holdtime = null,
    tunnel1_cgw_inside_address = null,
    tunnel1_inside_cidr = null,
    tunnel1_preshared_key = null,
    tunnel1_vgw_inside_address = null,
    tunnel2_address = null,
    tunnel2_bgp_asn = null,
    tunnel2_bgp_holdtime = null,
    tunnel2_cgw_inside_address = null,
    tunnel2_inside_cidr = null,
    tunnel2_preshared_key = null,
    tunnel2_vgw_inside_address = null,
    vgw_telemetry = null,
    vpn_gateway_id = null
  }: {
    customer_gateway_id: string,
    type: string,
    vpn_connection_id?: string|null,
    customer_gateway_configuration?: string|null,
    routes?: Anon413[]|null,
    static_routes_only?: boolean|null,
    tags?: {[s: string]: string}|null,
    transit_gateway_id?: string|null,
    tunnel1_address?: string|null,
    tunnel1_bgp_asn?: string|null,
    tunnel1_bgp_holdtime?: number|null,
    tunnel1_cgw_inside_address?: string|null,
    tunnel1_inside_cidr?: string|null,
    tunnel1_preshared_key?: string|null,
    tunnel1_vgw_inside_address?: string|null,
    tunnel2_address?: string|null,
    tunnel2_bgp_asn?: string|null,
    tunnel2_bgp_holdtime?: number|null,
    tunnel2_cgw_inside_address?: string|null,
    tunnel2_inside_cidr?: string|null,
    tunnel2_preshared_key?: string|null,
    tunnel2_vgw_inside_address?: string|null,
    vgw_telemetry?: Anon414[]|null,
    vpn_gateway_id?: string|null
  }) {
    this.customer_gateway_id = customer_gateway_id;
    this.type = type;
    this.vpn_connection_id = vpn_connection_id;
    this.customer_gateway_configuration = customer_gateway_configuration;
    this.routes = routes;
    this.static_routes_only = static_routes_only;
    this.tags = tags;
    this.transit_gateway_id = transit_gateway_id;
    this.tunnel1_address = tunnel1_address;
    this.tunnel1_bgp_asn = tunnel1_bgp_asn;
    this.tunnel1_bgp_holdtime = tunnel1_bgp_holdtime;
    this.tunnel1_cgw_inside_address = tunnel1_cgw_inside_address;
    this.tunnel1_inside_cidr = tunnel1_inside_cidr;
    this.tunnel1_preshared_key = tunnel1_preshared_key;
    this.tunnel1_vgw_inside_address = tunnel1_vgw_inside_address;
    this.tunnel2_address = tunnel2_address;
    this.tunnel2_bgp_asn = tunnel2_bgp_asn;
    this.tunnel2_bgp_holdtime = tunnel2_bgp_holdtime;
    this.tunnel2_cgw_inside_address = tunnel2_cgw_inside_address;
    this.tunnel2_inside_cidr = tunnel2_inside_cidr;
    this.tunnel2_preshared_key = tunnel2_preshared_key;
    this.tunnel2_vgw_inside_address = tunnel2_vgw_inside_address;
    this.vgw_telemetry = vgw_telemetry;
    this.vpn_gateway_id = vpn_gateway_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['customer_gateway_id'] = this.customer_gateway_id;
    ih['type'] = this.type;
    if (this.vpn_connection_id !== null) {
      ih['vpn_connection_id'] = this.vpn_connection_id;
    }
    if (this.customer_gateway_configuration !== null) {
      ih['customer_gateway_configuration'] = this.customer_gateway_configuration;
    }
    if (this.routes !== null) {
      ih['routes'] = this.routes;
    }
    if (this.static_routes_only !== null) {
      ih['static_routes_only'] = this.static_routes_only;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.transit_gateway_id !== null) {
      ih['transit_gateway_id'] = this.transit_gateway_id;
    }
    if (this.tunnel1_address !== null) {
      ih['tunnel1_address'] = this.tunnel1_address;
    }
    if (this.tunnel1_bgp_asn !== null) {
      ih['tunnel1_bgp_asn'] = this.tunnel1_bgp_asn;
    }
    if (this.tunnel1_bgp_holdtime !== null) {
      ih['tunnel1_bgp_holdtime'] = this.tunnel1_bgp_holdtime;
    }
    if (this.tunnel1_cgw_inside_address !== null) {
      ih['tunnel1_cgw_inside_address'] = this.tunnel1_cgw_inside_address;
    }
    if (this.tunnel1_inside_cidr !== null) {
      ih['tunnel1_inside_cidr'] = this.tunnel1_inside_cidr;
    }
    if (this.tunnel1_preshared_key !== null) {
      ih['tunnel1_preshared_key'] = this.tunnel1_preshared_key;
    }
    if (this.tunnel1_vgw_inside_address !== null) {
      ih['tunnel1_vgw_inside_address'] = this.tunnel1_vgw_inside_address;
    }
    if (this.tunnel2_address !== null) {
      ih['tunnel2_address'] = this.tunnel2_address;
    }
    if (this.tunnel2_bgp_asn !== null) {
      ih['tunnel2_bgp_asn'] = this.tunnel2_bgp_asn;
    }
    if (this.tunnel2_bgp_holdtime !== null) {
      ih['tunnel2_bgp_holdtime'] = this.tunnel2_bgp_holdtime;
    }
    if (this.tunnel2_cgw_inside_address !== null) {
      ih['tunnel2_cgw_inside_address'] = this.tunnel2_cgw_inside_address;
    }
    if (this.tunnel2_inside_cidr !== null) {
      ih['tunnel2_inside_cidr'] = this.tunnel2_inside_cidr;
    }
    if (this.tunnel2_preshared_key !== null) {
      ih['tunnel2_preshared_key'] = this.tunnel2_preshared_key;
    }
    if (this.tunnel2_vgw_inside_address !== null) {
      ih['tunnel2_vgw_inside_address'] = this.tunnel2_vgw_inside_address;
    }
    if (this.vgw_telemetry !== null) {
      ih['vgw_telemetry'] = this.vgw_telemetry;
    }
    if (this.vpn_gateway_id !== null) {
      ih['vpn_gateway_id'] = this.vpn_gateway_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Vpn_connection';
  }
}

export class Vpn_connection_route implements PcoreValue {
  readonly destination_cidr_block: string;
  readonly vpn_connection_id: string;
  readonly vpn_connection_route_id: string|null;

  constructor({
    destination_cidr_block,
    vpn_connection_id,
    vpn_connection_route_id = null
  }: {
    destination_cidr_block: string,
    vpn_connection_id: string,
    vpn_connection_route_id?: string|null
  }) {
    this.destination_cidr_block = destination_cidr_block;
    this.vpn_connection_id = vpn_connection_id;
    this.vpn_connection_route_id = vpn_connection_route_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['destination_cidr_block'] = this.destination_cidr_block;
    ih['vpn_connection_id'] = this.vpn_connection_id;
    if (this.vpn_connection_route_id !== null) {
      ih['vpn_connection_route_id'] = this.vpn_connection_route_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Vpn_connection_route';
  }
}

export class Vpn_gateway implements PcoreValue {
  readonly vpn_gateway_id: string|null;
  readonly amazon_side_asn: string|null;
  readonly availability_zone: string|null;
  readonly tags: {[s: string]: string}|null;
  readonly vpc_id: string|null;

  constructor({
    vpn_gateway_id = null,
    amazon_side_asn = null,
    availability_zone = null,
    tags = null,
    vpc_id = null
  }: {
    vpn_gateway_id?: string|null,
    amazon_side_asn?: string|null,
    availability_zone?: string|null,
    tags?: {[s: string]: string}|null,
    vpc_id?: string|null
  }) {
    this.vpn_gateway_id = vpn_gateway_id;
    this.amazon_side_asn = amazon_side_asn;
    this.availability_zone = availability_zone;
    this.tags = tags;
    this.vpc_id = vpc_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    if (this.vpn_gateway_id !== null) {
      ih['vpn_gateway_id'] = this.vpn_gateway_id;
    }
    if (this.amazon_side_asn !== null) {
      ih['amazon_side_asn'] = this.amazon_side_asn;
    }
    if (this.availability_zone !== null) {
      ih['availability_zone'] = this.availability_zone;
    }
    if (this.tags !== null) {
      ih['tags'] = this.tags;
    }
    if (this.vpc_id !== null) {
      ih['vpc_id'] = this.vpc_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Vpn_gateway';
  }
}

export class Vpn_gateway_attachment implements PcoreValue {
  readonly vpc_id: string;
  readonly vpn_gateway_id: string;
  readonly vpn_gateway_attachment_id: string|null;

  constructor({
    vpc_id,
    vpn_gateway_id,
    vpn_gateway_attachment_id = null
  }: {
    vpc_id: string,
    vpn_gateway_id: string,
    vpn_gateway_attachment_id?: string|null
  }) {
    this.vpc_id = vpc_id;
    this.vpn_gateway_id = vpn_gateway_id;
    this.vpn_gateway_attachment_id = vpn_gateway_attachment_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['vpc_id'] = this.vpc_id;
    ih['vpn_gateway_id'] = this.vpn_gateway_id;
    if (this.vpn_gateway_attachment_id !== null) {
      ih['vpn_gateway_attachment_id'] = this.vpn_gateway_attachment_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Vpn_gateway_attachment';
  }
}

export class Vpn_gateway_route_propagation implements PcoreValue {
  readonly route_table_id: string;
  readonly vpn_gateway_id: string;
  readonly vpn_gateway_route_propagation_id: string|null;

  constructor({
    route_table_id,
    vpn_gateway_id,
    vpn_gateway_route_propagation_id = null
  }: {
    route_table_id: string,
    vpn_gateway_id: string,
    vpn_gateway_route_propagation_id?: string|null
  }) {
    this.route_table_id = route_table_id;
    this.vpn_gateway_id = vpn_gateway_id;
    this.vpn_gateway_route_propagation_id = vpn_gateway_route_propagation_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['route_table_id'] = this.route_table_id;
    ih['vpn_gateway_id'] = this.vpn_gateway_id;
    if (this.vpn_gateway_route_propagation_id !== null) {
      ih['vpn_gateway_route_propagation_id'] = this.vpn_gateway_route_propagation_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Vpn_gateway_route_propagation';
  }
}

export class Waf_byte_match_set implements PcoreValue {
  readonly name: string;
  readonly waf_byte_match_set_id: string|null;
  readonly byte_match_tuples: Anon416[]|null;

  constructor({
    name,
    waf_byte_match_set_id = null,
    byte_match_tuples = null
  }: {
    name: string,
    waf_byte_match_set_id?: string|null,
    byte_match_tuples?: Anon416[]|null
  }) {
    this.name = name;
    this.waf_byte_match_set_id = waf_byte_match_set_id;
    this.byte_match_tuples = byte_match_tuples;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.waf_byte_match_set_id !== null) {
      ih['waf_byte_match_set_id'] = this.waf_byte_match_set_id;
    }
    if (this.byte_match_tuples !== null) {
      ih['byte_match_tuples'] = this.byte_match_tuples;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Waf_byte_match_set';
  }
}

export class Waf_geo_match_set implements PcoreValue {
  readonly name: string;
  readonly waf_geo_match_set_id: string|null;
  readonly geo_match_constraint: Anon417[]|null;

  constructor({
    name,
    waf_geo_match_set_id = null,
    geo_match_constraint = null
  }: {
    name: string,
    waf_geo_match_set_id?: string|null,
    geo_match_constraint?: Anon417[]|null
  }) {
    this.name = name;
    this.waf_geo_match_set_id = waf_geo_match_set_id;
    this.geo_match_constraint = geo_match_constraint;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.waf_geo_match_set_id !== null) {
      ih['waf_geo_match_set_id'] = this.waf_geo_match_set_id;
    }
    if (this.geo_match_constraint !== null) {
      ih['geo_match_constraint'] = this.geo_match_constraint;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Waf_geo_match_set';
  }
}

export class Waf_ipset implements PcoreValue {
  readonly name: string;
  readonly waf_ipset_id: string|null;
  readonly arn: string|null;
  readonly ip_set_descriptors: Anon417[]|null;

  constructor({
    name,
    waf_ipset_id = null,
    arn = null,
    ip_set_descriptors = null
  }: {
    name: string,
    waf_ipset_id?: string|null,
    arn?: string|null,
    ip_set_descriptors?: Anon417[]|null
  }) {
    this.name = name;
    this.waf_ipset_id = waf_ipset_id;
    this.arn = arn;
    this.ip_set_descriptors = ip_set_descriptors;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.waf_ipset_id !== null) {
      ih['waf_ipset_id'] = this.waf_ipset_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.ip_set_descriptors !== null) {
      ih['ip_set_descriptors'] = this.ip_set_descriptors;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Waf_ipset';
  }
}

export class Waf_rate_based_rule implements PcoreValue {
  readonly metric_name: string;
  readonly name: string;
  readonly rate_key: string;
  readonly rate_limit: number;
  readonly waf_rate_based_rule_id: string|null;
  readonly predicates: Anon418[]|null;

  constructor({
    metric_name,
    name,
    rate_key,
    rate_limit,
    waf_rate_based_rule_id = null,
    predicates = null
  }: {
    metric_name: string,
    name: string,
    rate_key: string,
    rate_limit: number,
    waf_rate_based_rule_id?: string|null,
    predicates?: Anon418[]|null
  }) {
    this.metric_name = metric_name;
    this.name = name;
    this.rate_key = rate_key;
    this.rate_limit = rate_limit;
    this.waf_rate_based_rule_id = waf_rate_based_rule_id;
    this.predicates = predicates;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['metric_name'] = this.metric_name;
    ih['name'] = this.name;
    ih['rate_key'] = this.rate_key;
    ih['rate_limit'] = this.rate_limit;
    if (this.waf_rate_based_rule_id !== null) {
      ih['waf_rate_based_rule_id'] = this.waf_rate_based_rule_id;
    }
    if (this.predicates !== null) {
      ih['predicates'] = this.predicates;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Waf_rate_based_rule';
  }
}

export class Waf_regex_match_set implements PcoreValue {
  readonly name: string;
  readonly waf_regex_match_set_id: string|null;
  readonly regex_match_tuple: Anon419[]|null;

  constructor({
    name,
    waf_regex_match_set_id = null,
    regex_match_tuple = null
  }: {
    name: string,
    waf_regex_match_set_id?: string|null,
    regex_match_tuple?: Anon419[]|null
  }) {
    this.name = name;
    this.waf_regex_match_set_id = waf_regex_match_set_id;
    this.regex_match_tuple = regex_match_tuple;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.waf_regex_match_set_id !== null) {
      ih['waf_regex_match_set_id'] = this.waf_regex_match_set_id;
    }
    if (this.regex_match_tuple !== null) {
      ih['regex_match_tuple'] = this.regex_match_tuple;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Waf_regex_match_set';
  }
}

export class Waf_regex_pattern_set implements PcoreValue {
  readonly name: string;
  readonly waf_regex_pattern_set_id: string|null;
  readonly regex_pattern_strings: string[]|null;

  constructor({
    name,
    waf_regex_pattern_set_id = null,
    regex_pattern_strings = null
  }: {
    name: string,
    waf_regex_pattern_set_id?: string|null,
    regex_pattern_strings?: string[]|null
  }) {
    this.name = name;
    this.waf_regex_pattern_set_id = waf_regex_pattern_set_id;
    this.regex_pattern_strings = regex_pattern_strings;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.waf_regex_pattern_set_id !== null) {
      ih['waf_regex_pattern_set_id'] = this.waf_regex_pattern_set_id;
    }
    if (this.regex_pattern_strings !== null) {
      ih['regex_pattern_strings'] = this.regex_pattern_strings;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Waf_regex_pattern_set';
  }
}

export class Waf_rule implements PcoreValue {
  readonly metric_name: string;
  readonly name: string;
  readonly waf_rule_id: string|null;
  readonly predicates: Anon418[]|null;

  constructor({
    metric_name,
    name,
    waf_rule_id = null,
    predicates = null
  }: {
    metric_name: string,
    name: string,
    waf_rule_id?: string|null,
    predicates?: Anon418[]|null
  }) {
    this.metric_name = metric_name;
    this.name = name;
    this.waf_rule_id = waf_rule_id;
    this.predicates = predicates;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['metric_name'] = this.metric_name;
    ih['name'] = this.name;
    if (this.waf_rule_id !== null) {
      ih['waf_rule_id'] = this.waf_rule_id;
    }
    if (this.predicates !== null) {
      ih['predicates'] = this.predicates;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Waf_rule';
  }
}

export class Waf_rule_group implements PcoreValue {
  readonly metric_name: string;
  readonly name: string;
  readonly waf_rule_group_id: string|null;
  readonly activated_rule: Anon420[]|null;

  constructor({
    metric_name,
    name,
    waf_rule_group_id = null,
    activated_rule = null
  }: {
    metric_name: string,
    name: string,
    waf_rule_group_id?: string|null,
    activated_rule?: Anon420[]|null
  }) {
    this.metric_name = metric_name;
    this.name = name;
    this.waf_rule_group_id = waf_rule_group_id;
    this.activated_rule = activated_rule;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['metric_name'] = this.metric_name;
    ih['name'] = this.name;
    if (this.waf_rule_group_id !== null) {
      ih['waf_rule_group_id'] = this.waf_rule_group_id;
    }
    if (this.activated_rule !== null) {
      ih['activated_rule'] = this.activated_rule;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Waf_rule_group';
  }
}

export class Waf_size_constraint_set implements PcoreValue {
  readonly name: string;
  readonly waf_size_constraint_set_id: string|null;
  readonly size_constraints: Anon421[]|null;

  constructor({
    name,
    waf_size_constraint_set_id = null,
    size_constraints = null
  }: {
    name: string,
    waf_size_constraint_set_id?: string|null,
    size_constraints?: Anon421[]|null
  }) {
    this.name = name;
    this.waf_size_constraint_set_id = waf_size_constraint_set_id;
    this.size_constraints = size_constraints;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.waf_size_constraint_set_id !== null) {
      ih['waf_size_constraint_set_id'] = this.waf_size_constraint_set_id;
    }
    if (this.size_constraints !== null) {
      ih['size_constraints'] = this.size_constraints;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Waf_size_constraint_set';
  }
}

export class Waf_sql_injection_match_set implements PcoreValue {
  readonly name: string;
  readonly waf_sql_injection_match_set_id: string|null;
  readonly sql_injection_match_tuples: Anon422[]|null;

  constructor({
    name,
    waf_sql_injection_match_set_id = null,
    sql_injection_match_tuples = null
  }: {
    name: string,
    waf_sql_injection_match_set_id?: string|null,
    sql_injection_match_tuples?: Anon422[]|null
  }) {
    this.name = name;
    this.waf_sql_injection_match_set_id = waf_sql_injection_match_set_id;
    this.sql_injection_match_tuples = sql_injection_match_tuples;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.waf_sql_injection_match_set_id !== null) {
      ih['waf_sql_injection_match_set_id'] = this.waf_sql_injection_match_set_id;
    }
    if (this.sql_injection_match_tuples !== null) {
      ih['sql_injection_match_tuples'] = this.sql_injection_match_tuples;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Waf_sql_injection_match_set';
  }
}

export class Waf_web_acl implements PcoreValue {
  readonly metric_name: string;
  readonly name: string;
  readonly waf_web_acl_id: string|null;
  readonly default_action: Anon316|null;
  readonly rules: Anon423[]|null;

  constructor({
    metric_name,
    name,
    waf_web_acl_id = null,
    default_action = null,
    rules = null
  }: {
    metric_name: string,
    name: string,
    waf_web_acl_id?: string|null,
    default_action?: Anon316|null,
    rules?: Anon423[]|null
  }) {
    this.metric_name = metric_name;
    this.name = name;
    this.waf_web_acl_id = waf_web_acl_id;
    this.default_action = default_action;
    this.rules = rules;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['metric_name'] = this.metric_name;
    ih['name'] = this.name;
    if (this.waf_web_acl_id !== null) {
      ih['waf_web_acl_id'] = this.waf_web_acl_id;
    }
    if (this.default_action !== null) {
      ih['default_action'] = this.default_action;
    }
    if (this.rules !== null) {
      ih['rules'] = this.rules;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Waf_web_acl';
  }
}

export class Waf_xss_match_set implements PcoreValue {
  readonly name: string;
  readonly waf_xss_match_set_id: string|null;
  readonly xss_match_tuples: Anon422[]|null;

  constructor({
    name,
    waf_xss_match_set_id = null,
    xss_match_tuples = null
  }: {
    name: string,
    waf_xss_match_set_id?: string|null,
    xss_match_tuples?: Anon422[]|null
  }) {
    this.name = name;
    this.waf_xss_match_set_id = waf_xss_match_set_id;
    this.xss_match_tuples = xss_match_tuples;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.waf_xss_match_set_id !== null) {
      ih['waf_xss_match_set_id'] = this.waf_xss_match_set_id;
    }
    if (this.xss_match_tuples !== null) {
      ih['xss_match_tuples'] = this.xss_match_tuples;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Waf_xss_match_set';
  }
}

export class Wafregional_byte_match_set implements PcoreValue {
  readonly name: string;
  readonly wafregional_byte_match_set_id: string|null;
  readonly byte_match_tuples: Anon416[]|null;

  constructor({
    name,
    wafregional_byte_match_set_id = null,
    byte_match_tuples = null
  }: {
    name: string,
    wafregional_byte_match_set_id?: string|null,
    byte_match_tuples?: Anon416[]|null
  }) {
    this.name = name;
    this.wafregional_byte_match_set_id = wafregional_byte_match_set_id;
    this.byte_match_tuples = byte_match_tuples;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.wafregional_byte_match_set_id !== null) {
      ih['wafregional_byte_match_set_id'] = this.wafregional_byte_match_set_id;
    }
    if (this.byte_match_tuples !== null) {
      ih['byte_match_tuples'] = this.byte_match_tuples;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Wafregional_byte_match_set';
  }
}

export class Wafregional_geo_match_set implements PcoreValue {
  readonly name: string;
  readonly wafregional_geo_match_set_id: string|null;
  readonly geo_match_constraint: Anon417[]|null;

  constructor({
    name,
    wafregional_geo_match_set_id = null,
    geo_match_constraint = null
  }: {
    name: string,
    wafregional_geo_match_set_id?: string|null,
    geo_match_constraint?: Anon417[]|null
  }) {
    this.name = name;
    this.wafregional_geo_match_set_id = wafregional_geo_match_set_id;
    this.geo_match_constraint = geo_match_constraint;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.wafregional_geo_match_set_id !== null) {
      ih['wafregional_geo_match_set_id'] = this.wafregional_geo_match_set_id;
    }
    if (this.geo_match_constraint !== null) {
      ih['geo_match_constraint'] = this.geo_match_constraint;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Wafregional_geo_match_set';
  }
}

export class Wafregional_ipset implements PcoreValue {
  readonly name: string;
  readonly wafregional_ipset_id: string|null;
  readonly arn: string|null;
  readonly ip_set_descriptor: Anon417[]|null;

  constructor({
    name,
    wafregional_ipset_id = null,
    arn = null,
    ip_set_descriptor = null
  }: {
    name: string,
    wafregional_ipset_id?: string|null,
    arn?: string|null,
    ip_set_descriptor?: Anon417[]|null
  }) {
    this.name = name;
    this.wafregional_ipset_id = wafregional_ipset_id;
    this.arn = arn;
    this.ip_set_descriptor = ip_set_descriptor;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.wafregional_ipset_id !== null) {
      ih['wafregional_ipset_id'] = this.wafregional_ipset_id;
    }
    if (this.arn !== null) {
      ih['arn'] = this.arn;
    }
    if (this.ip_set_descriptor !== null) {
      ih['ip_set_descriptor'] = this.ip_set_descriptor;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Wafregional_ipset';
  }
}

export class Wafregional_rate_based_rule implements PcoreValue {
  readonly metric_name: string;
  readonly name: string;
  readonly rate_key: string;
  readonly rate_limit: number;
  readonly wafregional_rate_based_rule_id: string|null;
  readonly predicate: Anon418[]|null;

  constructor({
    metric_name,
    name,
    rate_key,
    rate_limit,
    wafregional_rate_based_rule_id = null,
    predicate = null
  }: {
    metric_name: string,
    name: string,
    rate_key: string,
    rate_limit: number,
    wafregional_rate_based_rule_id?: string|null,
    predicate?: Anon418[]|null
  }) {
    this.metric_name = metric_name;
    this.name = name;
    this.rate_key = rate_key;
    this.rate_limit = rate_limit;
    this.wafregional_rate_based_rule_id = wafregional_rate_based_rule_id;
    this.predicate = predicate;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['metric_name'] = this.metric_name;
    ih['name'] = this.name;
    ih['rate_key'] = this.rate_key;
    ih['rate_limit'] = this.rate_limit;
    if (this.wafregional_rate_based_rule_id !== null) {
      ih['wafregional_rate_based_rule_id'] = this.wafregional_rate_based_rule_id;
    }
    if (this.predicate !== null) {
      ih['predicate'] = this.predicate;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Wafregional_rate_based_rule';
  }
}

export class Wafregional_regex_match_set implements PcoreValue {
  readonly name: string;
  readonly wafregional_regex_match_set_id: string|null;
  readonly regex_match_tuple: Anon419[]|null;

  constructor({
    name,
    wafregional_regex_match_set_id = null,
    regex_match_tuple = null
  }: {
    name: string,
    wafregional_regex_match_set_id?: string|null,
    regex_match_tuple?: Anon419[]|null
  }) {
    this.name = name;
    this.wafregional_regex_match_set_id = wafregional_regex_match_set_id;
    this.regex_match_tuple = regex_match_tuple;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.wafregional_regex_match_set_id !== null) {
      ih['wafregional_regex_match_set_id'] = this.wafregional_regex_match_set_id;
    }
    if (this.regex_match_tuple !== null) {
      ih['regex_match_tuple'] = this.regex_match_tuple;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Wafregional_regex_match_set';
  }
}

export class Wafregional_regex_pattern_set implements PcoreValue {
  readonly name: string;
  readonly wafregional_regex_pattern_set_id: string|null;
  readonly regex_pattern_strings: string[]|null;

  constructor({
    name,
    wafregional_regex_pattern_set_id = null,
    regex_pattern_strings = null
  }: {
    name: string,
    wafregional_regex_pattern_set_id?: string|null,
    regex_pattern_strings?: string[]|null
  }) {
    this.name = name;
    this.wafregional_regex_pattern_set_id = wafregional_regex_pattern_set_id;
    this.regex_pattern_strings = regex_pattern_strings;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.wafregional_regex_pattern_set_id !== null) {
      ih['wafregional_regex_pattern_set_id'] = this.wafregional_regex_pattern_set_id;
    }
    if (this.regex_pattern_strings !== null) {
      ih['regex_pattern_strings'] = this.regex_pattern_strings;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Wafregional_regex_pattern_set';
  }
}

export class Wafregional_rule implements PcoreValue {
  readonly metric_name: string;
  readonly name: string;
  readonly wafregional_rule_id: string|null;
  readonly predicate: Anon418[]|null;

  constructor({
    metric_name,
    name,
    wafregional_rule_id = null,
    predicate = null
  }: {
    metric_name: string,
    name: string,
    wafregional_rule_id?: string|null,
    predicate?: Anon418[]|null
  }) {
    this.metric_name = metric_name;
    this.name = name;
    this.wafregional_rule_id = wafregional_rule_id;
    this.predicate = predicate;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['metric_name'] = this.metric_name;
    ih['name'] = this.name;
    if (this.wafregional_rule_id !== null) {
      ih['wafregional_rule_id'] = this.wafregional_rule_id;
    }
    if (this.predicate !== null) {
      ih['predicate'] = this.predicate;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Wafregional_rule';
  }
}

export class Wafregional_rule_group implements PcoreValue {
  readonly metric_name: string;
  readonly name: string;
  readonly wafregional_rule_group_id: string|null;
  readonly activated_rule: Anon420[]|null;

  constructor({
    metric_name,
    name,
    wafregional_rule_group_id = null,
    activated_rule = null
  }: {
    metric_name: string,
    name: string,
    wafregional_rule_group_id?: string|null,
    activated_rule?: Anon420[]|null
  }) {
    this.metric_name = metric_name;
    this.name = name;
    this.wafregional_rule_group_id = wafregional_rule_group_id;
    this.activated_rule = activated_rule;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['metric_name'] = this.metric_name;
    ih['name'] = this.name;
    if (this.wafregional_rule_group_id !== null) {
      ih['wafregional_rule_group_id'] = this.wafregional_rule_group_id;
    }
    if (this.activated_rule !== null) {
      ih['activated_rule'] = this.activated_rule;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Wafregional_rule_group';
  }
}

export class Wafregional_size_constraint_set implements PcoreValue {
  readonly name: string;
  readonly wafregional_size_constraint_set_id: string|null;
  readonly size_constraints: Anon421[]|null;

  constructor({
    name,
    wafregional_size_constraint_set_id = null,
    size_constraints = null
  }: {
    name: string,
    wafregional_size_constraint_set_id?: string|null,
    size_constraints?: Anon421[]|null
  }) {
    this.name = name;
    this.wafregional_size_constraint_set_id = wafregional_size_constraint_set_id;
    this.size_constraints = size_constraints;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.wafregional_size_constraint_set_id !== null) {
      ih['wafregional_size_constraint_set_id'] = this.wafregional_size_constraint_set_id;
    }
    if (this.size_constraints !== null) {
      ih['size_constraints'] = this.size_constraints;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Wafregional_size_constraint_set';
  }
}

export class Wafregional_sql_injection_match_set implements PcoreValue {
  readonly name: string;
  readonly wafregional_sql_injection_match_set_id: string|null;
  readonly sql_injection_match_tuple: Anon422[]|null;

  constructor({
    name,
    wafregional_sql_injection_match_set_id = null,
    sql_injection_match_tuple = null
  }: {
    name: string,
    wafregional_sql_injection_match_set_id?: string|null,
    sql_injection_match_tuple?: Anon422[]|null
  }) {
    this.name = name;
    this.wafregional_sql_injection_match_set_id = wafregional_sql_injection_match_set_id;
    this.sql_injection_match_tuple = sql_injection_match_tuple;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.wafregional_sql_injection_match_set_id !== null) {
      ih['wafregional_sql_injection_match_set_id'] = this.wafregional_sql_injection_match_set_id;
    }
    if (this.sql_injection_match_tuple !== null) {
      ih['sql_injection_match_tuple'] = this.sql_injection_match_tuple;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Wafregional_sql_injection_match_set';
  }
}

export class Wafregional_web_acl implements PcoreValue {
  readonly metric_name: string;
  readonly name: string;
  readonly wafregional_web_acl_id: string|null;
  readonly default_action: Anon316|null;
  readonly rule: Anon423[]|null;

  constructor({
    metric_name,
    name,
    wafregional_web_acl_id = null,
    default_action = null,
    rule = null
  }: {
    metric_name: string,
    name: string,
    wafregional_web_acl_id?: string|null,
    default_action?: Anon316|null,
    rule?: Anon423[]|null
  }) {
    this.metric_name = metric_name;
    this.name = name;
    this.wafregional_web_acl_id = wafregional_web_acl_id;
    this.default_action = default_action;
    this.rule = rule;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['metric_name'] = this.metric_name;
    ih['name'] = this.name;
    if (this.wafregional_web_acl_id !== null) {
      ih['wafregional_web_acl_id'] = this.wafregional_web_acl_id;
    }
    if (this.default_action !== null) {
      ih['default_action'] = this.default_action;
    }
    if (this.rule !== null) {
      ih['rule'] = this.rule;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Wafregional_web_acl';
  }
}

export class Wafregional_web_acl_association implements PcoreValue {
  readonly resource_arn: string;
  readonly web_acl_id: string;
  readonly wafregional_web_acl_association_id: string|null;

  constructor({
    resource_arn,
    web_acl_id,
    wafregional_web_acl_association_id = null
  }: {
    resource_arn: string,
    web_acl_id: string,
    wafregional_web_acl_association_id?: string|null
  }) {
    this.resource_arn = resource_arn;
    this.web_acl_id = web_acl_id;
    this.wafregional_web_acl_association_id = wafregional_web_acl_association_id;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['resource_arn'] = this.resource_arn;
    ih['web_acl_id'] = this.web_acl_id;
    if (this.wafregional_web_acl_association_id !== null) {
      ih['wafregional_web_acl_association_id'] = this.wafregional_web_acl_association_id;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Wafregional_web_acl_association';
  }
}

export class Wafregional_xss_match_set implements PcoreValue {
  readonly name: string;
  readonly wafregional_xss_match_set_id: string|null;
  readonly xss_match_tuple: Anon422[]|null;

  constructor({
    name,
    wafregional_xss_match_set_id = null,
    xss_match_tuple = null
  }: {
    name: string,
    wafregional_xss_match_set_id?: string|null,
    xss_match_tuple?: Anon422[]|null
  }) {
    this.name = name;
    this.wafregional_xss_match_set_id = wafregional_xss_match_set_id;
    this.xss_match_tuple = xss_match_tuple;
  }

  __pvalue(): {[s: string]: Value} {
    const ih: {[s: string]: Value} = {};
    ih['name'] = this.name;
    if (this.wafregional_xss_match_set_id !== null) {
      ih['wafregional_xss_match_set_id'] = this.wafregional_xss_match_set_id;
    }
    if (this.xss_match_tuple !== null) {
      ih['xss_match_tuple'] = this.xss_match_tuple;
    }
    return ih;
  }

  __ptype(): string {
    return 'Aws::Wafregional_xss_match_set';
  }
}

interface Anon0 {
  domain_name?: string|null,
  resource_record_name?: string|null,
  resource_record_type?: string|null,
  resource_record_value?: string|null
}
interface Anon1 {
  common_name?: string|null,
  country?: string|null,
  distinguished_name_qualifier?: string|null,
  generation_qualifier?: string|null,
  given_name?: string|null,
  initials?: string|null,
  locality?: string|null,
  organization?: string|null,
  organizational_unit?: string|null,
  pseudonym?: string|null,
  state?: string|null,
  surname?: string|null,
  title?: string|null
}
interface Anon2 {
  key_algorithm: string,
  signing_algorithm: string,
  subject?: Anon1|null
}
interface Anon3 {
  expiration_in_days: number,
  custom_cname?: string|null,
  enabled?: boolean|null,
  s3_bucket_name?: string|null
}
interface Anon4 {
  crl_configuration?: Anon3|null
}
interface Anon5 {
  bucket: string,
  enabled?: boolean|null,
  prefix?: string|null
}
interface Anon6 {
  subnet_id: string,
  allocation_id?: string|null
}
interface Anon7 {
  user_pool_arn: string,
  user_pool_client_id: string,
  user_pool_domain: string,
  authentication_request_extra_params?: {[s: string]: string}|null,
  on_unauthenticated_request?: string|null,
  scope?: string|null,
  session_cookie_name?: string|null,
  session_timeout?: number|null
}
interface Anon8 {
  authorization_endpoint: string,
  client_id: string,
  client_secret: string,
  issuer: string,
  token_endpoint: string,
  user_info_endpoint: string,
  authentication_request_extra_params?: {[s: string]: string}|null,
  on_unauthenticated_request?: string|null,
  scope?: string|null,
  session_cookie_name?: string|null,
  session_timeout?: number|null
}
interface Anon9 {
  content_type: string,
  message_body?: string|null,
  status_code?: string|null
}
interface Anon10 {
  status_code: string,
  host?: string,
  path?: string,
  port?: string,
  protocol?: string,
  query?: string
}
interface Anon11 {
  type: string,
  authenticate_cognito?: Anon7|null,
  authenticate_oidc?: Anon8|null,
  fixed_response?: Anon9|null,
  order?: number|null,
  redirect?: Anon10|null,
  target_group_arn?: string|null
}
interface Anon12 {
  field?: string|null,
  values?: string[]|null
}
interface Anon13 {
  healthy_threshold?: number,
  interval?: number,
  matcher?: string|null,
  path?: string|null,
  port?: string,
  protocol?: string,
  timeout?: number|null,
  unhealthy_threshold?: number
}
interface Anon14 {
  type: string,
  cookie_duration?: number,
  enabled?: boolean
}
interface Anon15 {
  device_name: string,
  delete_on_termination?: boolean,
  encrypted?: boolean|null,
  iops?: number|null,
  snapshot_id?: string|null,
  volume_size?: number|null,
  volume_type?: string
}
interface Anon16 {
  device_name: string,
  virtual_name: string
}
interface Anon17 {
  delete_on_termination?: boolean|null,
  device_name?: string|null,
  encrypted?: boolean|null,
  iops?: number|null,
  snapshot_id?: string|null,
  volume_size?: number|null,
  volume_type?: string|null
}
interface Anon18 {
  device_name?: string|null,
  virtual_name?: string|null
}
interface Anon19 {
  burst_limit?: number|null,
  rate_limit?: number|null
}
interface Anon20 {
  type: string,
  method?: string|null,
  name?: string|null,
  path?: string|null,
  status_code?: string|null
}
interface Anon21 {
  types: string[]
}
interface Anon22 {
  cache_data_encrypted?: boolean|null,
  cache_ttl_in_seconds?: number|null,
  caching_enabled?: boolean|null,
  data_trace_enabled?: boolean|null,
  logging_level?: string|null,
  metrics_enabled?: boolean|null,
  require_authorization_for_cache_control?: boolean|null,
  throttling_burst_limit?: number|null,
  throttling_rate_limit?: number|null,
  unauthorized_cache_control_header_strategy?: string|null
}
interface Anon23 {
  destination_arn: string,
  format: string
}
interface Anon24 {
  api_id: string,
  stage: string
}
interface Anon25 {
  limit: number,
  period: string,
  offset?: number
}
interface Anon26 {
  burst_limit?: number,
  rate_limit?: number
}
interface Anon27 {
  scaling_adjustment: number,
  metric_interval_lower_bound?: string|null,
  metric_interval_upper_bound?: string|null
}
interface Anon28 {
  adjustment_type?: string|null,
  cooldown?: number|null,
  metric_aggregation_type?: string|null,
  min_adjustment_magnitude?: number|null,
  step_adjustment?: Anon27[]|null
}
interface Anon29 {
  name: string,
  value: string
}
interface Anon30 {
  metric_name: string,
  namespace: string,
  statistic: string,
  dimensions?: Anon29[]|null,
  unit?: string|null
}
interface Anon31 {
  predefined_metric_type: string,
  resource_label?: string|null
}
interface Anon32 {
  target_value: number,
  customized_metric_specification?: Anon30|null,
  disable_scale_in?: boolean,
  predefined_metric_specification?: Anon31|null,
  scale_in_cooldown?: number|null,
  scale_out_cooldown?: number|null
}
interface Anon33 {
  max_capacity?: number|null,
  min_capacity?: number|null
}
interface Anon34 {
  virtual_node: string,
  weight: number
}
interface Anon35 {
  weighted_target: Anon34[]
}
interface Anon36 {
  prefix: string
}
interface Anon37 {
  action: Anon35,
  match: Anon36
}
interface Anon38 {
  http_route?: Anon37|null
}
interface Anon39 {
  port: number,
  protocol: string
}
interface Anon40 {
  port_mapping: Anon39
}
interface Anon41 {
  service_name: string
}
interface Anon42 {
  dns: Anon41
}
interface Anon43 {
  backends?: string[]|null,
  listener?: Anon40|null,
  service_discovery?: Anon42|null
}
interface Anon44 {
  service_names: string[]
}
interface Anon45 {
  table_name: string,
  region?: string|null,
  use_caller_credentials?: boolean|null
}
interface Anon46 {
  endpoint: string,
  region?: string|null
}
interface Anon47 {
  endpoint: string
}
interface Anon48 {
  function_arn: string
}
interface Anon49 {
  cloudwatch_logs_role_arn: string,
  field_log_level: string
}
interface Anon50 {
  issuer: string,
  auth_ttl?: number|null,
  client_id?: string|null,
  iat_ttl?: number|null
}
interface Anon51 {
  default_action: string,
  user_pool_id: string,
  app_id_client_regex?: string|null,
  aws_region?: string|null
}
interface Anon52 {
  encryption_option: string,
  kms_key?: string|null
}
interface Anon53 {
  lifecycle_transition: string,
  name: string,
  default_result?: string|null,
  heartbeat_timeout?: number|null,
  notification_metadata?: string|null,
  notification_target_arn?: string|null,
  role_arn?: string|null
}
interface Anon54 {
  id?: string|null,
  name?: string|null,
  version?: string|null
}
interface Anon55 {
  launch_template_id?: string|null,
  launch_template_name?: string|null,
  version?: string
}
interface Anon56 {
  instance_type?: string|null
}
interface Anon57 {
  launch_template_specification: Anon55,
  override?: Anon56[]|null
}
interface Anon58 {
  on_demand_allocation_strategy?: string,
  on_demand_base_capacity?: number|null,
  on_demand_percentage_above_base_capacity?: number,
  spot_allocation_strategy?: string,
  spot_instance_pools?: number|null,
  spot_max_price?: string|null
}
interface Anon59 {
  launch_template: Anon57,
  instances_distribution?: Anon58|null
}
interface Anon60 {
  key: string,
  propagate_at_launch: boolean,
  value: string
}
interface Anon61 {
  metric_name: string,
  namespace: string,
  statistic: string,
  metric_dimension?: Anon29[]|null,
  unit?: string|null
}
interface Anon62 {
  target_value: number,
  customized_metric_specification?: Anon61|null,
  disable_scale_in?: boolean,
  predefined_metric_specification?: Anon31|null
}
interface Anon63 {
  instance_role: string,
  instance_type: string[],
  max_vcpus: number,
  min_vcpus: number,
  security_group_ids: string[],
  subnets: string[],
  type: string,
  bid_percentage?: number|null,
  desired_vcpus?: number|null,
  ec2_key_pair?: string|null,
  image_id?: string|null,
  spot_iam_fleet_role?: string|null,
  tags?: {[s: string]: string}|null
}
interface Anon64 {
  attempts?: number|null
}
interface Anon65 {
  attempt_duration_seconds?: number|null
}
interface Anon66 {
  include_credit?: boolean,
  include_discount?: boolean,
  include_other_subscription?: boolean,
  include_recurring?: boolean,
  include_refund?: boolean,
  include_subscription?: boolean,
  include_support?: boolean,
  include_tax?: boolean,
  include_upfront?: boolean,
  use_amortized?: boolean,
  use_blended?: boolean
}
interface Anon67 {
  http_port: number,
  https_port: number,
  origin_protocol_policy: string,
  origin_ssl_protocols: string[],
  origin_keepalive_timeout?: number,
  origin_read_timeout?: number
}
interface Anon68 {
  origin_access_identity: string
}
interface Anon69 {
  domain_name: string,
  origin_id: string,
  custom_header?: Anon29[]|null,
  custom_origin_config?: Anon67|null,
  origin_path?: string|null,
  s3_origin_config?: Anon68|null
}
interface Anon70 {
  error_code: number,
  error_caching_min_ttl?: number|null,
  response_code?: number|null,
  response_page_path?: string|null
}
interface Anon71 {
  forward: string,
  whitelisted_names?: string[]|null
}
interface Anon72 {
  query_string: boolean,
  cookies?: Anon71|null,
  headers?: string[]|null,
  query_string_cache_keys?: string[]|null
}
interface Anon73 {
  event_type: string,
  lambda_arn: string,
  include_body?: boolean
}
interface Anon74 {
  allowed_methods: string[],
  cached_methods: string[],
  target_origin_id: string,
  viewer_protocol_policy: string,
  compress?: boolean,
  default_ttl?: number,
  field_level_encryption_id?: string|null,
  forwarded_values?: Anon72|null,
  lambda_function_association?: Anon73[]|null,
  max_ttl?: number,
  min_ttl?: number,
  smooth_streaming?: boolean|null,
  trusted_signers?: string[]|null
}
interface Anon75 {
  bucket: string,
  include_cookies?: boolean,
  prefix?: string
}
interface Anon76 {
  allowed_methods: string[],
  cached_methods: string[],
  path_pattern: string,
  target_origin_id: string,
  viewer_protocol_policy: string,
  compress?: boolean,
  default_ttl?: number,
  field_level_encryption_id?: string|null,
  forwarded_values?: Anon72|null,
  lambda_function_association?: Anon73[]|null,
  max_ttl?: number,
  min_ttl?: number,
  smooth_streaming?: boolean|null,
  trusted_signers?: string[]|null
}
interface Anon77 {
  restriction_type: string,
  locations?: string[]|null
}
interface Anon78 {
  geo_restriction?: Anon77|null
}
interface Anon79 {
  acm_certificate_arn?: string|null,
  cloudfront_default_certificate?: boolean|null,
  iam_certificate_id?: string|null,
  minimum_protocol_version?: string,
  ssl_support_method?: string|null
}
interface Anon80 {
  aws_hardware_certificate?: string|null,
  cluster_certificate?: string|null,
  cluster_csr?: string|null,
  hsm_certificate?: string|null,
  manufacturer_hardware_certificate?: string|null
}
interface Anon81 {
  type: string,
  values: string[]
}
interface Anon82 {
  data_resource?: Anon81[]|null,
  include_management_events?: boolean,
  read_write_type?: string
}
interface Anon83 {
  key: string,
  type: string,
  value: string
}
interface Anon84 {
  job_definition: string,
  job_name: string,
  array_size?: number|null,
  job_attempts?: number|null
}
interface Anon85 {
  subnets: string[],
  assign_public_ip?: boolean,
  security_groups?: string[]|null
}
interface Anon86 {
  task_definition_arn: string,
  group?: string|null,
  launch_type?: string,
  network_configuration?: Anon85|null,
  platform_version?: string|null,
  task_count?: number|null
}
interface Anon87 {
  input_template: string,
  input_paths?: {[s: string]: string}|null
}
interface Anon88 {
  partition_key_path?: string|null
}
interface Anon89 {
  key: string,
  values: string[]
}
interface Anon90 {
  message_group_id?: string|null
}
interface Anon91 {
  name: string,
  namespace: string,
  value: string,
  default_value?: string|null
}
interface Anon92 {
  type: string,
  encryption_disabled?: boolean,
  location?: string|null,
  name?: string|null,
  namespace_type?: string|null,
  packaging?: string|null,
  path?: string|null
}
interface Anon93 {
  location?: string|null,
  type?: string
}
interface Anon94 {
  name: string,
  value: string,
  type?: string
}
interface Anon95 {
  compute_type: string,
  image: string,
  type: string,
  certificate?: string|null,
  environment_variable?: Anon94[]|null,
  privileged_mode?: boolean
}
interface Anon96 {
  artifact_identifier: string,
  type: string,
  encryption_disabled?: boolean,
  location?: string|null,
  name?: string|null,
  namespace_type?: string|null,
  packaging?: string|null,
  path?: string|null
}
interface Anon97 {
  type: string,
  resource?: string|null
}
interface Anon98 {
  source_identifier: string,
  type: string,
  auth?: Anon97[]|null,
  buildspec?: string|null,
  git_clone_depth?: number|null,
  insecure_ssl?: boolean|null,
  location?: string|null,
  report_build_status?: boolean|null
}
interface Anon99 {
  type: string,
  auth?: Anon97[]|null,
  buildspec?: string|null,
  git_clone_depth?: number|null,
  insecure_ssl?: boolean|null,
  location?: string|null,
  report_build_status?: boolean|null
}
interface Anon100 {
  security_group_ids: string[],
  subnets: string[],
  vpc_id: string
}
interface Anon101 {
  destination_arn: string,
  events: string[],
  name: string,
  branches?: string[]|null,
  custom_data?: string|null
}
interface Anon102 {
  type?: string|null,
  value?: number|null
}
interface Anon103 {
  interval?: number|null,
  percentage?: number|null
}
interface Anon104 {
  time_based_canary?: Anon103|null,
  time_based_linear?: Anon103|null,
  type?: string
}
interface Anon105 {
  alarms?: string[]|null,
  enabled?: boolean|null,
  ignore_poll_alarm_failure?: boolean
}
interface Anon106 {
  enabled?: boolean|null,
  events?: string[]|null
}
interface Anon107 {
  action_on_timeout?: string|null,
  wait_time_in_minutes?: number|null
}
interface Anon108 {
  action?: string|null
}
interface Anon109 {
  action?: string|null,
  termination_wait_time_in_minutes?: number|null
}
interface Anon110 {
  deployment_ready_option?: Anon107|null,
  green_fleet_provisioning_option?: Anon108|null,
  terminate_blue_instances_on_deployment_success?: Anon109|null
}
interface Anon111 {
  deployment_option?: string|null,
  deployment_type?: string|null
}
interface Anon112 {
  key?: string|null,
  type?: string|null,
  value?: string|null
}
interface Anon113 {
  ec2_tag_filter?: Anon112[]|null
}
interface Anon114 {
  cluster_name: string,
  service_name: string
}
interface Anon115 {
  name?: string|null
}
interface Anon116 {
  listener_arns: string[]
}
interface Anon117 {
  name: string
}
interface Anon118 {
  prod_traffic_route: Anon116,
  target_group: Anon117[],
  test_traffic_route?: Anon116|null
}
interface Anon119 {
  elb_info?: Anon115[]|null,
  target_group_info?: Anon115[]|null,
  target_group_pair_info?: Anon118|null
}
interface Anon120 {
  trigger_events: string[],
  trigger_name: string,
  trigger_target_arn: string
}
interface Anon121 {
  category: string,
  name: string,
  owner: string,
  provider: string,
  version: string,
  configuration?: {[s: string]: string}|null,
  input_artifacts?: string[]|null,
  output_artifacts?: string[]|null,
  role_arn?: string|null,
  run_order?: number|null
}
interface Anon122 {
  action: Anon121[],
  name: string
}
interface Anon123 {
  id: string,
  type: string
}
interface Anon124 {
  location: string,
  type: string,
  encryption_key?: Anon123|null
}
interface Anon125 {
  json_path: string,
  match_equals: string
}
interface Anon126 {
  allowed_ip_range?: string|null,
  secret_token?: string|null
}
interface Anon127 {
  client_id?: string|null,
  provider_name?: string|null,
  server_side_token_check?: boolean
}
interface Anon128 {
  authenticated?: string|null,
  unauthenticated?: string|null
}
interface Anon129 {
  claim: string,
  match_type: string,
  role_arn: string,
  value: string
}
interface Anon130 {
  identity_provider: string,
  type: string,
  ambiguous_role_resolution?: string|null,
  mapping_rule?: Anon129[]|null
}
interface Anon131 {
  scope_description: string,
  scope_name: string
}
interface Anon132 {
  email_message?: string|null,
  email_subject?: string|null,
  sms_message?: string|null
}
interface Anon133 {
  allow_admin_create_user_only?: boolean|null,
  invite_message_template?: Anon132|null,
  unused_account_validity_days?: number
}
interface Anon134 {
  challenge_required_on_new_device?: boolean|null,
  device_only_remembered_on_user_prompt?: boolean|null
}
interface Anon135 {
  reply_to_email_address?: string|null,
  source_arn?: string|null
}
interface Anon136 {
  create_auth_challenge?: string|null,
  custom_message?: string|null,
  define_auth_challenge?: string|null,
  post_authentication?: string|null,
  post_confirmation?: string|null,
  pre_authentication?: string|null,
  pre_sign_up?: string|null,
  pre_token_generation?: string|null,
  user_migration?: string|null,
  verify_auth_challenge_response?: string|null
}
interface Anon137 {
  minimum_length?: number|null,
  require_lowercase?: boolean|null,
  require_numbers?: boolean|null,
  require_symbols?: boolean|null,
  require_uppercase?: boolean|null
}
interface Anon138 {
  max_value?: string|null,
  min_value?: string|null
}
interface Anon139 {
  max_length?: string|null,
  min_length?: string|null
}
interface Anon140 {
  attribute_data_type: string,
  name: string,
  developer_only_attribute?: boolean|null,
  mutable?: boolean|null,
  number_attribute_constraints?: Anon138|null,
  required?: boolean|null,
  string_attribute_constraints?: Anon139|null
}
interface Anon141 {
  external_id: string,
  sns_caller_arn: string
}
interface Anon142 {
  default_email_option?: string,
  email_message?: string|null,
  email_message_by_link?: string|null,
  email_subject?: string|null,
  email_subject_by_link?: string|null,
  sms_message?: string|null
}
interface Anon143 {
  compliance_resource_id?: string|null,
  compliance_resource_types?: string[]|null,
  tag_key?: string|null,
  tag_value?: string|null
}
interface Anon144 {
  event_source?: string,
  maximum_execution_frequency?: string|null,
  message_type?: string|null
}
interface Anon145 {
  owner: string,
  source_identifier: string,
  source_detail?: Anon144[]|null
}
interface Anon146 {
  account_ids: string[],
  all_regions?: boolean,
  regions?: string[]|null
}
interface Anon147 {
  role_arn: string,
  all_regions?: boolean,
  regions?: string[]|null
}
interface Anon148 {
  all_supported?: boolean,
  include_global_resource_types?: boolean|null,
  resource_types?: string[]|null
}
interface Anon149 {
  delivery_frequency?: string|null
}
interface Anon150 {
  security_group_arns: string[],
  subnet_arn: string
}
interface Anon151 {
  agent_arns: string[]
}
interface Anon152 {
  bucket_access_role_arn: string
}
interface Anon153 {
  atime?: string,
  bytes_per_second?: number,
  gid?: string,
  mtime?: string,
  posix_permissions?: string,
  preserve_deleted_files?: string,
  preserve_devices?: string,
  uid?: string,
  verify_mode?: string
}
interface Anon154 {
  address?: string|null,
  availability_zone?: string|null,
  id?: string|null,
  port?: number|null
}
interface Anon155 {
  enabled?: boolean
}
interface Anon156 {
  bucket_name: string,
  ingestion_role: string,
  source_engine: string,
  source_engine_version: string,
  bucket_prefix?: string|null
}
interface Anon157 {
  option_name: string,
  db_security_group_memberships?: string[]|null,
  option_settings?: Anon29[]|null,
  port?: number|null,
  version?: string|null,
  vpc_security_group_memberships?: string[]|null
}
interface Anon158 {
  name: string,
  value: string,
  apply_method?: string
}
interface Anon159 {
  cidr?: string|null,
  security_group_id?: string|null,
  security_group_name?: string|null,
  security_group_owner_id?: string|null
}
interface Anon160 {
  action: string,
  from_port: number,
  protocol: string,
  rule_no: number,
  to_port: number,
  cidr_block?: string|null,
  icmp_code?: number|null,
  icmp_type?: number|null,
  ipv6_cidr_block?: string|null
}
interface Anon161 {
  cidr_block?: string|null,
  egress_only_gateway_id?: string|null,
  gateway_id?: string|null,
  instance_id?: string|null,
  ipv6_cidr_block?: string|null,
  nat_gateway_id?: string|null,
  network_interface_id?: string|null,
  transit_gateway_id?: string|null,
  vpc_peering_connection_id?: string|null
}
interface Anon162 {
  from_port: number,
  protocol: string,
  to_port: number,
  cidr_blocks?: string[]|null,
  description?: string|null,
  ipv6_cidr_blocks?: string[]|null,
  prefix_list_ids?: string[]|null,
  security_groups?: string[]|null,
  self?: boolean
}
interface Anon163 {
  customer_dns_ips: string[],
  customer_username: string,
  subnet_ids: string[],
  vpc_id: string
}
interface Anon164 {
  subnet_ids: string[],
  vpc_id: string
}
interface Anon165 {
  interval: number,
  interval_unit?: string,
  times?: string[]|null
}
interface Anon166 {
  count: number
}
interface Anon167 {
  name: string,
  copy_tags?: boolean|null,
  create_rule?: Anon165|null,
  retain_rule?: Anon166|null,
  tags_to_add?: {[s: string]: string}|null
}
interface Anon168 {
  resource_types: string[],
  schedule: Anon167[],
  target_tags: {[s: string]: string}
}
interface Anon169 {
  auth_mechanism?: string,
  auth_source?: string,
  auth_type?: string,
  docs_to_investigate?: string,
  extract_doc_id?: string,
  nesting_level?: string
}
interface Anon170 {
  bucket_folder?: string,
  bucket_name?: string,
  compression_type?: string,
  csv_delimiter?: string,
  csv_row_delimiter?: string,
  external_table_definition?: string,
  service_access_role_arn?: string
}
interface Anon171 {
  region_name: string
}
interface Anon172 {
  name: string,
  type: string
}
interface Anon173 {
  hash_key: string,
  name: string,
  projection_type: string,
  non_key_attributes?: string[]|null,
  range_key?: string|null,
  read_capacity?: number|null,
  write_capacity?: number|null
}
interface Anon174 {
  name: string,
  projection_type: string,
  range_key: string,
  non_key_attributes?: string[]|null
}
interface Anon175 {
  enabled: boolean
}
interface Anon176 {
  attribute_name: string,
  enabled: boolean
}
interface Anon177 {
  version: string,
  launch_template_id?: string|null,
  launch_template_name?: string|null
}
interface Anon178 {
  availability_zone?: string|null,
  instance_type?: string|null,
  max_price?: string|null,
  priority?: number|null,
  subnet_id?: string|null,
  weighted_capacity?: number|null
}
interface Anon179 {
  launch_template_specification: Anon177,
  override?: Anon178[]|null
}
interface Anon180 {
  default_target_capacity_type: string,
  total_target_capacity: number,
  on_demand_target_capacity?: number|null,
  spot_target_capacity?: number|null
}
interface Anon181 {
  allocation_strategy?: string
}
interface Anon182 {
  allocation_strategy?: string,
  instance_interruption_behavior?: string,
  instance_pools_to_use_count?: number
}
interface Anon183 {
  type?: string
}
interface Anon184 {
  container_name: string,
  container_port: number,
  elb_name?: string|null,
  target_group_arn?: string|null
}
interface Anon185 {
  type: string,
  field?: string|null
}
interface Anon186 {
  type: string,
  expression?: string|null
}
interface Anon187 {
  registry_arn: string,
  container_name?: string|null,
  container_port?: number|null,
  port?: number|null
}
interface Anon188 {
  autoprovision?: boolean,
  driver?: string|null,
  driver_opts?: {[s: string]: string}|null,
  labels?: {[s: string]: string}|null,
  scope?: string|null
}
interface Anon189 {
  name: string,
  docker_volume_configuration?: Anon188|null,
  host_path?: string|null
}
interface Anon190 {
  subnet_ids: string[],
  security_group_ids?: string[]|null,
  vpc_id?: string|null
}
interface Anon191 {
  data?: string|null
}
interface Anon192 {
  service_role: string,
  delete_source_from_s3?: boolean|null,
  max_age_in_days?: number|null,
  max_count?: number|null
}
interface Anon193 {
  name: string,
  namespace: string,
  value: string,
  resource?: string|null
}
interface Anon194 {
  num_node_groups: number,
  replicas_per_node_group: number
}
interface Anon195 {
  dedicated_master_count?: number|null,
  dedicated_master_enabled?: boolean,
  dedicated_master_type?: string|null,
  instance_count?: number,
  instance_type?: string,
  zone_awareness_enabled?: boolean|null
}
interface Anon196 {
  identity_pool_id: string,
  role_arn: string,
  user_pool_id: string,
  enabled?: boolean
}
interface Anon197 {
  ebs_enabled: boolean,
  iops?: number|null,
  volume_size?: number|null,
  volume_type?: string|null
}
interface Anon198 {
  enabled: boolean,
  kms_key_id?: string|null
}
interface Anon199 {
  cloudwatch_log_group_arn: string,
  log_type: string,
  enabled?: boolean
}
interface Anon200 {
  automated_snapshot_start_hour: number
}
interface Anon201 {
  availability_zones?: string[]|null,
  security_group_ids?: string[]|null,
  subnet_ids?: string[]|null,
  vpc_id?: string|null
}
interface Anon202 {
  bucket?: string|null,
  storage_class?: string|null
}
interface Anon203 {
  access?: string[]|null,
  grantee?: string|null,
  grantee_type?: string|null
}
interface Anon204 {
  completed?: string|null,
  error?: string|null,
  progressing?: string|null,
  warning?: string|null
}
interface Anon205 {
  audio_packing_mode?: string|null,
  bit_rate?: string|null,
  channels?: string|null,
  codec?: string|null,
  sample_rate?: string|null
}
interface Anon206 {
  bit_depth?: string|null,
  bit_order?: string|null,
  profile?: string|null,
  signed?: string|null
}
interface Anon207 {
  aspect_ratio?: string|null,
  format?: string|null,
  interval?: string|null,
  max_height?: string|null,
  max_width?: string|null,
  padding_policy?: string|null,
  resolution?: string|null,
  sizing_policy?: string|null
}
interface Anon208 {
  aspect_ratio?: string|null,
  bit_rate?: string|null,
  codec?: string|null,
  display_aspect_ratio?: string|null,
  fixed_gop?: string|null,
  frame_rate?: string|null,
  keyframes_max_dist?: string|null,
  max_frame_rate?: string,
  max_height?: string|null,
  max_width?: string|null,
  padding_policy?: string|null,
  resolution?: string|null,
  sizing_policy?: string
}
interface Anon209 {
  horizontal_align?: string|null,
  horizontal_offset?: string|null,
  id?: string|null,
  max_height?: string|null,
  max_width?: string|null,
  opacity?: string|null,
  sizing_policy?: string|null,
  target?: string|null,
  vertical_align?: string|null,
  vertical_offset?: string|null
}
interface Anon210 {
  instance_port: number,
  instance_protocol: string,
  lb_port: number,
  lb_protocol: string,
  ssl_certificate_id?: string|null
}
interface Anon211 {
  bucket: string,
  bucket_prefix?: string|null,
  enabled?: boolean,
  interval?: number
}
interface Anon212 {
  healthy_threshold: number,
  interval: number,
  target: string,
  timeout: number,
  unhealthy_threshold: number
}
interface Anon213 {
  name: string,
  path: string,
  args?: string[]|null
}
interface Anon214 {
  instance_profile: string,
  additional_master_security_groups?: string|null,
  additional_slave_security_groups?: string|null,
  emr_managed_master_security_group?: string|null,
  emr_managed_slave_security_group?: string|null,
  key_name?: string|null,
  service_access_security_group?: string|null,
  subnet_id?: string|null
}
interface Anon215 {
  size: number,
  type: string,
  iops?: number|null,
  volumes_per_instance?: number
}
interface Anon216 {
  instance_role: string,
  instance_type: string,
  autoscaling_policy?: string|null,
  bid_price?: string|null,
  ebs_config?: Anon215[]|null,
  id?: string|null,
  instance_count?: number,
  name?: string|null
}
interface Anon217 {
  kdc_admin_password: string,
  realm: string,
  ad_domain_join_password?: string|null,
  ad_domain_join_user?: string|null,
  cross_realm_trust_principal_password?: string|null
}
interface Anon218 {
  jar: string,
  args?: string[]|null,
  main_class?: string|null,
  properties?: {[s: string]: string}|null
}
interface Anon219 {
  action_on_failure: string,
  name: string,
  hadoop_jar_step?: Anon218|null
}
interface Anon220 {
  size: number,
  type: string,
  iops?: number|null,
  volumes_per_instance?: number|null
}
interface Anon221 {
  type: string,
  fleet_id?: string|null,
  message?: string|null
}
interface Anon222 {
  bucket: string,
  key: string,
  role_arn: string
}
interface Anon223 {
  from_port: number,
  ip_range: string,
  protocol: string,
  to_port: number
}
interface Anon224 {
  new_game_sessions_per_creator?: number|null,
  policy_period_in_minutes?: number|null
}
interface Anon225 {
  concurrent_executions: number,
  launch_path: string,
  parameters?: string|null
}
interface Anon226 {
  game_session_activation_timeout_seconds?: number|null,
  max_concurrent_game_session_activations?: number|null,
  server_process?: Anon225[]|null
}
interface Anon227 {
  maximum_individual_player_latency_milliseconds: number,
  policy_duration_seconds?: number|null
}
interface Anon228 {
  events: string[],
  sns_topic: string
}
interface Anon229 {
  flow_logs_enabled?: boolean,
  flow_logs_s3_bucket?: string|null,
  flow_logs_s3_prefix?: string|null
}
interface Anon230 {
  ip_addresses?: string[]|null,
  ip_family?: string|null
}
interface Anon231 {
  name: string,
  comment?: string|null,
  type?: string|null
}
interface Anon232 {
  name?: string|null,
  parameters?: {[s: string]: string}|null,
  serialization_library?: string|null
}
interface Anon233 {
  skewed_column_names?: string[]|null,
  skewed_column_value_location_maps?: {[s: string]: string}|null,
  skewed_column_values?: string[]|null
}
interface Anon234 {
  column: string,
  sort_order: number
}
interface Anon235 {
  bucket_columns?: string[]|null,
  columns?: Anon231[]|null,
  compressed?: boolean|null,
  input_format?: string|null,
  location?: string|null,
  number_of_buckets?: number|null,
  output_format?: string|null,
  parameters?: {[s: string]: string}|null,
  ser_de_info?: Anon232|null,
  skewed_info?: Anon233|null,
  sort_columns?: Anon234[]|null,
  stored_as_sub_directories?: boolean|null
}
interface Anon236 {
  classification: string,
  grok_pattern: string,
  custom_patterns?: string|null
}
interface Anon237 {
  json_path: string
}
interface Anon238 {
  classification: string,
  row_tag: string
}
interface Anon239 {
  availability_zone?: string|null,
  security_group_id_list?: string[]|null,
  subnet_id?: string|null
}
interface Anon240 {
  path: string
}
interface Anon241 {
  connection_name: string,
  path: string,
  exclusions?: string[]|null
}
interface Anon242 {
  path: string,
  exclusions?: string[]|null
}
interface Anon243 {
  delete_behavior?: string,
  update_behavior?: string
}
interface Anon244 {
  script_location: string,
  name?: string
}
interface Anon245 {
  max_concurrent_runs?: number
}
interface Anon246 {
  cloudwatch_encryption_mode?: string,
  kms_key_arn?: string|null
}
interface Anon247 {
  job_bookmarks_encryption_mode?: string,
  kms_key_arn?: string|null
}
interface Anon248 {
  kms_key_arn?: string|null,
  s3_encryption_mode?: string
}
interface Anon249 {
  cloudwatch_encryption?: Anon246|null,
  job_bookmarks_encryption?: Anon247|null,
  s3_encryption?: Anon248|null
}
interface Anon250 {
  job_name: string,
  arguments_?: {[s: string]: string}|null,
  timeout?: number|null
}
interface Anon251 {
  job_name: string,
  state: string,
  logical_operator?: string
}
interface Anon252 {
  conditions: Anon251[],
  logical?: string
}
interface Anon253 {
  cpu_credits?: string|null
}
interface Anon254 {
  device_name: string,
  delete_on_termination?: boolean,
  encrypted?: boolean|null,
  iops?: number|null,
  snapshot_id?: string|null,
  volume_id?: string|null,
  volume_size?: number|null,
  volume_type?: string|null
}
interface Anon255 {
  device_name: string,
  no_device?: boolean|null,
  virtual_name?: string|null
}
interface Anon256 {
  device_index: number,
  network_interface_id: string,
  delete_on_termination?: boolean
}
interface Anon257 {
  delete_on_termination?: boolean,
  iops?: number|null,
  volume_id?: string|null,
  volume_size?: number|null,
  volume_type?: string|null
}
interface Anon258 {
  description?: string|null,
  searchable_attributes?: string[]|null
}
interface Anon259 {
  alarm_name: string,
  role_arn: string,
  state_reason: string,
  state_value: string
}
interface Anon260 {
  metric_name: string,
  metric_namespace: string,
  metric_unit: string,
  metric_value: string,
  role_arn: string,
  metric_timestamp?: string|null
}
interface Anon261 {
  hash_key_field: string,
  hash_key_value: string,
  range_key_field: string,
  range_key_value: string,
  role_arn: string,
  table_name: string,
  hash_key_type?: string|null,
  payload_field?: string|null,
  range_key_type?: string|null
}
interface Anon262 {
  endpoint: string,
  id: string,
  index: string,
  role_arn: string,
  type: string
}
interface Anon263 {
  delivery_stream_name: string,
  role_arn: string,
  separator?: string|null
}
interface Anon264 {
  role_arn: string,
  stream_name: string,
  partition_key?: string|null
}
interface Anon265 {
  role_arn: string,
  topic: string
}
interface Anon266 {
  bucket_name: string,
  key: string,
  role_arn: string
}
interface Anon267 {
  role_arn: string,
  target_arn: string,
  message_format?: string
}
interface Anon268 {
  queue_url: string,
  role_arn: string,
  use_base64: boolean
}
interface Anon269 {
  log_stream_arn: string,
  role_arn: string,
  id?: string|null
}
interface Anon270 {
  resource_arn: string,
  role_arn: string
}
interface Anon271 {
  lambda?: Anon270|null
}
interface Anon272 {
  name: string,
  sql_type: string,
  mapping?: string|null
}
interface Anon273 {
  record_column_delimiter: string,
  record_row_delimiter: string
}
interface Anon274 {
  record_row_path: string
}
interface Anon275 {
  csv?: Anon273|null,
  json?: Anon274|null
}
interface Anon276 {
  mapping_parameters?: Anon275|null,
  record_format_type?: string|null
}
interface Anon277 {
  record_columns: Anon272[],
  record_encoding?: string|null,
  record_format?: Anon276|null
}
interface Anon278 {
  starting_position?: string|null
}
interface Anon279 {
  name_prefix: string,
  id?: string|null,
  kinesis_firehose?: Anon270|null,
  kinesis_stream?: Anon270|null,
  parallelism?: Anon166|null,
  processing_configuration?: Anon271|null,
  schema?: Anon277|null,
  starting_position_configuration?: Anon278[]|null,
  stream_names?: string[]|null
}
interface Anon280 {
  record_format_type?: string|null
}
interface Anon281 {
  name: string,
  id?: string|null,
  kinesis_firehose?: Anon270|null,
  kinesis_stream?: Anon270|null,
  lambda?: Anon270|null,
  schema?: Anon280|null
}
interface Anon282 {
  bucket_arn: string,
  file_key: string,
  role_arn: string
}
interface Anon283 {
  table_name: string,
  id?: string|null,
  s3?: Anon282|null,
  schema?: Anon277|null
}
interface Anon284 {
  enabled?: boolean,
  log_group_name?: string|null,
  log_stream_name?: string|null
}
interface Anon285 {
  parameter_name: string,
  parameter_value: string
}
interface Anon286 {
  type: string,
  parameters?: Anon285[]|null
}
interface Anon287 {
  enabled?: boolean|null,
  processors?: Anon286[]|null
}
interface Anon288 {
  domain_arn: string,
  index_name: string,
  role_arn: string,
  buffering_interval?: number,
  buffering_size?: number,
  cloudwatch_logging_options?: Anon284|null,
  index_rotation_period?: string,
  processing_configuration?: Anon287|null,
  retry_duration?: number,
  s3_backup_mode?: string,
  type_name?: string|null
}
interface Anon289 {
  timestamp_formats?: string[]|null
}
interface Anon290 {
  case_insensitive?: boolean,
  column_to_json_key_mappings?: {[s: string]: string}|null,
  convert_dots_in_json_keys_to_underscores?: boolean
}
interface Anon291 {
  hive_json_ser_de?: Anon289|null,
  open_x_json_ser_de?: Anon290|null
}
interface Anon292 {
  deserializer?: Anon291|null
}
interface Anon293 {
  block_size_bytes?: number,
  bloom_filter_columns?: string[]|null,
  bloom_filter_false_positive_probability?: number,
  compression?: string,
  dictionary_key_threshold?: number,
  enable_padding?: boolean,
  format_version?: string,
  padding_tolerance?: number,
  row_index_stride?: number,
  stripe_size_bytes?: number
}
interface Anon294 {
  block_size_bytes?: number,
  compression?: string,
  enable_dictionary_compression?: boolean,
  max_padding_bytes?: number,
  page_size_bytes?: number,
  writer_version?: string
}
interface Anon295 {
  orc_ser_de?: Anon293|null,
  parquet_ser_de?: Anon294|null
}
interface Anon296 {
  serializer?: Anon295|null
}
interface Anon297 {
  database_name: string,
  role_arn: string,
  table_name: string,
  catalog_id?: string|null,
  region?: string|null,
  version_id?: string
}
interface Anon298 {
  enabled?: boolean,
  input_format_configuration?: Anon292|null,
  output_format_configuration?: Anon296|null,
  schema_configuration?: Anon297|null
}
interface Anon299 {
  bucket_arn: string,
  role_arn: string,
  buffer_interval?: number,
  buffer_size?: number,
  cloudwatch_logging_options?: Anon284|null,
  compression_format?: string,
  kms_key_arn?: string|null,
  prefix?: string|null
}
interface Anon300 {
  bucket_arn: string,
  role_arn: string,
  buffer_interval?: number,
  buffer_size?: number,
  cloudwatch_logging_options?: Anon284|null,
  compression_format?: string,
  data_format_conversion_configuration?: Anon298|null,
  error_output_prefix?: string|null,
  kms_key_arn?: string|null,
  prefix?: string|null,
  processing_configuration?: Anon287|null,
  s3_backup_configuration?: Anon299|null,
  s3_backup_mode?: string
}
interface Anon301 {
  kinesis_stream_arn: string,
  role_arn: string
}
interface Anon302 {
  cluster_jdbcurl: string,
  data_table_name: string,
  password: string,
  role_arn: string,
  username: string,
  cloudwatch_logging_options?: Anon284|null,
  copy_options?: string|null,
  data_table_columns?: string|null,
  processing_configuration?: Anon287|null,
  retry_duration?: number,
  s3_backup_configuration?: Anon299|null,
  s3_backup_mode?: string
}
interface Anon303 {
  hec_endpoint: string,
  hec_token: string,
  cloudwatch_logging_options?: Anon284|null,
  hec_acknowledgment_timeout?: number,
  hec_endpoint_type?: string,
  processing_configuration?: Anon287|null,
  retry_duration?: number,
  s3_backup_mode?: string
}
interface Anon304 {
  encryption_context_equals?: {[s: string]: string}|null,
  encryption_context_subset?: {[s: string]: string}|null
}
interface Anon305 {
  additional_version_weights?: {[s: string]: number}|null
}
interface Anon306 {
  target_arn: string
}
interface Anon307 {
  variables?: {[s: string]: string}|null
}
interface Anon308 {
  mode: string
}
interface Anon309 {
  security_group_ids: string[],
  subnet_ids: string[],
  vpc_id?: string|null
}
interface Anon310 {
  device_name: string,
  delete_on_termination?: boolean,
  encrypted?: boolean|null,
  iops?: number|null,
  no_device?: boolean|null,
  snapshot_id?: string|null,
  volume_size?: number|null,
  volume_type?: string|null
}
interface Anon311 {
  delete_on_termination?: boolean,
  iops?: number|null,
  volume_size?: number|null,
  volume_type?: string|null
}
interface Anon312 {
  delete_on_termination?: string|null,
  encrypted?: string|null,
  iops?: number|null,
  kms_key_id?: string|null,
  snapshot_id?: string|null,
  volume_size?: number|null,
  volume_type?: string|null
}
interface Anon313 {
  device_name?: string|null,
  ebs?: Anon312|null,
  no_device?: string|null,
  virtual_name?: string|null
}
interface Anon314 {
  capacity_reservation_id?: string|null
}
interface Anon315 {
  capacity_reservation_preference?: string|null,
  capacity_reservation_target?: Anon314|null
}
interface Anon316 {
  type: string
}
interface Anon317 {
  arn?: string|null,
  name?: string|null
}
interface Anon318 {
  block_duration_minutes?: number|null,
  instance_interruption_behavior?: string|null,
  max_price?: string|null,
  spot_instance_type?: string|null,
  valid_until?: |null
}
interface Anon319 {
  market_type?: string|null,
  spot_options?: Anon318|null
}
interface Anon320 {
  license_configuration_arn: string
}
interface Anon321 {
  enabled?: boolean|null
}
interface Anon322 {
  associate_public_ip_address?: boolean|null,
  delete_on_termination?: boolean|null,
  description?: string|null,
  device_index?: number|null,
  ipv4_address_count?: number|null,
  ipv4_addresses?: string[]|null,
  ipv6_address_count?: number|null,
  ipv6_addresses?: string[]|null,
  network_interface_id?: string|null,
  private_ip_address?: string|null,
  security_groups?: string[]|null,
  subnet_id?: string|null
}
interface Anon323 {
  affinity?: string|null,
  availability_zone?: string|null,
  group_name?: string|null,
  host_id?: string|null,
  spread_domain?: string|null,
  tenancy?: string|null
}
interface Anon324 {
  resource_type?: string|null,
  tags?: {[s: string]: string}|null
}
interface Anon325 {
  name?: string|null,
  value?: string|null
}
interface Anon326 {
  continuous?: string,
  one_time?: string
}
interface Anon327 {
  password?: string|null,
  url?: string|null,
  username?: string|null
}
interface Anon328 {
  ingest_endpoints?: Anon327[]|null
}
interface Anon329 {
  password: string,
  username: string,
  console_access?: boolean,
  groups?: string[]|null
}
interface Anon330 {
  id?: string|null,
  revision?: number|null
}
interface Anon331 {
  console_url?: string|null,
  endpoints?: string[]|null,
  ip_address?: string|null
}
interface Anon332 {
  audit?: boolean,
  general?: boolean
}
interface Anon333 {
  day_of_week: string,
  time_of_day: string,
  time_zone: string
}
interface Anon334 {
  device_index: number,
  instance: string,
  attachment_id?: string|null
}
interface Anon335 {
  type: string,
  password?: string|null,
  revision?: string|null,
  ssh_key?: string|null,
  url?: string|null,
  username?: string|null
}
interface Anon336 {
  key: string,
  value: string,
  secure?: boolean
}
interface Anon337 {
  certificate: string,
  private_key: string,
  chain?: string|null
}
interface Anon338 {
  mount_point: string,
  number_of_disks: number,
  size: number,
  iops?: number,
  raid_level?: string,
  type?: string
}
interface Anon339 {
  device_name: string,
  delete_on_termination?: boolean,
  iops?: number|null,
  snapshot_id?: string|null,
  volume_size?: number|null,
  volume_type?: string|null
}
interface Anon340 {
  type: string,
  url: string,
  password?: string|null,
  revision?: string|null,
  ssh_key?: string|null,
  username?: string|null
}
interface Anon341 {
  lambda_function_name?: string|null,
  mode?: string|null,
  web_url?: string|null
}
interface Anon342 {
  daily?: number|null,
  maximum_duration?: number|null,
  messages_per_second?: number|null,
  total?: number|null
}
interface Anon343 {
  end?: string|null,
  start?: string|null
}
interface Anon344 {
  auto_pause?: boolean,
  max_capacity?: number,
  min_capacity?: number,
  seconds_until_auto_pause?: number
}
interface Anon345 {
  enable: boolean,
  bucket_name?: string|null,
  s3_key_prefix?: string|null
}
interface Anon346 {
  destination_region: string,
  grant_name?: string|null,
  retention_period?: number
}
interface Anon347 {
  cidr?: string|null,
  security_group_name?: string|null,
  security_group_owner_id?: string|null
}
interface Anon348 {
  query: string,
  type?: string
}
interface Anon349 {
  evaluate_target_health: boolean,
  name: string,
  zone_id: string
}
interface Anon350 {
  continent?: string|null,
  country?: string|null,
  subdivision?: string|null
}
interface Anon351 {
  region: string
}
interface Anon352 {
  weight: number
}
interface Anon353 {
  vpc_id: string,
  vpc_region?: string|null
}
interface Anon354 {
  allowed_methods: string[],
  allowed_origins: string[],
  allowed_headers?: string[]|null,
  expose_headers?: string[]|null,
  max_age_seconds?: number|null
}
interface Anon355 {
  date?: string|null,
  days?: number|null,
  expired_object_delete_marker?: boolean|null
}
interface Anon356 {
  days?: number|null
}
interface Anon357 {
  storage_class: string,
  days?: number|null
}
interface Anon358 {
  storage_class: string,
  date?: string|null,
  days?: number|null
}
interface Anon359 {
  enabled: boolean,
  abort_incomplete_multipart_upload_days?: number|null,
  expiration?: Anon355[]|null,
  id?: string|null,
  noncurrent_version_expiration?: Anon356[]|null,
  noncurrent_version_transition?: Anon357[]|null,
  prefix?: string|null,
  tags?: {[s: string]: string}|null,
  transition?: Anon358[]|null
}
interface Anon360 {
  target_bucket: string,
  target_prefix?: string|null
}
interface Anon361 {
  mode: string,
  days?: number|null,
  years?: number|null
}
interface Anon362 {
  default_retention: Anon361
}
interface Anon363 {
  object_lock_enabled: string,
  rule?: Anon362|null
}
interface Anon364 {
  owner: string
}
interface Anon365 {
  bucket: string,
  access_control_translation?: Anon364|null,
  account_id?: string|null,
  replica_kms_key_id?: string|null,
  storage_class?: string|null
}
interface Anon366 {
  prefix?: string|null,
  tags?: {[s: string]: string}|null
}
interface Anon367 {
  sse_kms_encrypted_objects?: Anon175|null
}
interface Anon368 {
  destination: Anon365,
  status: string,
  filter?: Anon366|null,
  id?: string|null,
  prefix?: string|null,
  priority?: number|null,
  source_selection_criteria?: Anon367|null
}
interface Anon369 {
  role: string,
  rules: Anon368[]
}
interface Anon370 {
  sse_algorithm: string,
  kms_master_key_id?: string|null
}
interface Anon371 {
  apply_server_side_encryption_by_default?: Anon370|null
}
interface Anon372 {
  rule?: Anon371|null
}
interface Anon373 {
  enabled?: boolean,
  mfa_delete?: boolean
}
interface Anon374 {
  error_document?: string|null,
  index_document?: string|null,
  redirect_all_requests_to?: string|null,
  routing_rules?: string|null
}
interface Anon375 {
  key_id: string
}
interface Anon376 {
}
interface Anon377 {
  sse_kms?: Anon375|null,
  sse_s3?: Anon376|null
}
interface Anon378 {
  bucket_arn: string,
  format: string,
  account_id?: string|null,
  encryption?: Anon377|null,
  prefix?: string|null
}
interface Anon379 {
  bucket: Anon378
}
interface Anon380 {
  frequency: string
}
interface Anon381 {
  prefix?: string|null
}
interface Anon382 {
  events: string[],
  filter_prefix?: string|null,
  filter_suffix?: string|null,
  id?: string|null,
  lambda_function_arn?: string|null
}
interface Anon383 {
  events: string[],
  queue_arn: string,
  filter_prefix?: string|null,
  filter_suffix?: string|null,
  id?: string|null
}
interface Anon384 {
  events: string[],
  topic_arn: string,
  filter_prefix?: string|null,
  filter_suffix?: string|null,
  id?: string|null
}
interface Anon385 {
  automatically_after_days: number
}
interface Anon386 {
  ttl: number,
  type: string
}
interface Anon387 {
  dns_records: Anon386[],
  namespace_id: string,
  routing_policy?: string
}
interface Anon388 {
  failure_threshold?: number|null,
  resource_path?: string|null,
  type?: string|null
}
interface Anon389 {
  failure_threshold?: number|null
}
interface Anon390 {
  default_value: string,
  dimension_name: string,
  value_source: string
}
interface Anon391 {
  role_arn: string,
  stream_arn: string
}
interface Anon392 {
  topic_arn: string
}
interface Anon393 {
  header_name: string,
  header_value: string,
  position: number
}
interface Anon394 {
  message: string,
  position: number,
  sender: string,
  smtp_reply_code: string,
  status_code?: string|null,
  topic_arn?: string|null
}
interface Anon395 {
  function_arn: string,
  position: number,
  invocation_type?: string|null,
  topic_arn?: string|null
}
interface Anon396 {
  bucket_name: string,
  position: number,
  kms_key_arn?: string|null,
  object_key_prefix?: string|null,
  topic_arn?: string|null
}
interface Anon397 {
  position: number,
  topic_arn: string
}
interface Anon398 {
  position: number,
  scope: string,
  topic_arn?: string|null
}
interface Anon399 {
  organization_arn: string,
  position: number,
  topic_arn?: string|null
}
interface Anon400 {
  device_name: string,
  delete_on_termination?: boolean,
  encrypted?: boolean|null,
  iops?: number|null,
  snapshot_id?: string|null,
  volume_size?: number|null,
  volume_type?: string|null
}
interface Anon401 {
  ami: string,
  instance_type: string,
  associate_public_ip_address?: boolean,
  availability_zone?: string|null,
  ebs_block_device?: Anon400[]|null,
  ebs_optimized?: boolean,
  ephemeral_block_device?: Anon16[]|null,
  iam_instance_profile?: string|null,
  iam_instance_profile_arn?: string|null,
  key_name?: string|null,
  monitoring?: boolean,
  placement_group?: string|null,
  placement_tenancy?: string|null,
  root_block_device?: Anon311[]|null,
  spot_price?: string|null,
  subnet_id?: string|null,
  tags?: {[s: string]: string}|null,
  user_data?: string|null,
  vpc_security_group_ids?: string[]|null,
  weighted_capacity?: string|null
}
interface Anon402 {
  s3_bucket_name: string,
  s3_key_prefix?: string|null
}
interface Anon403 {
  default_value?: string|null,
  description?: string|null,
  name?: string|null,
  type?: string|null
}
interface Anon404 {
  account_ids: string,
  type: string
}
interface Anon405 {
  s3_bucket_name: string,
  s3_region: string,
  s3_bucket_prefix?: string|null
}
interface Anon406 {
  name: string,
  values: string[]
}
interface Anon407 {
  approve_after_days: number,
  patch_filter: Anon89[],
  compliance_level?: string,
  enable_non_security?: boolean
}
interface Anon408 {
  bucket_name: string,
  region: string,
  kms_key_arn?: string|null,
  prefix?: string|null,
  sync_format?: string
}
interface Anon409 {
  domain_name: string,
  password: string,
  username: string
}
interface Anon410 {
  directory_mode?: string,
  file_mode?: string,
  group_id?: number,
  owner_id?: number
}
interface Anon411 {
  dns_name?: string|null,
  hosted_zone_id?: string|null
}
interface Anon412 {
  allow_classic_link_to_remote_vpc?: boolean,
  allow_remote_vpc_dns_resolution?: boolean,
  allow_vpc_to_remote_classic_link?: boolean
}
interface Anon413 {
  destination_cidr_block?: string|null,
  source?: string|null,
  state?: string|null
}
interface Anon414 {
  accepted_route_count?: number|null,
  last_status_change?: string|null,
  outside_ip_address?: string|null,
  status?: string|null,
  status_message?: string|null
}
interface Anon415 {
  type: string,
  data?: string|null
}
interface Anon416 {
  positional_constraint: string,
  text_transformation: string,
  field_to_match?: Anon415|null,
  target_string?: string|null
}
interface Anon417 {
  type: string,
  value: string
}
interface Anon418 {
  data_id: string,
  negated: boolean,
  type: string
}
interface Anon419 {
  regex_pattern_set_id: string,
  text_transformation: string,
  field_to_match?: Anon415|null
}
interface Anon420 {
  priority: number,
  rule_id: string,
  action?: Anon316|null,
  type?: string
}
interface Anon421 {
  comparison_operator: string,
  size: number,
  text_transformation: string,
  field_to_match?: Anon415|null
}
interface Anon422 {
  text_transformation: string,
  field_to_match?: Anon415|null
}
interface Anon423 {
  priority: number,
  rule_id: string,
  action?: Anon316|null,
  override_action?: Anon316|null,
  type?: string
}